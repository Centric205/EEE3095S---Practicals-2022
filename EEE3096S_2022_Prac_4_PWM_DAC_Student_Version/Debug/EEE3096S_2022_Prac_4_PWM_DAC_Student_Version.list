
EEE3096S_2022_Prac_4_PWM_DAC_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000366c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  00020674  2**0
                  CONTENTS
  4 .ARM          00000000  0800379c  0800379c  00020674  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800379c  0800379c  00020674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000674  20000000  080037a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000674  08003e18  00020674  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08003e18  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008712  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001765  00000000  00000000  00028dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001120f  00000000  00000000  0002b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a98c  00000000  00000000  0003c93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a8dc  00000000  00000000  000472cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1ba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000254c  00000000  00000000  000b1bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000674 	.word	0x20000674
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003714 	.word	0x08003714

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000678 	.word	0x20000678
 8000104:	08003714 	.word	0x08003714

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fbcb 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f827 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f000 f98b 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 800041a:	f000 f96b 	bl	80006f4 <MX_DMA_Init>
  MX_TIM2_Init();
 800041e:	f000 f86b 	bl	80004f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000422:	f000 f8e7 	bl	80005f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //TASK 4
  //Start TIM3 in PWM mode on channel 1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <main+0x48>)
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f001 fe94 	bl	8002158 <HAL_TIM_PWM_Start>
  //Start TIM2 in Output Compare (OC) mode on channel 1.
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <main+0x4c>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fd7f 	bl	8001f38 <HAL_TIM_OC_Start>
  //Start the DMA in interrupt (IT) mode.
  uint32_t sourceAddress = (uint32_t) &sin_LUT;  // Instructions said any. So can change.
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <main+0x50>)
 800043c:	607b      	str	r3, [r7, #4]
  uint32_t DestAddress = (uint32_t) &(TIM3->CCR1);
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <main+0x54>)
 8000440:	603b      	str	r3, [r7, #0]

  //Start the DMA transfer
  HAL_DMA_Start_IT(&hdma_tim2_ch1, sourceAddress, DestAddress, NS);
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <main+0x58>)
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	f000 fd37 	bl	8000ebc <HAL_DMA_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044e:	e7fe      	b.n	800044e <main+0x46>
 8000450:	200006f4 	.word	0x200006f4
 8000454:	200006ac 	.word	0x200006ac
 8000458:	20000000 	.word	0x20000000
 800045c:	40000434 	.word	0x40000434
 8000460:	2000073c 	.word	0x2000073c

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b091      	sub	sp, #68	; 0x44
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2410      	movs	r4, #16
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2330      	movs	r3, #48	; 0x30
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 fcdb 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 fcd4 	bl	8002e30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	0021      	movs	r1, r4
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2210      	movs	r2, #16
 800049a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2202      	movs	r2, #2
 80004a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	22a0      	movs	r2, #160	; 0xa0
 80004ac:	0392      	lsls	r2, r2, #14
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 f849 	bl	8001550 <HAL_RCC_OscConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004c2:	f000 fa23 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	003b      	movs	r3, r7
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2202      	movs	r2, #2
 80004d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004de:	003b      	movs	r3, r7
 80004e0:	2101      	movs	r1, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fb4e 	bl	8001b84 <HAL_RCC_ClockConfig>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004ec:	f000 fa0e 	bl	800090c <Error_Handler>
  }
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b011      	add	sp, #68	; 0x44
 80004f6:	bd90      	pop	{r4, r7, pc}

080004f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08e      	sub	sp, #56	; 0x38
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fe:	2328      	movs	r3, #40	; 0x28
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2310      	movs	r3, #16
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fc91 	bl	8002e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050e:	2320      	movs	r3, #32
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2308      	movs	r3, #8
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fc89 	bl	8002e30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	231c      	movs	r3, #28
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fc82 	bl	8002e30 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_TIM2_Init+0xf4>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	05d2      	lsls	r2, r2, #23
 8000532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000534:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <MX_TIM2_Init+0xf4>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_Ticks - 1; //To make the frequency what we want it to be
 8000540:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_TIM2_Init+0xf8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_TIM2_Init+0xf4>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000556:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fc45 	bl	8001de8 <HAL_TIM_Base_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f9d3 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	2128      	movs	r1, #40	; 0x28
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0152      	lsls	r2, r2, #5
 800056e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f001 ffc4 	bl	8002504 <HAL_TIM_ConfigClockSource>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000580:	f000 f9c4 	bl	800090c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <MX_TIM2_Init+0xf4>)
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fc7e 	bl	8001e88 <HAL_TIM_OC_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000590:	f000 f9bc 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	2120      	movs	r1, #32
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_TIM2_Init+0xf4>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fbb9 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80005b2:	f000 f9ab 	bl	800090c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_TIM2_Init+0xf4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fe77 	bl	80022c8 <HAL_TIM_OC_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80005de:	f000 f995 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b00e      	add	sp, #56	; 0x38
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	200006ac 	.word	0x200006ac
 80005f0:	20000600 	.word	0x20000600

080005f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	2328      	movs	r3, #40	; 0x28
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2310      	movs	r3, #16
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f002 fc13 	bl	8002e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	2320      	movs	r3, #32
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	0018      	movs	r0, r3
 8000610:	2308      	movs	r3, #8
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f002 fc0b 	bl	8002e30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	0018      	movs	r0, r3
 800061e:	231c      	movs	r3, #28
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f002 fc04 	bl	8002e30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000628:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <MX_TIM3_Init+0xf8>)
 800062c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800063c:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <MX_TIM3_Init+0xfc>)
 800063e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fbca 	bl	8001de8 <HAL_TIM_Base_Init>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000658:	f000 f958 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	2128      	movs	r1, #40	; 0x28
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	0152      	lsls	r2, r2, #5
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000666:	187a      	adds	r2, r7, r1
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 ff49 	bl	8002504 <HAL_TIM_ConfigClockSource>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000676:	f000 f949 	bl	800090c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fd13 	bl	80020a8 <HAL_TIM_PWM_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000686:	f000 f941 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2120      	movs	r1, #32
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000698:	187a      	adds	r2, r7, r1
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_TIM3_Init+0xf4>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 fb3e 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006a8:	f000 f930 	bl	800090c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2260      	movs	r2, #96	; 0x60
 80006b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_TIM3_Init+0xf4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fe54 	bl	8002378 <HAL_TIM_PWM_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006d4:	f000 f91a 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <MX_TIM3_Init+0xf4>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 f99c 	bl	8000a18 <HAL_TIM_MspPostInit>

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b00e      	add	sp, #56	; 0x38
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200006f4 	.word	0x200006f4
 80006ec:	40000400 	.word	0x40000400
 80006f0:	000003ff 	.word	0x000003ff

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA_Init+0x38>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_DMA_Init+0x38>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_DMA_Init+0x38>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200b      	movs	r0, #11
 8000718:	f000 fb56 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800071c:	200b      	movs	r0, #11
 800071e:	f000 fb68 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	240c      	movs	r4, #12
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f002 fb75 	bl	8002e30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_GPIO_Init+0xdc>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_GPIO_Init+0xdc>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	03c9      	lsls	r1, r1, #15
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0xdc>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	03db      	lsls	r3, r3, #15
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xdc>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_GPIO_Init+0xdc>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xdc>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xdc>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_GPIO_Init+0xdc>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0309      	lsls	r1, r1, #12
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_GPIO_Init+0xdc>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	031b      	lsls	r3, r3, #12
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800079a:	23c0      	movs	r3, #192	; 0xc0
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	0019      	movs	r1, r3
 80007a4:	f000 fe90 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2288      	movs	r2, #136	; 0x88
 80007b2:	0352      	lsls	r2, r2, #13
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	193a      	adds	r2, r7, r4
 80007be:	2390      	movs	r3, #144	; 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fd0f 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22c0      	movs	r2, #192	; 0xc0
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <MX_GPIO_Init+0xe0>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f000 fcfb 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2005      	movs	r0, #5
 80007f8:	f000 fae6 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80007fc:	2005      	movs	r0, #5
 80007fe:	f000 faf8 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b009      	add	sp, #36	; 0x24
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40021000 	.word	0x40021000
 8000810:	48000800 	.word	0x48000800

08000814 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 5
	//Disable DMA transfer, start DMA in IT mode with new source and re enable transfer
	//Remember to debounce using HAL_GetTick()
	start_time = HAL_GetTick();
 800081a:	f000 fa1f 	bl	8000c5c <HAL_GetTick>
 800081e:	0003      	movs	r3, r0
 8000820:	001a      	movs	r2, r3
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <EXTI0_1_IRQHandler+0xc8>)
 8000824:	601a      	str	r2, [r3, #0]

	if(GPIO_PIN_0 == GPIO_PIN_SET && (start_time - end_time) > 200)
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <EXTI0_1_IRQHandler+0xc8>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <EXTI0_1_IRQHandler+0xcc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2bc8      	cmp	r3, #200	; 0xc8
 8000832:	dd4b      	ble.n	80008cc <EXTI0_1_IRQHandler+0xb8>
	{
		__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <EXTI0_1_IRQHandler+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <EXTI0_1_IRQHandler+0xd0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	492a      	ldr	r1, [pc, #168]	; (80008e8 <EXTI0_1_IRQHandler+0xd4>)
 8000840:	400a      	ands	r2, r1
 8000842:	60da      	str	r2, [r3, #12]
		uint32_t destinationAddress = (uint32_t) &(TIM3->CCR1);
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <EXTI0_1_IRQHandler+0xd8>)
 8000846:	603b      	str	r3, [r7, #0]
		uint32_t * sourceAddress = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
		wave_mode = (wave_mode + 1)%3;
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	2103      	movs	r1, #3
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fdd1 	bl	80003fc <__aeabi_idivmod>
 800085a:	000b      	movs	r3, r1
 800085c:	001a      	movs	r2, r3
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 8000860:	601a      	str	r2, [r3, #0]

		if (wave_mode == 0)
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <EXTI0_1_IRQHandler+0x5c>
		{
			sourceAddress = (uint32_t *)sin_LUT;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <EXTI0_1_IRQHandler+0xe0>)
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e00f      	b.n	8000890 <EXTI0_1_IRQHandler+0x7c>
		}
		else if (wave_mode == 1)
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d102      	bne.n	800087e <EXTI0_1_IRQHandler+0x6a>
		{
			sourceAddress = (uint32_t *)saw_LUT;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <EXTI0_1_IRQHandler+0xe4>)
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e008      	b.n	8000890 <EXTI0_1_IRQHandler+0x7c>
		}
		else if (wave_mode == 2)
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d102      	bne.n	800088c <EXTI0_1_IRQHandler+0x78>
		{
			sourceAddress = (uint32_t *)triangle_LUT;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <EXTI0_1_IRQHandler+0xe8>)
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	e001      	b.n	8000890 <EXTI0_1_IRQHandler+0x7c>
		}
		else{
			sourceAddress = (uint32_t *)sin_LUT;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <EXTI0_1_IRQHandler+0xe0>)
 800088e:	607b      	str	r3, [r7, #4]
		}

		sprintf(buffer, "Mode: %d\r\n", wave_mode);
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <EXTI0_1_IRQHandler+0xdc>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	491a      	ldr	r1, [pc, #104]	; (8000900 <EXTI0_1_IRQHandler+0xec>)
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <EXTI0_1_IRQHandler+0xf0>)
 8000898:	0018      	movs	r0, r3
 800089a:	f002 fad1 	bl	8002e40 <siprintf>
		// Transmits data via UART
		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
		HAL_DMA_Abort_IT(&hdma_tim2_ch1);
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <EXTI0_1_IRQHandler+0xf4>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fb71 	bl	8000f88 <HAL_DMA_Abort_IT>
		HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sourceAddress, destinationAddress, NS);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <EXTI0_1_IRQHandler+0xf4>)
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	f000 fb05 	bl	8000ebc <HAL_DMA_Start_IT>
		__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <EXTI0_1_IRQHandler+0xd0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <EXTI0_1_IRQHandler+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0089      	lsls	r1, r1, #2
 80008c0:	430a      	orrs	r2, r1
 80008c2:	60da      	str	r2, [r3, #12]
		start_time = end_time;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <EXTI0_1_IRQHandler+0xcc>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <EXTI0_1_IRQHandler+0xc8>)
 80008ca:	601a      	str	r2, [r3, #0]

	}



	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 fe19 	bl	8001504 <HAL_GPIO_EXTI_IRQHandler>
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000690 	.word	0x20000690
 80008e0:	20000694 	.word	0x20000694
 80008e4:	200006ac 	.word	0x200006ac
 80008e8:	fffffdff 	.word	0xfffffdff
 80008ec:	40000434 	.word	0x40000434
 80008f0:	20000698 	.word	0x20000698
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000200 	.word	0x20000200
 80008fc:	20000400 	.word	0x20000400
 8000900:	0800372c 	.word	0x0800372c
 8000904:	2000069c 	.word	0x2000069c
 8000908:	2000073c 	.word	0x2000073c

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	619a      	str	r2, [r3, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69da      	ldr	r2, [r3, #28]
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0549      	lsls	r1, r1, #21
 8000940:	430a      	orrs	r2, r1
 8000942:	61da      	str	r2, [r3, #28]
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_MspInit+0x44>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	055b      	lsls	r3, r3, #21
 800094c:	4013      	ands	r3, r2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	429a      	cmp	r2, r3
 8000972:	d134      	bne.n	80009de <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 8000976:	69da      	ldr	r2, [r3, #28]
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 800097a:	2101      	movs	r1, #1
 800097c:	430a      	orrs	r2, r1
 800097e:	61da      	str	r2, [r3, #28]
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <HAL_TIM_Base_MspInit+0xb0>)
 8000990:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 8000994:	2210      	movs	r2, #16
 8000996:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009b6:	2220      	movs	r2, #32
 80009b8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fa32 	bl	8000e2c <HAL_DMA_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80009cc:	f7ff ff9e 	bl	800090c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_TIM_Base_MspInit+0xac>)
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009dc:	e010      	b.n	8000a00 <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_TIM_Base_MspInit+0xb4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d10b      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 80009ee:	2102      	movs	r1, #2
 80009f0:	430a      	orrs	r2, r1
 80009f2:	61da      	str	r2, [r3, #28]
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <HAL_TIM_Base_MspInit+0xa8>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	2202      	movs	r2, #2
 80009fa:	4013      	ands	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	2000073c 	.word	0x2000073c
 8000a10:	40020058 	.word	0x40020058
 8000a14:	40000400 	.word	0x40000400

08000a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	240c      	movs	r4, #12
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0018      	movs	r0, r3
 8000a26:	2314      	movs	r3, #20
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f002 fa00 	bl	8002e30 <memset>
  if(htim->Instance==TIM3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_TIM_MspPostInit+0x74>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d124      	bne.n	8000a84 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0289      	lsls	r1, r1, #10
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	029b      	lsls	r3, r3, #10
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2240      	movs	r2, #64	; 0x40
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	2390      	movs	r3, #144	; 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fbb2 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b009      	add	sp, #36	; 0x24
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40000400 	.word	0x40000400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8be 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 faa1 	bl	8001012 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	2000073c 	.word	0x2000073c

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f002 f966 	bl	8002ddc <__errno>
 8000b10:	0003      	movs	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	425b      	negs	r3, r3
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	18d2      	adds	r2, r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b006      	add	sp, #24
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20002000 	.word	0x20002000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000780 	.word	0x20000780
 8000b44:	20000798 	.word	0x20000798

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b7e:	f7ff ffe3 	bl	8000b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b82:	f002 f931 	bl	8002de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff fc3f 	bl	8000408 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000674 	.word	0x20000674
  ldr r2, =_sidata
 8000b98:	080037a4 	.word	0x080037a4
  ldr r2, =_sbss
 8000b9c:	20000674 	.word	0x20000674
  ldr r4, =_ebss
 8000ba0:	20000798 	.word	0x20000798

08000ba4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_COMP_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_Init+0x24>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_Init+0x24>)
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f809 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbe:	f7ff feab 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x5c>)
 8000bda:	681c      	ldr	r4, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x60>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0019      	movs	r1, r3
 8000be2:	23fa      	movs	r3, #250	; 0xfa
 8000be4:	0098      	lsls	r0, r3, #2
 8000be6:	f7ff fa99 	bl	800011c <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	0019      	movs	r1, r3
 8000bee:	0020      	movs	r0, r4
 8000bf0:	f7ff fa94 	bl	800011c <__udivsi3>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f90b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e00f      	b.n	8000c24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d80b      	bhi.n	8000c22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	425b      	negs	r3, r3
 8000c10:	2200      	movs	r2, #0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f8d8 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_InitTick+0x64>)
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b003      	add	sp, #12
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000604 	.word	0x20000604
 8000c30:	2000060c 	.word	0x2000060c
 8000c34:	20000608 	.word	0x20000608

08000c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	001a      	movs	r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	18d2      	adds	r2, r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_IncTick+0x20>)
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000060c 	.word	0x2000060c
 8000c58:	20000784 	.word	0x20000784

08000c5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <HAL_GetTick+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000784 	.word	0x20000784

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b7f      	cmp	r3, #127	; 0x7f
 8000c82:	d809      	bhi.n	8000c98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_EnableIRQ+0x30>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	4091      	lsls	r1, r2
 8000c94:	000a      	movs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
  }
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb8:	d828      	bhi.n	8000d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	33c0      	adds	r3, #192	; 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	589b      	ldr	r3, [r3, r2]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	33c0      	adds	r3, #192	; 0xc0
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d0a:	e031      	b.n	8000d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	400b      	ands	r3, r1
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3306      	adds	r3, #6
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	3304      	adds	r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	001c      	movs	r4, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	430a      	orrs	r2, r1
 8000d66:	3306      	adds	r3, #6
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	18c3      	adds	r3, r0, r3
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b003      	add	sp, #12
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	045b      	lsls	r3, r3, #17
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d301      	bcc.n	8000d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d94:	2301      	movs	r3, #1
 8000d96:	e010      	b.n	8000dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SysTick_Config+0x44>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2103      	movs	r1, #3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x44>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	1c02      	adds	r2, r0, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	0002      	movs	r2, r0
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffaf 	bl	8000d80 <SysTick_Config>
 8000e22:	0003      	movs	r3, r0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e036      	b.n	8000eb0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	2102      	movs	r1, #2
 8000e48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_DMA_Init+0x8c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f98c 	bl	80011b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2221      	movs	r2, #33	; 0x21
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	2100      	movs	r1, #0
 8000eac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}  
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	ffffc00f 	.word	0xffffc00f

08000ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_DMA_Start_IT+0x24>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e04f      	b.n	8000f80 <HAL_DMA_Start_IT+0xc4>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2221      	movs	r2, #33	; 0x21
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d13a      	bne.n	8000f6a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	2102      	movs	r1, #2
 8000efa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2200      	movs	r2, #0
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f91c 	bl	8001156 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	210e      	movs	r1, #14
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e00f      	b.n	8000f58 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	210a      	movs	r1, #10
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2104      	movs	r1, #4
 8000f54:	438a      	bics	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2101      	movs	r1, #1
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f72:	2317      	movs	r3, #23
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000f7a:	2317      	movs	r3, #23
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
} 
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	210f      	movs	r1, #15
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2221      	movs	r2, #33	; 0x21
 8000f9c:	5c9b      	ldrb	r3, [r3, r2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d006      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e028      	b.n	8001004 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	210e      	movs	r1, #14
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	438a      	bics	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2221      	movs	r2, #33	; 0x21
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	0010      	movs	r0, r2
 8001002:	4798      	blx	r3
    } 
  }
  return status;
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	781b      	ldrb	r3, [r3, #0]
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2204      	movs	r2, #4
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	d024      	beq.n	8001084 <HAL_DMA_IRQHandler+0x72>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2204      	movs	r2, #4
 800103e:	4013      	ands	r3, r2
 8001040:	d020      	beq.n	8001084 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2220      	movs	r2, #32
 800104a:	4013      	ands	r3, r2
 800104c:	d107      	bne.n	800105e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2104      	movs	r1, #4
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001066:	2104      	movs	r1, #4
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <HAL_DMA_IRQHandler+0x66>
 8001076:	e06a      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	0010      	movs	r0, r2
 8001080:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001082:	e064      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	2202      	movs	r2, #2
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	d02b      	beq.n	80010ec <HAL_DMA_IRQHandler+0xda>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d027      	beq.n	80010ec <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2220      	movs	r2, #32
 80010a4:	4013      	ands	r3, r2
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	210a      	movs	r1, #10
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2221      	movs	r2, #33	; 0x21
 80010bc:	2101      	movs	r1, #1
 80010be:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	2102      	movs	r1, #2
 80010ca:	4091      	lsls	r1, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2220      	movs	r2, #32
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d036      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	0010      	movs	r0, r2
 80010e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80010ea:	e030      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2208      	movs	r2, #8
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	d028      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2208      	movs	r2, #8
 8001100:	4013      	ands	r3, r2
 8001102:	d024      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	210e      	movs	r1, #14
 8001110:	438a      	bics	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	2101      	movs	r1, #1
 800111e:	4091      	lsls	r1, r2
 8001120:	000a      	movs	r2, r1
 8001122:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2221      	movs	r2, #33	; 0x21
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	0010      	movs	r0, r2
 800114a:	4798      	blx	r3
    }
   }
}  
 800114c:	e7ff      	b.n	800114e <HAL_DMA_IRQHandler+0x13c>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	2101      	movs	r1, #1
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b10      	cmp	r3, #16
 8001182:	d108      	bne.n	8001196 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001194:	e007      	b.n	80011a6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <DMA_CalcBaseAndBitshift+0x30>)
 80011be:	4694      	mov	ip, r2
 80011c0:	4463      	add	r3, ip
 80011c2:	2114      	movs	r1, #20
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7fe ffa9 	bl	800011c <__udivsi3>
 80011ca:	0003      	movs	r3, r0
 80011cc:	009a      	lsls	r2, r3, #2
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <DMA_CalcBaseAndBitshift+0x34>)
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	bffdfff8 	.word	0xbffdfff8
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e14f      	b.n	8001498 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x28>
 800120e:	e140      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	58d3      	ldr	r3, [r2, r3]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2107      	movs	r1, #7
 80012fe:	400b      	ands	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x174>
 800135a:	e09a      	b.n	8001492 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2201      	movs	r2, #1
 800136e:	4013      	ands	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	589b      	ldr	r3, [r3, r2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	2390      	movs	r3, #144	; 0x90
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	429a      	cmp	r2, r3
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x1e2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x1de>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a43      	ldr	r2, [pc, #268]	; (80014bc <HAL_GPIO_Init+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x1da>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_GPIO_Init+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x1d6>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013be:	2305      	movs	r3, #5
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013ca:	2300      	movs	r3, #0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	2103      	movs	r1, #3
 80013d0:	400a      	ands	r2, r1
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43da      	mvns	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4013      	ands	r3, r2
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	035b      	lsls	r3, r3, #13
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_GPIO_Init+0x2dc>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	40da      	lsrs	r2, r3
 80014a0:	1e13      	subs	r3, r2, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_GPIO_Init+0x2be>
 80014a4:	e6a8      	b.n	80011f8 <HAL_GPIO_Init+0x10>
  } 
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	0008      	movs	r0, r1
 80014d2:	0011      	movs	r1, r2
 80014d4:	1cbb      	adds	r3, r7, #2
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	1c7b      	adds	r3, r7, #1
 80014dc:	1c0a      	adds	r2, r1, #0
 80014de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e0:	1c7b      	adds	r3, r7, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	881a      	ldrh	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f2:	1cbb      	adds	r3, r7, #2
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	1dbb      	adds	r3, r7, #6
 800150e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	1dba      	adds	r2, r7, #6
 8001516:	8812      	ldrh	r2, [r2, #0]
 8001518:	4013      	ands	r3, r2
 800151a:	d008      	beq.n	800152e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800151e:	1dba      	adds	r2, r7, #6
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	0018      	movs	r0, r3
 800152a:	f000 f807 	bl	800153c <HAL_GPIO_EXTI_Callback>
  }
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e301      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d100      	bne.n	800156e <HAL_RCC_OscConfig+0x1e>
 800156c:	e08d      	b.n	800168a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800156e:	4bc3      	ldr	r3, [pc, #780]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	220c      	movs	r2, #12
 8001574:	4013      	ands	r3, r2
 8001576:	2b04      	cmp	r3, #4
 8001578:	d00e      	beq.n	8001598 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157a:	4bc0      	ldr	r3, [pc, #768]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	220c      	movs	r2, #12
 8001580:	4013      	ands	r3, r2
 8001582:	2b08      	cmp	r3, #8
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x64>
 8001586:	4bbd      	ldr	r3, [pc, #756]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	401a      	ands	r2, r3
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	429a      	cmp	r2, r3
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	4bb8      	ldr	r3, [pc, #736]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_OscConfig+0x56>
 80015a4:	e070      	b.n	8001688 <HAL_RCC_OscConfig+0x138>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d000      	beq.n	80015b0 <HAL_RCC_OscConfig+0x60>
 80015ae:	e06b      	b.n	8001688 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e2d8      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x7c>
 80015bc:	4baf      	ldr	r3, [pc, #700]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4bae      	ldr	r3, [pc, #696]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0249      	lsls	r1, r1, #9
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e02f      	b.n	800162c <HAL_RCC_OscConfig+0xdc>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x9e>
 80015d4:	4ba9      	ldr	r3, [pc, #676]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4ba8      	ldr	r3, [pc, #672]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015da:	49a9      	ldr	r1, [pc, #676]	; (8001880 <HAL_RCC_OscConfig+0x330>)
 80015dc:	400a      	ands	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	4ba6      	ldr	r3, [pc, #664]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4ba5      	ldr	r3, [pc, #660]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015e6:	49a7      	ldr	r1, [pc, #668]	; (8001884 <HAL_RCC_OscConfig+0x334>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e01e      	b.n	800162c <HAL_RCC_OscConfig+0xdc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10e      	bne.n	8001614 <HAL_RCC_OscConfig+0xc4>
 80015f6:	4ba1      	ldr	r3, [pc, #644]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4ba0      	ldr	r3, [pc, #640]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	02c9      	lsls	r1, r1, #11
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	4b9d      	ldr	r3, [pc, #628]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b9c      	ldr	r3, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0249      	lsls	r1, r1, #9
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xdc>
 8001614:	4b99      	ldr	r3, [pc, #612]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b98      	ldr	r3, [pc, #608]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800161a:	4999      	ldr	r1, [pc, #612]	; (8001880 <HAL_RCC_OscConfig+0x330>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4b96      	ldr	r3, [pc, #600]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b95      	ldr	r3, [pc, #596]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001626:	4997      	ldr	r1, [pc, #604]	; (8001884 <HAL_RCC_OscConfig+0x334>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d014      	beq.n	800165e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb12 	bl	8000c5c <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163e:	f7ff fb0d 	bl	8000c5c <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e28a      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0xee>
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fafd 	bl	8000c5c <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff faf8 	bl	8000c5c <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e275      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b80      	ldr	r3, [pc, #512]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x118>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x146>
 8001694:	e069      	b.n	800176a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001696:	4b79      	ldr	r3, [pc, #484]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	220c      	movs	r2, #12
 800169c:	4013      	ands	r3, r2
 800169e:	d00b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	220c      	movs	r2, #12
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d11c      	bne.n	80016e6 <HAL_RCC_OscConfig+0x196>
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	025b      	lsls	r3, r3, #9
 80016b4:	4013      	ands	r3, r2
 80016b6:	d116      	bne.n	80016e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x17e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e24b      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b6b      	ldr	r3, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	22f8      	movs	r2, #248	; 0xf8
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	00da      	lsls	r2, r3, #3
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e4:	e041      	b.n	800176a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff faaf 	bl	8000c5c <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff faaa 	bl	8000c5c <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e227      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d0f1      	beq.n	8001704 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	22f8      	movs	r2, #248	; 0xf8
 8001726:	4393      	bics	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e018      	b.n	800176a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fa8a 	bl	8000c5c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fa85 	bl	8000c5c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e202      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1f1      	bne.n	800174e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	4013      	ands	r3, r2
 8001772:	d036      	beq.n	80017e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d019      	beq.n	80017b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 800177e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001780:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fa68 	bl	8000c5c <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff fa63 	bl	8000c5c <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1e0      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d0f1      	beq.n	8001792 <HAL_RCC_OscConfig+0x242>
 80017ae:	e018      	b.n	80017e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	438a      	bics	r2, r1
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa4e 	bl	8000c5c <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fa49 	bl	8000c5c <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1c6      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f1      	bne.n	80017c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x29e>
 80017ec:	e0b4      	b.n	8001958 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	201f      	movs	r0, #31
 80017f0:	183b      	adds	r3, r7, r0
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	055b      	lsls	r3, r3, #21
 80017fe:	4013      	ands	r3, r2
 8001800:	d110      	bne.n	8001824 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0549      	lsls	r1, r1, #21
 800180c:	430a      	orrs	r2, r1
 800180e:	61da      	str	r2, [r3, #28]
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	055b      	lsls	r3, r3, #21
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800181e:	183b      	adds	r3, r7, r0
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_RCC_OscConfig+0x338>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d11a      	bne.n	8001866 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x338>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_RCC_OscConfig+0x338>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	0049      	lsls	r1, r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fa0d 	bl	8000c5c <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff fa08 	bl	8000c5c <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e185      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x338>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4013      	ands	r3, r2
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10e      	bne.n	800188c <HAL_RCC_OscConfig+0x33c>
 800186e:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_RCC_OscConfig+0x32c>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	621a      	str	r2, [r3, #32]
 800187a:	e035      	b.n	80018e8 <HAL_RCC_OscConfig+0x398>
 800187c:	40021000 	.word	0x40021000
 8001880:	fffeffff 	.word	0xfffeffff
 8001884:	fffbffff 	.word	0xfffbffff
 8001888:	40007000 	.word	0x40007000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x35e>
 8001894:	4bb6      	ldr	r3, [pc, #728]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4bb5      	ldr	r3, [pc, #724]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	4bb3      	ldr	r3, [pc, #716]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4bb2      	ldr	r3, [pc, #712]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	621a      	str	r2, [r3, #32]
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x398>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x380>
 80018b6:	4bae      	ldr	r3, [pc, #696]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4bad      	ldr	r3, [pc, #692]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4baa      	ldr	r3, [pc, #680]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x398>
 80018d0:	4ba7      	ldr	r3, [pc, #668]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4ba6      	ldr	r3, [pc, #664]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
 80018dc:	4ba4      	ldr	r3, [pc, #656]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80018e2:	2104      	movs	r1, #4
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d014      	beq.n	800191a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f9b4 	bl	8000c5c <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e009      	b.n	800190e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f9af 	bl	8000c5c <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a9b      	ldr	r2, [pc, #620]	; (8001b74 <HAL_RCC_OscConfig+0x624>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e12b      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	4b98      	ldr	r3, [pc, #608]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x3aa>
 8001918:	e013      	b.n	8001942 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f99f 	bl	8000c5c <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f99a 	bl	8000c5c <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a91      	ldr	r2, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x624>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e116      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001942:	231f      	movs	r3, #31
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	4b87      	ldr	r3, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001952:	4989      	ldr	r1, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x628>)
 8001954:	400a      	ands	r2, r1
 8001956:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12a      	bne.n	80019c0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001970:	2104      	movs	r1, #4
 8001972:	430a      	orrs	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001976:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 800197c:	2101      	movs	r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f96b 	bl	8000c5c <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800198c:	f7ff f966 	bl	8000c5c <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0e3      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199e:	4b74      	ldr	r3, [pc, #464]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	22f8      	movs	r2, #248	; 0xf8
 80019ae:	4393      	bics	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e034      	b.n	8001a2a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	3305      	adds	r3, #5
 80019c6:	d111      	bne.n	80019ec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	22f8      	movs	r2, #248	; 0xf8
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	00da      	lsls	r2, r3, #3
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	430a      	orrs	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019f8:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff f92a 	bl	8000c5c <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0e:	f7ff f925 	bl	8000c5c <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0a2      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d100      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4e4>
 8001a32:	e097      	b.n	8001b64 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4f2>
 8001a40:	e06b      	b.n	8001b1a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d14c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a50:	494a      	ldr	r1, [pc, #296]	; (8001b7c <HAL_RCC_OscConfig+0x62c>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f901 	bl	8000c5c <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f8fc 	bl	8000c5c <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e079      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	220f      	movs	r2, #15
 8001a84:	4393      	bics	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_RCC_OscConfig+0x630>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	0449      	lsls	r1, r1, #17
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8cf 	bl	8000c5c <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f8ca 	bl	8000c5c <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e047      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x574>
 8001ae2:	e03f      	b.n	8001b64 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001aea:	4924      	ldr	r1, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x62c>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f8b4 	bl	8000c5c <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f8af 	bl	8000c5c <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e02c      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	049b      	lsls	r3, r3, #18
 8001b14:	4013      	ands	r3, r2
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x5aa>
 8001b18:	e024      	b.n	8001b64 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01f      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d10e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	220f      	movs	r2, #15
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	23f0      	movs	r3, #240	; 0xf0
 8001b54:	039b      	lsls	r3, r3, #14
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b008      	add	sp, #32
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	00001388 	.word	0x00001388
 8001b78:	efffffff 	.word	0xefffffff
 8001b7c:	feffffff 	.word	0xfeffffff
 8001b80:	ffc2ffff 	.word	0xffc2ffff

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b3      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d911      	bls.n	8001bca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e09a      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d015      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d006      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001be4:	21e0      	movs	r1, #224	; 0xe0
 8001be6:	00c9      	lsls	r1, r1, #3
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	4393      	bics	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	029b      	lsls	r3, r3, #10
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d114      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06e      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	049b      	lsls	r3, r3, #18
 8001c32:	4013      	ands	r3, r2
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e062      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e05b      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c48:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe fffe 	bl	8000c5c <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	e009      	b.n	8001c7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7fe fff9 	bl	8000c5c <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_RCC_ClockConfig+0x18c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e042      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	220c      	movs	r2, #12
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d211      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e020      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_RCC_ClockConfig+0x190>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cdc:	f000 f820 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	220f      	movs	r2, #15
 8001cea:	4013      	ands	r3, r2
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x194>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	000a      	movs	r2, r1
 8001cf2:	40da      	lsrs	r2, r3
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x198>)
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe ff69 	bl	8000bd0 <HAL_InitTick>
  
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b004      	add	sp, #16
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	00001388 	.word	0x00001388
 8001d14:	fffff8ff 	.word	0xfffff8ff
 8001d18:	08003758 	.word	0x08003758
 8001d1c:	20000604 	.word	0x20000604

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08f      	sub	sp, #60	; 0x3c
 8001d24:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d26:	2314      	movs	r3, #20
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d2e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d3a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d002      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x4a>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x50>
 8001d68:	e02d      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d6e:	e02d      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	220f      	movs	r2, #15
 8001d76:	4013      	ands	r3, r2
 8001d78:	2214      	movs	r2, #20
 8001d7a:	18ba      	adds	r2, r7, r2
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	220f      	movs	r2, #15
 8001d86:	4013      	ands	r3, r2
 8001d88:	1d3a      	adds	r2, r7, #4
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	4013      	ands	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d9c:	f7fe f9be 	bl	800011c <__udivsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	001a      	movs	r2, r3
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	4353      	muls	r3, r2
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
 8001daa:	e009      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dae:	000a      	movs	r2, r1
 8001db0:	0152      	lsls	r2, r2, #5
 8001db2:	1a52      	subs	r2, r2, r1
 8001db4:	0193      	lsls	r3, r2, #6
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	185b      	adds	r3, r3, r1
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc4:	e002      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b00f      	add	sp, #60	; 0x3c
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	08003738 	.word	0x08003738
 8001ddc:	08003748 	.word	0x08003748
 8001de0:	40021000 	.word	0x40021000
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e042      	b.n	8001e80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223d      	movs	r2, #61	; 0x3d
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	223c      	movs	r2, #60	; 0x3c
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7fe fda5 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223d      	movs	r2, #61	; 0x3d
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	0019      	movs	r1, r3
 8001e28:	0010      	movs	r0, r2
 8001e2a:	f000 fc3f 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2246      	movs	r2, #70	; 0x46
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223e      	movs	r2, #62	; 0x3e
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	2101      	movs	r1, #1
 8001e44:	5499      	strb	r1, [r3, r2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2241      	movs	r2, #65	; 0x41
 8001e52:	2101      	movs	r1, #1
 8001e54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2242      	movs	r2, #66	; 0x42
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2243      	movs	r2, #67	; 0x43
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2244      	movs	r2, #68	; 0x44
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2245      	movs	r2, #69	; 0x45
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223d      	movs	r2, #61	; 0x3d
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e042      	b.n	8001f20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	223d      	movs	r2, #61	; 0x3d
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223c      	movs	r2, #60	; 0x3c
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f839 	bl	8001f28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	223d      	movs	r2, #61	; 0x3d
 8001eba:	2102      	movs	r1, #2
 8001ebc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	0010      	movs	r0, r2
 8001eca:	f000 fbef 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2246      	movs	r2, #70	; 0x46
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	223e      	movs	r2, #62	; 0x3e
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223f      	movs	r2, #63	; 0x3f
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2242      	movs	r2, #66	; 0x42
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2243      	movs	r2, #67	; 0x43
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2244      	movs	r2, #68	; 0x44
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2245      	movs	r2, #69	; 0x45
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	223d      	movs	r2, #61	; 0x3d
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <HAL_TIM_OC_Start+0x22>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223e      	movs	r2, #62	; 0x3e
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	4193      	sbcs	r3, r2
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e01f      	b.n	8001f9a <HAL_TIM_OC_Start+0x62>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d108      	bne.n	8001f72 <HAL_TIM_OC_Start+0x3a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	4193      	sbcs	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e013      	b.n	8001f9a <HAL_TIM_OC_Start+0x62>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d108      	bne.n	8001f8a <HAL_TIM_OC_Start+0x52>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	5c9b      	ldrb	r3, [r3, r2]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	4193      	sbcs	r3, r2
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e007      	b.n	8001f9a <HAL_TIM_OC_Start+0x62>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2241      	movs	r2, #65	; 0x41
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	4193      	sbcs	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e074      	b.n	800208c <HAL_TIM_OC_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <HAL_TIM_OC_Start+0x7a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	223e      	movs	r2, #62	; 0x3e
 8001fac:	2102      	movs	r1, #2
 8001fae:	5499      	strb	r1, [r3, r2]
 8001fb0:	e013      	b.n	8001fda <HAL_TIM_OC_Start+0xa2>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_OC_Start+0x8a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	223f      	movs	r2, #63	; 0x3f
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	5499      	strb	r1, [r3, r2]
 8001fc0:	e00b      	b.n	8001fda <HAL_TIM_OC_Start+0xa2>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d104      	bne.n	8001fd2 <HAL_TIM_OC_Start+0x9a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	2102      	movs	r1, #2
 8001fce:	5499      	strb	r1, [r3, r2]
 8001fd0:	e003      	b.n	8001fda <HAL_TIM_OC_Start+0xa2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f000 fe78 	bl	8002cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_TIM_OC_Start+0x15c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_TIM_OC_Start+0xd8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_TIM_OC_Start+0x160>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_TIM_OC_Start+0xd8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_TIM_OC_Start+0x164>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_TIM_OC_Start+0xd8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <HAL_TIM_OC_Start+0x168>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_TIM_OC_Start+0xdc>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_TIM_OC_Start+0xde>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0209      	lsls	r1, r1, #8
 8002028:	430a      	orrs	r2, r1
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_TIM_OC_Start+0x15c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <HAL_TIM_OC_Start+0x11e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	05db      	lsls	r3, r3, #23
 800203e:	429a      	cmp	r2, r3
 8002040:	d009      	beq.n	8002056 <HAL_TIM_OC_Start+0x11e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_TIM_OC_Start+0x16c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_OC_Start+0x11e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_TIM_OC_Start+0x160>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d111      	bne.n	800207a <HAL_TIM_OC_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2207      	movs	r2, #7
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d010      	beq.n	800208a <HAL_TIM_OC_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002078:	e007      	b.n	800208a <HAL_TIM_OC_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40014000 	.word	0x40014000
 800209c:	40014400 	.word	0x40014400
 80020a0:	40014800 	.word	0x40014800
 80020a4:	40000400 	.word	0x40000400

080020a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e042      	b.n	8002140 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223d      	movs	r2, #61	; 0x3d
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	223c      	movs	r2, #60	; 0x3c
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 f839 	bl	8002148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223d      	movs	r2, #61	; 0x3d
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f000 fadf 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2246      	movs	r2, #70	; 0x46
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	223e      	movs	r2, #62	; 0x3e
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2242      	movs	r2, #66	; 0x42
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2243      	movs	r2, #67	; 0x43
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2244      	movs	r2, #68	; 0x44
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2245      	movs	r2, #69	; 0x45
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <HAL_TIM_PWM_Start+0x22>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	223e      	movs	r2, #62	; 0x3e
 800216c:	5c9b      	ldrb	r3, [r3, r2]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	4193      	sbcs	r3, r2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e01f      	b.n	80021ba <HAL_TIM_PWM_Start+0x62>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d108      	bne.n	8002192 <HAL_TIM_PWM_Start+0x3a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	223f      	movs	r2, #63	; 0x3f
 8002184:	5c9b      	ldrb	r3, [r3, r2]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	1e5a      	subs	r2, r3, #1
 800218c:	4193      	sbcs	r3, r2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e013      	b.n	80021ba <HAL_TIM_PWM_Start+0x62>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d108      	bne.n	80021aa <HAL_TIM_PWM_Start+0x52>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	1e5a      	subs	r2, r3, #1
 80021a4:	4193      	sbcs	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e007      	b.n	80021ba <HAL_TIM_PWM_Start+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	1e5a      	subs	r2, r3, #1
 80021b6:	4193      	sbcs	r3, r2
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e074      	b.n	80022ac <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start+0x7a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	223e      	movs	r2, #62	; 0x3e
 80021cc:	2102      	movs	r1, #2
 80021ce:	5499      	strb	r1, [r3, r2]
 80021d0:	e013      	b.n	80021fa <HAL_TIM_PWM_Start+0xa2>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x8a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	223f      	movs	r2, #63	; 0x3f
 80021dc:	2102      	movs	r1, #2
 80021de:	5499      	strb	r1, [r3, r2]
 80021e0:	e00b      	b.n	80021fa <HAL_TIM_PWM_Start+0xa2>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x9a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2102      	movs	r1, #2
 80021ee:	5499      	strb	r1, [r3, r2]
 80021f0:	e003      	b.n	80021fa <HAL_TIM_PWM_Start+0xa2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2241      	movs	r2, #65	; 0x41
 80021f6:	2102      	movs	r1, #2
 80021f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fd68 	bl	8002cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_TIM_PWM_Start+0x15c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_TIM_PWM_Start+0xd8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_TIM_PWM_Start+0x160>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_TIM_PWM_Start+0xd8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_TIM_PWM_Start+0x164>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_TIM_PWM_Start+0xd8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_TIM_PWM_Start+0x168>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_TIM_PWM_Start+0xdc>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_TIM_PWM_Start+0xde>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0209      	lsls	r1, r1, #8
 8002248:	430a      	orrs	r2, r1
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_TIM_PWM_Start+0x15c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <HAL_TIM_PWM_Start+0x11e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	05db      	lsls	r3, r3, #23
 800225e:	429a      	cmp	r2, r3
 8002260:	d009      	beq.n	8002276 <HAL_TIM_PWM_Start+0x11e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_TIM_PWM_Start+0x16c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_PWM_Start+0x11e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_TIM_PWM_Start+0x160>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d010      	beq.n	80022aa <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	e007      	b.n	80022aa <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800
 80022c4:	40000400 	.word	0x40000400

080022c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2317      	movs	r3, #23
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	223c      	movs	r2, #60	; 0x3c
 80022e0:	5c9b      	ldrb	r3, [r3, r2]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_OC_ConfigChannel+0x22>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e042      	b.n	8002370 <HAL_TIM_OC_ConfigChannel+0xa8>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	223c      	movs	r2, #60	; 0x3c
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d027      	beq.n	8002348 <HAL_TIM_OC_ConfigChannel+0x80>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d82c      	bhi.n	8002358 <HAL_TIM_OC_ConfigChannel+0x90>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d019      	beq.n	8002338 <HAL_TIM_OC_ConfigChannel+0x70>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d826      	bhi.n	8002358 <HAL_TIM_OC_ConfigChannel+0x90>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_TIM_OC_ConfigChannel+0x50>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d008      	beq.n	8002328 <HAL_TIM_OC_ConfigChannel+0x60>
 8002316:	e01f      	b.n	8002358 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fa43 	bl	80027ac <TIM_OC1_SetConfig>
      break;
 8002326:	e01c      	b.n	8002362 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	0011      	movs	r1, r2
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fac3 	bl	80028bc <TIM_OC2_SetConfig>
      break;
 8002336:	e014      	b.n	8002362 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fb3f 	bl	80029c4 <TIM_OC3_SetConfig>
      break;
 8002346:	e00c      	b.n	8002362 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fbbd 	bl	8002ad0 <TIM_OC4_SetConfig>
      break;
 8002356:	e004      	b.n	8002362 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
      break;
 8002360:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	223c      	movs	r2, #60	; 0x3c
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

  return status;
 800236a:	2317      	movs	r3, #23
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b006      	add	sp, #24
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002384:	2317      	movs	r3, #23
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	223c      	movs	r2, #60	; 0x3c
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002396:	2302      	movs	r3, #2
 8002398:	e0ad      	b.n	80024f6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	223c      	movs	r2, #60	; 0x3c
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d100      	bne.n	80023aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80023a8:	e076      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x120>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d900      	bls.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80023b0:	e095      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x166>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d04e      	beq.n	8002456 <HAL_TIM_PWM_ConfigChannel+0xde>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d900      	bls.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80023be:	e08e      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x166>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d021      	beq.n	8002410 <HAL_TIM_PWM_ConfigChannel+0x98>
 80023cc:	e087      	b.n	80024de <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f9e8 	bl	80027ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2108      	movs	r1, #8
 80023e8:	430a      	orrs	r2, r1
 80023ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2104      	movs	r1, #4
 80023f8:	438a      	bics	r2, r1
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	619a      	str	r2, [r3, #24]
      break;
 800240e:	e06b      	b.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fa4f 	bl	80028bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0109      	lsls	r1, r1, #4
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4931      	ldr	r1, [pc, #196]	; (8002500 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800243c:	400a      	ands	r2, r1
 800243e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6999      	ldr	r1, [r3, #24]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]
      break;
 8002454:	e048      	b.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	0011      	movs	r1, r2
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fab0 	bl	80029c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2108      	movs	r1, #8
 8002470:	430a      	orrs	r2, r1
 8002472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2104      	movs	r1, #4
 8002480:	438a      	bics	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69d9      	ldr	r1, [r3, #28]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
      break;
 8002496:	e027      	b.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fb15 	bl	8002ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0109      	lsls	r1, r1, #4
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	490f      	ldr	r1, [pc, #60]	; (8002500 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69d9      	ldr	r1, [r3, #28]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	021a      	lsls	r2, r3, #8
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
      break;
 80024dc:	e004      	b.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80024de:	2317      	movs	r3, #23
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
      break;
 80024e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	223c      	movs	r2, #60	; 0x3c
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

  return status;
 80024f0:	2317      	movs	r3, #23
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	781b      	ldrb	r3, [r3, #0]
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b006      	add	sp, #24
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	fffffbff 	.word	0xfffffbff

08002504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223c      	movs	r2, #60	; 0x3c
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_TIM_ConfigClockSource+0x20>
 8002520:	2302      	movs	r3, #2
 8002522:	e0bc      	b.n	800269e <HAL_TIM_ConfigClockSource+0x19a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	223c      	movs	r2, #60	; 0x3c
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	223d      	movs	r2, #61	; 0x3d
 8002530:	2102      	movs	r1, #2
 8002532:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2277      	movs	r2, #119	; 0x77
 8002540:	4393      	bics	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0192      	lsls	r2, r2, #6
 800255c:	4293      	cmp	r3, r2
 800255e:	d040      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xde>
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0192      	lsls	r2, r2, #6
 8002564:	4293      	cmp	r3, r2
 8002566:	d900      	bls.n	800256a <HAL_TIM_ConfigClockSource+0x66>
 8002568:	e088      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	0152      	lsls	r2, r2, #5
 800256e:	4293      	cmp	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_TIM_ConfigClockSource+0x70>
 8002572:	e088      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x182>
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0152      	lsls	r2, r2, #5
 8002578:	4293      	cmp	r3, r2
 800257a:	d900      	bls.n	800257e <HAL_TIM_ConfigClockSource+0x7a>
 800257c:	e07e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 800257e:	2b70      	cmp	r3, #112	; 0x70
 8002580:	d018      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xb0>
 8002582:	d900      	bls.n	8002586 <HAL_TIM_ConfigClockSource+0x82>
 8002584:	e07a      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 8002586:	2b60      	cmp	r3, #96	; 0x60
 8002588:	d04f      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x126>
 800258a:	d900      	bls.n	800258e <HAL_TIM_ConfigClockSource+0x8a>
 800258c:	e076      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 800258e:	2b50      	cmp	r3, #80	; 0x50
 8002590:	d03b      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x106>
 8002592:	d900      	bls.n	8002596 <HAL_TIM_ConfigClockSource+0x92>
 8002594:	e072      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d057      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x146>
 800259a:	d900      	bls.n	800259e <HAL_TIM_ConfigClockSource+0x9a>
 800259c:	e06e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 800259e:	2b30      	cmp	r3, #48	; 0x30
 80025a0:	d063      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x166>
 80025a2:	d86b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d060      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x166>
 80025a8:	d868      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x178>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d05d      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x166>
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d05b      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x166>
 80025b2:	e063      	b.n	800267c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f000 fb68 	bl	8002c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2277      	movs	r2, #119	; 0x77
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
      break;
 80025e0:	e052      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f000 fb51 	bl	8002c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	01c9      	lsls	r1, r1, #7
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e03e      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	001a      	movs	r2, r3
 8002618:	f000 fac4 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2150      	movs	r1, #80	; 0x50
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fb1e 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002628:	e02e      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	001a      	movs	r2, r3
 8002638:	f000 fae2 	bl	8002c00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2160      	movs	r1, #96	; 0x60
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fb0e 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002648:	e01e      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	001a      	movs	r2, r3
 8002658:	f000 faa4 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	0018      	movs	r0, r3
 8002664:	f000 fafe 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002668:	e00e      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f000 faf5 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 800267a:	e005      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
      break;
 8002684:	e000      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002686:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223d      	movs	r2, #61	; 0x3d
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	223c      	movs	r2, #60	; 0x3c
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

  return status;
 8002698:	230f      	movs	r3, #15
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	ffff00ff 	.word	0xffff00ff

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d008      	beq.n	80026d6 <TIM_Base_SetConfig+0x2a>
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	05db      	lsls	r3, r3, #23
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x2a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a30      	ldr	r2, [pc, #192]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2270      	movs	r2, #112	; 0x70
 80026da:	4393      	bics	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a29      	ldr	r2, [pc, #164]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d013      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <TIM_Base_SetConfig+0xec>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00b      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <TIM_Base_SetConfig+0xf0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <TIM_Base_SetConfig+0xf4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x76>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <TIM_Base_SetConfig+0xf8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <TIM_Base_SetConfig+0xfc>)
 8002726:	4013      	ands	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0xce>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <TIM_Base_SetConfig+0xf0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0xce>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <TIM_Base_SetConfig+0xf4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0xce>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <TIM_Base_SetConfig+0xf8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d103      	bne.n	8002782 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	615a      	str	r2, [r3, #20]
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400
 8002798:	40002000 	.word	0x40002000
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800
 80027a8:	fffffcff 	.word	0xfffffcff

080027ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4393      	bics	r3, r2
 80027be:	001a      	movs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2270      	movs	r2, #112	; 0x70
 80027da:	4393      	bics	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2203      	movs	r2, #3
 80027e2:	4393      	bics	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2202      	movs	r2, #2
 80027f4:	4393      	bics	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <TIM_OC1_SetConfig+0xf8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_OC1_SetConfig+0x76>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <TIM_OC1_SetConfig+0xfc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_OC1_SetConfig+0x76>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <TIM_OC1_SetConfig+0x100>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC1_SetConfig+0x76>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <TIM_OC1_SetConfig+0x104>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10c      	bne.n	800283c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2208      	movs	r2, #8
 8002826:	4393      	bics	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2204      	movs	r2, #4
 8002838:	4393      	bics	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <TIM_OC1_SetConfig+0xf8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00b      	beq.n	800285c <TIM_OC1_SetConfig+0xb0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <TIM_OC1_SetConfig+0xfc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <TIM_OC1_SetConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <TIM_OC1_SetConfig+0x100>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_OC1_SetConfig+0xb0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <TIM_OC1_SetConfig+0x104>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <TIM_OC1_SetConfig+0x108>)
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <TIM_OC1_SetConfig+0x10c>)
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	fffffeff 	.word	0xfffffeff
 80028b8:	fffffdff 	.word	0xfffffdff

080028bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4393      	bics	r3, r2
 80028ce:	001a      	movs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <TIM_OC2_SetConfig+0xe8>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <TIM_OC2_SetConfig+0xec>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2220      	movs	r2, #32
 8002906:	4393      	bics	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a24      	ldr	r2, [pc, #144]	; (80029ac <TIM_OC2_SetConfig+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10d      	bne.n	800293a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	4393      	bics	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	4393      	bics	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <TIM_OC2_SetConfig+0xf0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <TIM_OC2_SetConfig+0xf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <TIM_OC2_SetConfig+0xf8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <TIM_OC2_SetConfig+0xfc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <TIM_OC2_SetConfig+0x100>)
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <TIM_OC2_SetConfig+0x104>)
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	621a      	str	r2, [r3, #32]
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffff8fff 	.word	0xffff8fff
 80029a8:	fffffcff 	.word	0xfffffcff
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800
 80029bc:	fffffbff 	.word	0xfffffbff
 80029c0:	fffff7ff 	.word	0xfffff7ff

080029c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <TIM_OC3_SetConfig+0xe4>)
 80029d4:	401a      	ands	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2270      	movs	r2, #112	; 0x70
 80029f0:	4393      	bics	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2203      	movs	r2, #3
 80029f8:	4393      	bics	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <TIM_OC3_SetConfig+0xe8>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <TIM_OC3_SetConfig+0xec>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10d      	bne.n	8002a3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <TIM_OC3_SetConfig+0xf0>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <TIM_OC3_SetConfig+0xf4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <TIM_OC3_SetConfig+0xec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <TIM_OC3_SetConfig+0xf8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <TIM_OC3_SetConfig+0xfc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <TIM_OC3_SetConfig+0x100>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <TIM_OC3_SetConfig+0x104>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4a18      	ldr	r2, [pc, #96]	; (8002acc <TIM_OC3_SetConfig+0x108>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffffeff 	.word	0xfffffeff
 8002aac:	fffffdff 	.word	0xfffffdff
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	fffff7ff 	.word	0xfffff7ff
 8002ab8:	fffffbff 	.word	0xfffffbff
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800
 8002ac8:	ffffefff 	.word	0xffffefff
 8002acc:	ffffdfff 	.word	0xffffdfff

08002ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <TIM_OC4_SetConfig+0xb0>)
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <TIM_OC4_SetConfig+0xb4>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <TIM_OC4_SetConfig+0xb8>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC4_SetConfig+0xbc>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <TIM_OC4_SetConfig+0xc0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <TIM_OC4_SetConfig+0x78>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <TIM_OC4_SetConfig+0xc4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <TIM_OC4_SetConfig+0x78>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <TIM_OC4_SetConfig+0xc8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_OC4_SetConfig+0x78>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <TIM_OC4_SetConfig+0xcc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d109      	bne.n	8002b5c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <TIM_OC4_SetConfig+0xd0>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b006      	add	sp, #24
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	ffffefff 	.word	0xffffefff
 8002b84:	ffff8fff 	.word	0xffff8fff
 8002b88:	fffffcff 	.word	0xfffffcff
 8002b8c:	ffffdfff 	.word	0xffffdfff
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800
 8002ba0:	ffffbfff 	.word	0xffffbfff

08002ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	22f0      	movs	r2, #240	; 0xf0
 8002bce:	4393      	bics	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	220a      	movs	r2, #10
 8002be0:	4393      	bics	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	2210      	movs	r2, #16
 8002c12:	4393      	bics	r3, r2
 8002c14:	001a      	movs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <TIM_TI2_ConfigInputStage+0x60>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	031b      	lsls	r3, r3, #12
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	22a0      	movs	r2, #160	; 0xa0
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	ffff0fff 	.word	0xffff0fff

08002c64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2270      	movs	r2, #112	; 0x70
 8002c78:	4393      	bics	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	2207      	movs	r2, #7
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <TIM_ETR_SetConfig+0x3c>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	ffff00ff 	.word	0xffff00ff

08002cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	221f      	movs	r2, #31
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	211f      	movs	r1, #31
 8002d08:	400b      	ands	r3, r1
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4099      	lsls	r1, r3
 8002d0e:	000b      	movs	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223c      	movs	r2, #60	; 0x3c
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e047      	b.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	223c      	movs	r2, #60	; 0x3c
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	223d      	movs	r2, #61	; 0x3d
 8002d44:	2102      	movs	r1, #2
 8002d46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2270      	movs	r2, #112	; 0x70
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00f      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	05db      	lsls	r3, r3, #23
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d009      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	4393      	bics	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	223d      	movs	r2, #61	; 0x3d
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223c      	movs	r2, #60	; 0x3c
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40014000 	.word	0x40014000

08002ddc <__errno>:
 8002ddc:	4b01      	ldr	r3, [pc, #4]	; (8002de4 <__errno+0x8>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	4770      	bx	lr
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	20000610 	.word	0x20000610

08002de8 <__libc_init_array>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	2600      	movs	r6, #0
 8002dec:	4d0c      	ldr	r5, [pc, #48]	; (8002e20 <__libc_init_array+0x38>)
 8002dee:	4c0d      	ldr	r4, [pc, #52]	; (8002e24 <__libc_init_array+0x3c>)
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	42a6      	cmp	r6, r4
 8002df6:	d109      	bne.n	8002e0c <__libc_init_array+0x24>
 8002df8:	2600      	movs	r6, #0
 8002dfa:	f000 fc8b 	bl	8003714 <_init>
 8002dfe:	4d0a      	ldr	r5, [pc, #40]	; (8002e28 <__libc_init_array+0x40>)
 8002e00:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <__libc_init_array+0x44>)
 8002e02:	1b64      	subs	r4, r4, r5
 8002e04:	10a4      	asrs	r4, r4, #2
 8002e06:	42a6      	cmp	r6, r4
 8002e08:	d105      	bne.n	8002e16 <__libc_init_array+0x2e>
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	00b3      	lsls	r3, r6, #2
 8002e0e:	58eb      	ldr	r3, [r5, r3]
 8002e10:	4798      	blx	r3
 8002e12:	3601      	adds	r6, #1
 8002e14:	e7ee      	b.n	8002df4 <__libc_init_array+0xc>
 8002e16:	00b3      	lsls	r3, r6, #2
 8002e18:	58eb      	ldr	r3, [r5, r3]
 8002e1a:	4798      	blx	r3
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	e7f2      	b.n	8002e06 <__libc_init_array+0x1e>
 8002e20:	0800379c 	.word	0x0800379c
 8002e24:	0800379c 	.word	0x0800379c
 8002e28:	0800379c 	.word	0x0800379c
 8002e2c:	080037a0 	.word	0x080037a0

08002e30 <memset>:
 8002e30:	0003      	movs	r3, r0
 8002e32:	1882      	adds	r2, r0, r2
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <siprintf>:
 8002e40:	b40e      	push	{r1, r2, r3}
 8002e42:	b500      	push	{lr}
 8002e44:	490b      	ldr	r1, [pc, #44]	; (8002e74 <siprintf+0x34>)
 8002e46:	b09c      	sub	sp, #112	; 0x70
 8002e48:	ab1d      	add	r3, sp, #116	; 0x74
 8002e4a:	9002      	str	r0, [sp, #8]
 8002e4c:	9006      	str	r0, [sp, #24]
 8002e4e:	9107      	str	r1, [sp, #28]
 8002e50:	9104      	str	r1, [sp, #16]
 8002e52:	4809      	ldr	r0, [pc, #36]	; (8002e78 <siprintf+0x38>)
 8002e54:	4909      	ldr	r1, [pc, #36]	; (8002e7c <siprintf+0x3c>)
 8002e56:	cb04      	ldmia	r3!, {r2}
 8002e58:	9105      	str	r1, [sp, #20]
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	a902      	add	r1, sp, #8
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	f000 f870 	bl	8002f44 <_svfiprintf_r>
 8002e64:	2300      	movs	r3, #0
 8002e66:	9a02      	ldr	r2, [sp, #8]
 8002e68:	7013      	strb	r3, [r2, #0]
 8002e6a:	b01c      	add	sp, #112	; 0x70
 8002e6c:	bc08      	pop	{r3}
 8002e6e:	b003      	add	sp, #12
 8002e70:	4718      	bx	r3
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	7fffffff 	.word	0x7fffffff
 8002e78:	20000610 	.word	0x20000610
 8002e7c:	ffff0208 	.word	0xffff0208

08002e80 <__ssputs_r>:
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	688e      	ldr	r6, [r1, #8]
 8002e84:	b085      	sub	sp, #20
 8002e86:	0007      	movs	r7, r0
 8002e88:	000c      	movs	r4, r1
 8002e8a:	9203      	str	r2, [sp, #12]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	d83c      	bhi.n	8002f0c <__ssputs_r+0x8c>
 8002e92:	2390      	movs	r3, #144	; 0x90
 8002e94:	898a      	ldrh	r2, [r1, #12]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	421a      	tst	r2, r3
 8002e9a:	d034      	beq.n	8002f06 <__ssputs_r+0x86>
 8002e9c:	6909      	ldr	r1, [r1, #16]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	6960      	ldr	r0, [r4, #20]
 8002ea2:	1a5b      	subs	r3, r3, r1
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	4343      	muls	r3, r0
 8002eaa:	0fdd      	lsrs	r5, r3, #31
 8002eac:	18ed      	adds	r5, r5, r3
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	9802      	ldr	r0, [sp, #8]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	181b      	adds	r3, r3, r0
 8002eb6:	106d      	asrs	r5, r5, #1
 8002eb8:	42ab      	cmp	r3, r5
 8002eba:	d900      	bls.n	8002ebe <__ssputs_r+0x3e>
 8002ebc:	001d      	movs	r5, r3
 8002ebe:	0553      	lsls	r3, r2, #21
 8002ec0:	d532      	bpl.n	8002f28 <__ssputs_r+0xa8>
 8002ec2:	0029      	movs	r1, r5
 8002ec4:	0038      	movs	r0, r7
 8002ec6:	f000 fb53 	bl	8003570 <_malloc_r>
 8002eca:	1e06      	subs	r6, r0, #0
 8002ecc:	d109      	bne.n	8002ee2 <__ssputs_r+0x62>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	2340      	movs	r3, #64	; 0x40
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	89a2      	ldrh	r2, [r4, #12]
 8002ed8:	4240      	negs	r0, r0
 8002eda:	4313      	orrs	r3, r2
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	b005      	add	sp, #20
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	9a02      	ldr	r2, [sp, #8]
 8002ee4:	6921      	ldr	r1, [r4, #16]
 8002ee6:	f000 faba 	bl	800345e <memcpy>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <__ssputs_r+0xc0>)
 8002eee:	401a      	ands	r2, r3
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	9b02      	ldr	r3, [sp, #8]
 8002ef8:	6126      	str	r6, [r4, #16]
 8002efa:	18f6      	adds	r6, r6, r3
 8002efc:	6026      	str	r6, [r4, #0]
 8002efe:	6165      	str	r5, [r4, #20]
 8002f00:	9e01      	ldr	r6, [sp, #4]
 8002f02:	1aed      	subs	r5, r5, r3
 8002f04:	60a5      	str	r5, [r4, #8]
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	429e      	cmp	r6, r3
 8002f0a:	d900      	bls.n	8002f0e <__ssputs_r+0x8e>
 8002f0c:	9e01      	ldr	r6, [sp, #4]
 8002f0e:	0032      	movs	r2, r6
 8002f10:	9903      	ldr	r1, [sp, #12]
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f000 faac 	bl	8003470 <memmove>
 8002f18:	68a3      	ldr	r3, [r4, #8]
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	1b9b      	subs	r3, r3, r6
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	199e      	adds	r6, r3, r6
 8002f24:	6026      	str	r6, [r4, #0]
 8002f26:	e7da      	b.n	8002ede <__ssputs_r+0x5e>
 8002f28:	002a      	movs	r2, r5
 8002f2a:	0038      	movs	r0, r7
 8002f2c:	f000 fb96 	bl	800365c <_realloc_r>
 8002f30:	1e06      	subs	r6, r0, #0
 8002f32:	d1e0      	bne.n	8002ef6 <__ssputs_r+0x76>
 8002f34:	0038      	movs	r0, r7
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	f000 faae 	bl	8003498 <_free_r>
 8002f3c:	e7c7      	b.n	8002ece <__ssputs_r+0x4e>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	fffffb7f 	.word	0xfffffb7f

08002f44 <_svfiprintf_r>:
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	b0a1      	sub	sp, #132	; 0x84
 8002f48:	9003      	str	r0, [sp, #12]
 8002f4a:	001d      	movs	r5, r3
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	000f      	movs	r7, r1
 8002f50:	0016      	movs	r6, r2
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	d511      	bpl.n	8002f7a <_svfiprintf_r+0x36>
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <_svfiprintf_r+0x36>
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	f000 fb07 	bl	8003570 <_malloc_r>
 8002f62:	6038      	str	r0, [r7, #0]
 8002f64:	6138      	str	r0, [r7, #16]
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d105      	bne.n	8002f76 <_svfiprintf_r+0x32>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	9a03      	ldr	r2, [sp, #12]
 8002f6e:	3801      	subs	r0, #1
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	b021      	add	sp, #132	; 0x84
 8002f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f76:	2340      	movs	r3, #64	; 0x40
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	ac08      	add	r4, sp, #32
 8002f7e:	6163      	str	r3, [r4, #20]
 8002f80:	3320      	adds	r3, #32
 8002f82:	7663      	strb	r3, [r4, #25]
 8002f84:	3310      	adds	r3, #16
 8002f86:	76a3      	strb	r3, [r4, #26]
 8002f88:	9507      	str	r5, [sp, #28]
 8002f8a:	0035      	movs	r5, r6
 8002f8c:	782b      	ldrb	r3, [r5, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <_svfiprintf_r+0x52>
 8002f92:	2b25      	cmp	r3, #37	; 0x25
 8002f94:	d147      	bne.n	8003026 <_svfiprintf_r+0xe2>
 8002f96:	1bab      	subs	r3, r5, r6
 8002f98:	9305      	str	r3, [sp, #20]
 8002f9a:	42b5      	cmp	r5, r6
 8002f9c:	d00c      	beq.n	8002fb8 <_svfiprintf_r+0x74>
 8002f9e:	0032      	movs	r2, r6
 8002fa0:	0039      	movs	r1, r7
 8002fa2:	9803      	ldr	r0, [sp, #12]
 8002fa4:	f7ff ff6c 	bl	8002e80 <__ssputs_r>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d100      	bne.n	8002fae <_svfiprintf_r+0x6a>
 8002fac:	e0ae      	b.n	800310c <_svfiprintf_r+0x1c8>
 8002fae:	6962      	ldr	r2, [r4, #20]
 8002fb0:	9b05      	ldr	r3, [sp, #20]
 8002fb2:	4694      	mov	ip, r2
 8002fb4:	4463      	add	r3, ip
 8002fb6:	6163      	str	r3, [r4, #20]
 8002fb8:	782b      	ldrb	r3, [r5, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d100      	bne.n	8002fc0 <_svfiprintf_r+0x7c>
 8002fbe:	e0a5      	b.n	800310c <_svfiprintf_r+0x1c8>
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4252      	negs	r2, r2
 8002fc6:	6062      	str	r2, [r4, #4]
 8002fc8:	a904      	add	r1, sp, #16
 8002fca:	3254      	adds	r2, #84	; 0x54
 8002fcc:	1852      	adds	r2, r2, r1
 8002fce:	1c6e      	adds	r6, r5, #1
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	60e3      	str	r3, [r4, #12]
 8002fd4:	60a3      	str	r3, [r4, #8]
 8002fd6:	7013      	strb	r3, [r2, #0]
 8002fd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fda:	2205      	movs	r2, #5
 8002fdc:	7831      	ldrb	r1, [r6, #0]
 8002fde:	4854      	ldr	r0, [pc, #336]	; (8003130 <_svfiprintf_r+0x1ec>)
 8002fe0:	f000 fa32 	bl	8003448 <memchr>
 8002fe4:	1c75      	adds	r5, r6, #1
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d11f      	bne.n	800302a <_svfiprintf_r+0xe6>
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	06d3      	lsls	r3, r2, #27
 8002fee:	d504      	bpl.n	8002ffa <_svfiprintf_r+0xb6>
 8002ff0:	2353      	movs	r3, #83	; 0x53
 8002ff2:	a904      	add	r1, sp, #16
 8002ff4:	185b      	adds	r3, r3, r1
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	7019      	strb	r1, [r3, #0]
 8002ffa:	0713      	lsls	r3, r2, #28
 8002ffc:	d504      	bpl.n	8003008 <_svfiprintf_r+0xc4>
 8002ffe:	2353      	movs	r3, #83	; 0x53
 8003000:	a904      	add	r1, sp, #16
 8003002:	185b      	adds	r3, r3, r1
 8003004:	212b      	movs	r1, #43	; 0x2b
 8003006:	7019      	strb	r1, [r3, #0]
 8003008:	7833      	ldrb	r3, [r6, #0]
 800300a:	2b2a      	cmp	r3, #42	; 0x2a
 800300c:	d016      	beq.n	800303c <_svfiprintf_r+0xf8>
 800300e:	0035      	movs	r5, r6
 8003010:	2100      	movs	r1, #0
 8003012:	200a      	movs	r0, #10
 8003014:	68e3      	ldr	r3, [r4, #12]
 8003016:	782a      	ldrb	r2, [r5, #0]
 8003018:	1c6e      	adds	r6, r5, #1
 800301a:	3a30      	subs	r2, #48	; 0x30
 800301c:	2a09      	cmp	r2, #9
 800301e:	d94e      	bls.n	80030be <_svfiprintf_r+0x17a>
 8003020:	2900      	cmp	r1, #0
 8003022:	d111      	bne.n	8003048 <_svfiprintf_r+0x104>
 8003024:	e017      	b.n	8003056 <_svfiprintf_r+0x112>
 8003026:	3501      	adds	r5, #1
 8003028:	e7b0      	b.n	8002f8c <_svfiprintf_r+0x48>
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <_svfiprintf_r+0x1ec>)
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	1ac0      	subs	r0, r0, r3
 8003030:	2301      	movs	r3, #1
 8003032:	4083      	lsls	r3, r0
 8003034:	4313      	orrs	r3, r2
 8003036:	002e      	movs	r6, r5
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	e7ce      	b.n	8002fda <_svfiprintf_r+0x96>
 800303c:	9b07      	ldr	r3, [sp, #28]
 800303e:	1d19      	adds	r1, r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	9107      	str	r1, [sp, #28]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db01      	blt.n	800304c <_svfiprintf_r+0x108>
 8003048:	930b      	str	r3, [sp, #44]	; 0x2c
 800304a:	e004      	b.n	8003056 <_svfiprintf_r+0x112>
 800304c:	425b      	negs	r3, r3
 800304e:	60e3      	str	r3, [r4, #12]
 8003050:	2302      	movs	r3, #2
 8003052:	4313      	orrs	r3, r2
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	782b      	ldrb	r3, [r5, #0]
 8003058:	2b2e      	cmp	r3, #46	; 0x2e
 800305a:	d10a      	bne.n	8003072 <_svfiprintf_r+0x12e>
 800305c:	786b      	ldrb	r3, [r5, #1]
 800305e:	2b2a      	cmp	r3, #42	; 0x2a
 8003060:	d135      	bne.n	80030ce <_svfiprintf_r+0x18a>
 8003062:	9b07      	ldr	r3, [sp, #28]
 8003064:	3502      	adds	r5, #2
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	9207      	str	r2, [sp, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db2b      	blt.n	80030c8 <_svfiprintf_r+0x184>
 8003070:	9309      	str	r3, [sp, #36]	; 0x24
 8003072:	4e30      	ldr	r6, [pc, #192]	; (8003134 <_svfiprintf_r+0x1f0>)
 8003074:	2203      	movs	r2, #3
 8003076:	0030      	movs	r0, r6
 8003078:	7829      	ldrb	r1, [r5, #0]
 800307a:	f000 f9e5 	bl	8003448 <memchr>
 800307e:	2800      	cmp	r0, #0
 8003080:	d006      	beq.n	8003090 <_svfiprintf_r+0x14c>
 8003082:	2340      	movs	r3, #64	; 0x40
 8003084:	1b80      	subs	r0, r0, r6
 8003086:	4083      	lsls	r3, r0
 8003088:	6822      	ldr	r2, [r4, #0]
 800308a:	3501      	adds	r5, #1
 800308c:	4313      	orrs	r3, r2
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	7829      	ldrb	r1, [r5, #0]
 8003092:	2206      	movs	r2, #6
 8003094:	4828      	ldr	r0, [pc, #160]	; (8003138 <_svfiprintf_r+0x1f4>)
 8003096:	1c6e      	adds	r6, r5, #1
 8003098:	7621      	strb	r1, [r4, #24]
 800309a:	f000 f9d5 	bl	8003448 <memchr>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d03c      	beq.n	800311c <_svfiprintf_r+0x1d8>
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <_svfiprintf_r+0x1f8>)
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d125      	bne.n	80030f4 <_svfiprintf_r+0x1b0>
 80030a8:	2207      	movs	r2, #7
 80030aa:	9b07      	ldr	r3, [sp, #28]
 80030ac:	3307      	adds	r3, #7
 80030ae:	4393      	bics	r3, r2
 80030b0:	3308      	adds	r3, #8
 80030b2:	9307      	str	r3, [sp, #28]
 80030b4:	6963      	ldr	r3, [r4, #20]
 80030b6:	9a04      	ldr	r2, [sp, #16]
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	e765      	b.n	8002f8a <_svfiprintf_r+0x46>
 80030be:	4343      	muls	r3, r0
 80030c0:	0035      	movs	r5, r6
 80030c2:	2101      	movs	r1, #1
 80030c4:	189b      	adds	r3, r3, r2
 80030c6:	e7a6      	b.n	8003016 <_svfiprintf_r+0xd2>
 80030c8:	2301      	movs	r3, #1
 80030ca:	425b      	negs	r3, r3
 80030cc:	e7d0      	b.n	8003070 <_svfiprintf_r+0x12c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	200a      	movs	r0, #10
 80030d2:	001a      	movs	r2, r3
 80030d4:	3501      	adds	r5, #1
 80030d6:	6063      	str	r3, [r4, #4]
 80030d8:	7829      	ldrb	r1, [r5, #0]
 80030da:	1c6e      	adds	r6, r5, #1
 80030dc:	3930      	subs	r1, #48	; 0x30
 80030de:	2909      	cmp	r1, #9
 80030e0:	d903      	bls.n	80030ea <_svfiprintf_r+0x1a6>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0c5      	beq.n	8003072 <_svfiprintf_r+0x12e>
 80030e6:	9209      	str	r2, [sp, #36]	; 0x24
 80030e8:	e7c3      	b.n	8003072 <_svfiprintf_r+0x12e>
 80030ea:	4342      	muls	r2, r0
 80030ec:	0035      	movs	r5, r6
 80030ee:	2301      	movs	r3, #1
 80030f0:	1852      	adds	r2, r2, r1
 80030f2:	e7f1      	b.n	80030d8 <_svfiprintf_r+0x194>
 80030f4:	ab07      	add	r3, sp, #28
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	003a      	movs	r2, r7
 80030fa:	0021      	movs	r1, r4
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <_svfiprintf_r+0x1fc>)
 80030fe:	9803      	ldr	r0, [sp, #12]
 8003100:	e000      	b.n	8003104 <_svfiprintf_r+0x1c0>
 8003102:	bf00      	nop
 8003104:	9004      	str	r0, [sp, #16]
 8003106:	9b04      	ldr	r3, [sp, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	d1d3      	bne.n	80030b4 <_svfiprintf_r+0x170>
 800310c:	89bb      	ldrh	r3, [r7, #12]
 800310e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003110:	065b      	lsls	r3, r3, #25
 8003112:	d400      	bmi.n	8003116 <_svfiprintf_r+0x1d2>
 8003114:	e72d      	b.n	8002f72 <_svfiprintf_r+0x2e>
 8003116:	2001      	movs	r0, #1
 8003118:	4240      	negs	r0, r0
 800311a:	e72a      	b.n	8002f72 <_svfiprintf_r+0x2e>
 800311c:	ab07      	add	r3, sp, #28
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	003a      	movs	r2, r7
 8003122:	0021      	movs	r1, r4
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <_svfiprintf_r+0x1fc>)
 8003126:	9803      	ldr	r0, [sp, #12]
 8003128:	f000 f87c 	bl	8003224 <_printf_i>
 800312c:	e7ea      	b.n	8003104 <_svfiprintf_r+0x1c0>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	08003768 	.word	0x08003768
 8003134:	0800376e 	.word	0x0800376e
 8003138:	08003772 	.word	0x08003772
 800313c:	00000000 	.word	0x00000000
 8003140:	08002e81 	.word	0x08002e81

08003144 <_printf_common>:
 8003144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003146:	0015      	movs	r5, r2
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	688a      	ldr	r2, [r1, #8]
 800314c:	690b      	ldr	r3, [r1, #16]
 800314e:	000c      	movs	r4, r1
 8003150:	9000      	str	r0, [sp, #0]
 8003152:	4293      	cmp	r3, r2
 8003154:	da00      	bge.n	8003158 <_printf_common+0x14>
 8003156:	0013      	movs	r3, r2
 8003158:	0022      	movs	r2, r4
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	3243      	adds	r2, #67	; 0x43
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	2a00      	cmp	r2, #0
 8003162:	d001      	beq.n	8003168 <_printf_common+0x24>
 8003164:	3301      	adds	r3, #1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	d502      	bpl.n	8003174 <_printf_common+0x30>
 800316e:	682b      	ldr	r3, [r5, #0]
 8003170:	3302      	adds	r3, #2
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	2306      	movs	r3, #6
 8003178:	0017      	movs	r7, r2
 800317a:	401f      	ands	r7, r3
 800317c:	421a      	tst	r2, r3
 800317e:	d027      	beq.n	80031d0 <_printf_common+0x8c>
 8003180:	0023      	movs	r3, r4
 8003182:	3343      	adds	r3, #67	; 0x43
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	4193      	sbcs	r3, r2
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	0692      	lsls	r2, r2, #26
 800318e:	d430      	bmi.n	80031f2 <_printf_common+0xae>
 8003190:	0022      	movs	r2, r4
 8003192:	9901      	ldr	r1, [sp, #4]
 8003194:	9800      	ldr	r0, [sp, #0]
 8003196:	9e08      	ldr	r6, [sp, #32]
 8003198:	3243      	adds	r2, #67	; 0x43
 800319a:	47b0      	blx	r6
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d025      	beq.n	80031ec <_printf_common+0xa8>
 80031a0:	2306      	movs	r3, #6
 80031a2:	6820      	ldr	r0, [r4, #0]
 80031a4:	682a      	ldr	r2, [r5, #0]
 80031a6:	68e1      	ldr	r1, [r4, #12]
 80031a8:	2500      	movs	r5, #0
 80031aa:	4003      	ands	r3, r0
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d103      	bne.n	80031b8 <_printf_common+0x74>
 80031b0:	1a8d      	subs	r5, r1, r2
 80031b2:	43eb      	mvns	r3, r5
 80031b4:	17db      	asrs	r3, r3, #31
 80031b6:	401d      	ands	r5, r3
 80031b8:	68a3      	ldr	r3, [r4, #8]
 80031ba:	6922      	ldr	r2, [r4, #16]
 80031bc:	4293      	cmp	r3, r2
 80031be:	dd01      	ble.n	80031c4 <_printf_common+0x80>
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	18ed      	adds	r5, r5, r3
 80031c4:	2700      	movs	r7, #0
 80031c6:	42bd      	cmp	r5, r7
 80031c8:	d120      	bne.n	800320c <_printf_common+0xc8>
 80031ca:	2000      	movs	r0, #0
 80031cc:	e010      	b.n	80031f0 <_printf_common+0xac>
 80031ce:	3701      	adds	r7, #1
 80031d0:	68e3      	ldr	r3, [r4, #12]
 80031d2:	682a      	ldr	r2, [r5, #0]
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	42bb      	cmp	r3, r7
 80031d8:	ddd2      	ble.n	8003180 <_printf_common+0x3c>
 80031da:	0022      	movs	r2, r4
 80031dc:	2301      	movs	r3, #1
 80031de:	9901      	ldr	r1, [sp, #4]
 80031e0:	9800      	ldr	r0, [sp, #0]
 80031e2:	9e08      	ldr	r6, [sp, #32]
 80031e4:	3219      	adds	r2, #25
 80031e6:	47b0      	blx	r6
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d1f0      	bne.n	80031ce <_printf_common+0x8a>
 80031ec:	2001      	movs	r0, #1
 80031ee:	4240      	negs	r0, r0
 80031f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031f2:	2030      	movs	r0, #48	; 0x30
 80031f4:	18e1      	adds	r1, r4, r3
 80031f6:	3143      	adds	r1, #67	; 0x43
 80031f8:	7008      	strb	r0, [r1, #0]
 80031fa:	0021      	movs	r1, r4
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	3145      	adds	r1, #69	; 0x45
 8003200:	7809      	ldrb	r1, [r1, #0]
 8003202:	18a2      	adds	r2, r4, r2
 8003204:	3243      	adds	r2, #67	; 0x43
 8003206:	3302      	adds	r3, #2
 8003208:	7011      	strb	r1, [r2, #0]
 800320a:	e7c1      	b.n	8003190 <_printf_common+0x4c>
 800320c:	0022      	movs	r2, r4
 800320e:	2301      	movs	r3, #1
 8003210:	9901      	ldr	r1, [sp, #4]
 8003212:	9800      	ldr	r0, [sp, #0]
 8003214:	9e08      	ldr	r6, [sp, #32]
 8003216:	321a      	adds	r2, #26
 8003218:	47b0      	blx	r6
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d0e6      	beq.n	80031ec <_printf_common+0xa8>
 800321e:	3701      	adds	r7, #1
 8003220:	e7d1      	b.n	80031c6 <_printf_common+0x82>
	...

08003224 <_printf_i>:
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b08b      	sub	sp, #44	; 0x2c
 8003228:	9206      	str	r2, [sp, #24]
 800322a:	000a      	movs	r2, r1
 800322c:	3243      	adds	r2, #67	; 0x43
 800322e:	9307      	str	r3, [sp, #28]
 8003230:	9005      	str	r0, [sp, #20]
 8003232:	9204      	str	r2, [sp, #16]
 8003234:	7e0a      	ldrb	r2, [r1, #24]
 8003236:	000c      	movs	r4, r1
 8003238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800323a:	2a78      	cmp	r2, #120	; 0x78
 800323c:	d807      	bhi.n	800324e <_printf_i+0x2a>
 800323e:	2a62      	cmp	r2, #98	; 0x62
 8003240:	d809      	bhi.n	8003256 <_printf_i+0x32>
 8003242:	2a00      	cmp	r2, #0
 8003244:	d100      	bne.n	8003248 <_printf_i+0x24>
 8003246:	e0c1      	b.n	80033cc <_printf_i+0x1a8>
 8003248:	2a58      	cmp	r2, #88	; 0x58
 800324a:	d100      	bne.n	800324e <_printf_i+0x2a>
 800324c:	e08c      	b.n	8003368 <_printf_i+0x144>
 800324e:	0026      	movs	r6, r4
 8003250:	3642      	adds	r6, #66	; 0x42
 8003252:	7032      	strb	r2, [r6, #0]
 8003254:	e022      	b.n	800329c <_printf_i+0x78>
 8003256:	0010      	movs	r0, r2
 8003258:	3863      	subs	r0, #99	; 0x63
 800325a:	2815      	cmp	r0, #21
 800325c:	d8f7      	bhi.n	800324e <_printf_i+0x2a>
 800325e:	f7fc ff53 	bl	8000108 <__gnu_thumb1_case_shi>
 8003262:	0016      	.short	0x0016
 8003264:	fff6001f 	.word	0xfff6001f
 8003268:	fff6fff6 	.word	0xfff6fff6
 800326c:	001ffff6 	.word	0x001ffff6
 8003270:	fff6fff6 	.word	0xfff6fff6
 8003274:	fff6fff6 	.word	0xfff6fff6
 8003278:	003600a8 	.word	0x003600a8
 800327c:	fff6009a 	.word	0xfff6009a
 8003280:	00b9fff6 	.word	0x00b9fff6
 8003284:	0036fff6 	.word	0x0036fff6
 8003288:	fff6fff6 	.word	0xfff6fff6
 800328c:	009e      	.short	0x009e
 800328e:	0026      	movs	r6, r4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	3642      	adds	r6, #66	; 0x42
 8003294:	1d11      	adds	r1, r2, #4
 8003296:	6019      	str	r1, [r3, #0]
 8003298:	6813      	ldr	r3, [r2, #0]
 800329a:	7033      	strb	r3, [r6, #0]
 800329c:	2301      	movs	r3, #1
 800329e:	e0a7      	b.n	80033f0 <_printf_i+0x1cc>
 80032a0:	6808      	ldr	r0, [r1, #0]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	1d0a      	adds	r2, r1, #4
 80032a6:	0605      	lsls	r5, r0, #24
 80032a8:	d50b      	bpl.n	80032c2 <_printf_i+0x9e>
 80032aa:	680d      	ldr	r5, [r1, #0]
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	da03      	bge.n	80032ba <_printf_i+0x96>
 80032b2:	232d      	movs	r3, #45	; 0x2d
 80032b4:	9a04      	ldr	r2, [sp, #16]
 80032b6:	426d      	negs	r5, r5
 80032b8:	7013      	strb	r3, [r2, #0]
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <_printf_i+0x21c>)
 80032bc:	270a      	movs	r7, #10
 80032be:	9303      	str	r3, [sp, #12]
 80032c0:	e01b      	b.n	80032fa <_printf_i+0xd6>
 80032c2:	680d      	ldr	r5, [r1, #0]
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	0641      	lsls	r1, r0, #25
 80032c8:	d5f1      	bpl.n	80032ae <_printf_i+0x8a>
 80032ca:	b22d      	sxth	r5, r5
 80032cc:	e7ef      	b.n	80032ae <_printf_i+0x8a>
 80032ce:	680d      	ldr	r5, [r1, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	1d08      	adds	r0, r1, #4
 80032d4:	6018      	str	r0, [r3, #0]
 80032d6:	062e      	lsls	r6, r5, #24
 80032d8:	d501      	bpl.n	80032de <_printf_i+0xba>
 80032da:	680d      	ldr	r5, [r1, #0]
 80032dc:	e003      	b.n	80032e6 <_printf_i+0xc2>
 80032de:	066d      	lsls	r5, r5, #25
 80032e0:	d5fb      	bpl.n	80032da <_printf_i+0xb6>
 80032e2:	680d      	ldr	r5, [r1, #0]
 80032e4:	b2ad      	uxth	r5, r5
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <_printf_i+0x21c>)
 80032e8:	2708      	movs	r7, #8
 80032ea:	9303      	str	r3, [sp, #12]
 80032ec:	2a6f      	cmp	r2, #111	; 0x6f
 80032ee:	d000      	beq.n	80032f2 <_printf_i+0xce>
 80032f0:	3702      	adds	r7, #2
 80032f2:	0023      	movs	r3, r4
 80032f4:	2200      	movs	r2, #0
 80032f6:	3343      	adds	r3, #67	; 0x43
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	6863      	ldr	r3, [r4, #4]
 80032fc:	60a3      	str	r3, [r4, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db03      	blt.n	800330a <_printf_i+0xe6>
 8003302:	2204      	movs	r2, #4
 8003304:	6821      	ldr	r1, [r4, #0]
 8003306:	4391      	bics	r1, r2
 8003308:	6021      	str	r1, [r4, #0]
 800330a:	2d00      	cmp	r5, #0
 800330c:	d102      	bne.n	8003314 <_printf_i+0xf0>
 800330e:	9e04      	ldr	r6, [sp, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <_printf_i+0x10a>
 8003314:	9e04      	ldr	r6, [sp, #16]
 8003316:	0028      	movs	r0, r5
 8003318:	0039      	movs	r1, r7
 800331a:	f7fc ff85 	bl	8000228 <__aeabi_uidivmod>
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	3e01      	subs	r6, #1
 8003322:	5c5b      	ldrb	r3, [r3, r1]
 8003324:	7033      	strb	r3, [r6, #0]
 8003326:	002b      	movs	r3, r5
 8003328:	0005      	movs	r5, r0
 800332a:	429f      	cmp	r7, r3
 800332c:	d9f3      	bls.n	8003316 <_printf_i+0xf2>
 800332e:	2f08      	cmp	r7, #8
 8003330:	d109      	bne.n	8003346 <_printf_i+0x122>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	07db      	lsls	r3, r3, #31
 8003336:	d506      	bpl.n	8003346 <_printf_i+0x122>
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6922      	ldr	r2, [r4, #16]
 800333c:	4293      	cmp	r3, r2
 800333e:	dc02      	bgt.n	8003346 <_printf_i+0x122>
 8003340:	2330      	movs	r3, #48	; 0x30
 8003342:	3e01      	subs	r6, #1
 8003344:	7033      	strb	r3, [r6, #0]
 8003346:	9b04      	ldr	r3, [sp, #16]
 8003348:	1b9b      	subs	r3, r3, r6
 800334a:	6123      	str	r3, [r4, #16]
 800334c:	9b07      	ldr	r3, [sp, #28]
 800334e:	0021      	movs	r1, r4
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	9805      	ldr	r0, [sp, #20]
 8003354:	9b06      	ldr	r3, [sp, #24]
 8003356:	aa09      	add	r2, sp, #36	; 0x24
 8003358:	f7ff fef4 	bl	8003144 <_printf_common>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d14c      	bne.n	80033fa <_printf_i+0x1d6>
 8003360:	2001      	movs	r0, #1
 8003362:	4240      	negs	r0, r0
 8003364:	b00b      	add	sp, #44	; 0x2c
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003368:	3145      	adds	r1, #69	; 0x45
 800336a:	700a      	strb	r2, [r1, #0]
 800336c:	4a34      	ldr	r2, [pc, #208]	; (8003440 <_printf_i+0x21c>)
 800336e:	9203      	str	r2, [sp, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	ca20      	ldmia	r2!, {r5}
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	0608      	lsls	r0, r1, #24
 800337a:	d516      	bpl.n	80033aa <_printf_i+0x186>
 800337c:	07cb      	lsls	r3, r1, #31
 800337e:	d502      	bpl.n	8003386 <_printf_i+0x162>
 8003380:	2320      	movs	r3, #32
 8003382:	4319      	orrs	r1, r3
 8003384:	6021      	str	r1, [r4, #0]
 8003386:	2710      	movs	r7, #16
 8003388:	2d00      	cmp	r5, #0
 800338a:	d1b2      	bne.n	80032f2 <_printf_i+0xce>
 800338c:	2320      	movs	r3, #32
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	439a      	bics	r2, r3
 8003392:	6022      	str	r2, [r4, #0]
 8003394:	e7ad      	b.n	80032f2 <_printf_i+0xce>
 8003396:	2220      	movs	r2, #32
 8003398:	6809      	ldr	r1, [r1, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	0022      	movs	r2, r4
 80033a0:	2178      	movs	r1, #120	; 0x78
 80033a2:	3245      	adds	r2, #69	; 0x45
 80033a4:	7011      	strb	r1, [r2, #0]
 80033a6:	4a27      	ldr	r2, [pc, #156]	; (8003444 <_printf_i+0x220>)
 80033a8:	e7e1      	b.n	800336e <_printf_i+0x14a>
 80033aa:	0648      	lsls	r0, r1, #25
 80033ac:	d5e6      	bpl.n	800337c <_printf_i+0x158>
 80033ae:	b2ad      	uxth	r5, r5
 80033b0:	e7e4      	b.n	800337c <_printf_i+0x158>
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	680d      	ldr	r5, [r1, #0]
 80033b6:	1d10      	adds	r0, r2, #4
 80033b8:	6949      	ldr	r1, [r1, #20]
 80033ba:	6018      	str	r0, [r3, #0]
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	062e      	lsls	r6, r5, #24
 80033c0:	d501      	bpl.n	80033c6 <_printf_i+0x1a2>
 80033c2:	6019      	str	r1, [r3, #0]
 80033c4:	e002      	b.n	80033cc <_printf_i+0x1a8>
 80033c6:	066d      	lsls	r5, r5, #25
 80033c8:	d5fb      	bpl.n	80033c2 <_printf_i+0x19e>
 80033ca:	8019      	strh	r1, [r3, #0]
 80033cc:	2300      	movs	r3, #0
 80033ce:	9e04      	ldr	r6, [sp, #16]
 80033d0:	6123      	str	r3, [r4, #16]
 80033d2:	e7bb      	b.n	800334c <_printf_i+0x128>
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	1d11      	adds	r1, r2, #4
 80033d8:	6019      	str	r1, [r3, #0]
 80033da:	6816      	ldr	r6, [r2, #0]
 80033dc:	2100      	movs	r1, #0
 80033de:	0030      	movs	r0, r6
 80033e0:	6862      	ldr	r2, [r4, #4]
 80033e2:	f000 f831 	bl	8003448 <memchr>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d001      	beq.n	80033ee <_printf_i+0x1ca>
 80033ea:	1b80      	subs	r0, r0, r6
 80033ec:	6060      	str	r0, [r4, #4]
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	7013      	strb	r3, [r2, #0]
 80033f8:	e7a8      	b.n	800334c <_printf_i+0x128>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	0032      	movs	r2, r6
 80033fe:	9906      	ldr	r1, [sp, #24]
 8003400:	9805      	ldr	r0, [sp, #20]
 8003402:	9d07      	ldr	r5, [sp, #28]
 8003404:	47a8      	blx	r5
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	d0aa      	beq.n	8003360 <_printf_i+0x13c>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	079b      	lsls	r3, r3, #30
 800340e:	d415      	bmi.n	800343c <_printf_i+0x218>
 8003410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003412:	68e0      	ldr	r0, [r4, #12]
 8003414:	4298      	cmp	r0, r3
 8003416:	daa5      	bge.n	8003364 <_printf_i+0x140>
 8003418:	0018      	movs	r0, r3
 800341a:	e7a3      	b.n	8003364 <_printf_i+0x140>
 800341c:	0022      	movs	r2, r4
 800341e:	2301      	movs	r3, #1
 8003420:	9906      	ldr	r1, [sp, #24]
 8003422:	9805      	ldr	r0, [sp, #20]
 8003424:	9e07      	ldr	r6, [sp, #28]
 8003426:	3219      	adds	r2, #25
 8003428:	47b0      	blx	r6
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	d098      	beq.n	8003360 <_printf_i+0x13c>
 800342e:	3501      	adds	r5, #1
 8003430:	68e3      	ldr	r3, [r4, #12]
 8003432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	42ab      	cmp	r3, r5
 8003438:	dcf0      	bgt.n	800341c <_printf_i+0x1f8>
 800343a:	e7e9      	b.n	8003410 <_printf_i+0x1ec>
 800343c:	2500      	movs	r5, #0
 800343e:	e7f7      	b.n	8003430 <_printf_i+0x20c>
 8003440:	08003779 	.word	0x08003779
 8003444:	0800378a 	.word	0x0800378a

08003448 <memchr>:
 8003448:	b2c9      	uxtb	r1, r1
 800344a:	1882      	adds	r2, r0, r2
 800344c:	4290      	cmp	r0, r2
 800344e:	d101      	bne.n	8003454 <memchr+0xc>
 8003450:	2000      	movs	r0, #0
 8003452:	4770      	bx	lr
 8003454:	7803      	ldrb	r3, [r0, #0]
 8003456:	428b      	cmp	r3, r1
 8003458:	d0fb      	beq.n	8003452 <memchr+0xa>
 800345a:	3001      	adds	r0, #1
 800345c:	e7f6      	b.n	800344c <memchr+0x4>

0800345e <memcpy>:
 800345e:	2300      	movs	r3, #0
 8003460:	b510      	push	{r4, lr}
 8003462:	429a      	cmp	r2, r3
 8003464:	d100      	bne.n	8003468 <memcpy+0xa>
 8003466:	bd10      	pop	{r4, pc}
 8003468:	5ccc      	ldrb	r4, [r1, r3]
 800346a:	54c4      	strb	r4, [r0, r3]
 800346c:	3301      	adds	r3, #1
 800346e:	e7f8      	b.n	8003462 <memcpy+0x4>

08003470 <memmove>:
 8003470:	b510      	push	{r4, lr}
 8003472:	4288      	cmp	r0, r1
 8003474:	d902      	bls.n	800347c <memmove+0xc>
 8003476:	188b      	adds	r3, r1, r2
 8003478:	4298      	cmp	r0, r3
 800347a:	d303      	bcc.n	8003484 <memmove+0x14>
 800347c:	2300      	movs	r3, #0
 800347e:	e007      	b.n	8003490 <memmove+0x20>
 8003480:	5c8b      	ldrb	r3, [r1, r2]
 8003482:	5483      	strb	r3, [r0, r2]
 8003484:	3a01      	subs	r2, #1
 8003486:	d2fb      	bcs.n	8003480 <memmove+0x10>
 8003488:	bd10      	pop	{r4, pc}
 800348a:	5ccc      	ldrb	r4, [r1, r3]
 800348c:	54c4      	strb	r4, [r0, r3]
 800348e:	3301      	adds	r3, #1
 8003490:	429a      	cmp	r2, r3
 8003492:	d1fa      	bne.n	800348a <memmove+0x1a>
 8003494:	e7f8      	b.n	8003488 <memmove+0x18>
	...

08003498 <_free_r>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	0005      	movs	r5, r0
 800349c:	2900      	cmp	r1, #0
 800349e:	d010      	beq.n	80034c2 <_free_r+0x2a>
 80034a0:	1f0c      	subs	r4, r1, #4
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da00      	bge.n	80034aa <_free_r+0x12>
 80034a8:	18e4      	adds	r4, r4, r3
 80034aa:	0028      	movs	r0, r5
 80034ac:	f000 f918 	bl	80036e0 <__malloc_lock>
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <_free_r+0x90>)
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <_free_r+0x2c>
 80034b8:	6063      	str	r3, [r4, #4]
 80034ba:	6014      	str	r4, [r2, #0]
 80034bc:	0028      	movs	r0, r5
 80034be:	f000 f917 	bl	80036f0 <__malloc_unlock>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	d908      	bls.n	80034da <_free_r+0x42>
 80034c8:	6821      	ldr	r1, [r4, #0]
 80034ca:	1860      	adds	r0, r4, r1
 80034cc:	4283      	cmp	r3, r0
 80034ce:	d1f3      	bne.n	80034b8 <_free_r+0x20>
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	1841      	adds	r1, r0, r1
 80034d6:	6021      	str	r1, [r4, #0]
 80034d8:	e7ee      	b.n	80034b8 <_free_r+0x20>
 80034da:	001a      	movs	r2, r3
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <_free_r+0x4e>
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	d9f9      	bls.n	80034da <_free_r+0x42>
 80034e6:	6811      	ldr	r1, [r2, #0]
 80034e8:	1850      	adds	r0, r2, r1
 80034ea:	42a0      	cmp	r0, r4
 80034ec:	d10b      	bne.n	8003506 <_free_r+0x6e>
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1809      	adds	r1, r1, r0
 80034f2:	1850      	adds	r0, r2, r1
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	4283      	cmp	r3, r0
 80034f8:	d1e0      	bne.n	80034bc <_free_r+0x24>
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	1841      	adds	r1, r0, r1
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	6053      	str	r3, [r2, #4]
 8003504:	e7da      	b.n	80034bc <_free_r+0x24>
 8003506:	42a0      	cmp	r0, r4
 8003508:	d902      	bls.n	8003510 <_free_r+0x78>
 800350a:	230c      	movs	r3, #12
 800350c:	602b      	str	r3, [r5, #0]
 800350e:	e7d5      	b.n	80034bc <_free_r+0x24>
 8003510:	6821      	ldr	r1, [r4, #0]
 8003512:	1860      	adds	r0, r4, r1
 8003514:	4283      	cmp	r3, r0
 8003516:	d103      	bne.n	8003520 <_free_r+0x88>
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	1841      	adds	r1, r0, r1
 800351e:	6021      	str	r1, [r4, #0]
 8003520:	6063      	str	r3, [r4, #4]
 8003522:	6054      	str	r4, [r2, #4]
 8003524:	e7ca      	b.n	80034bc <_free_r+0x24>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000788 	.word	0x20000788

0800352c <sbrk_aligned>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4e0f      	ldr	r6, [pc, #60]	; (800356c <sbrk_aligned+0x40>)
 8003530:	000d      	movs	r5, r1
 8003532:	6831      	ldr	r1, [r6, #0]
 8003534:	0004      	movs	r4, r0
 8003536:	2900      	cmp	r1, #0
 8003538:	d102      	bne.n	8003540 <sbrk_aligned+0x14>
 800353a:	f000 f8bf 	bl	80036bc <_sbrk_r>
 800353e:	6030      	str	r0, [r6, #0]
 8003540:	0029      	movs	r1, r5
 8003542:	0020      	movs	r0, r4
 8003544:	f000 f8ba 	bl	80036bc <_sbrk_r>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d00a      	beq.n	8003562 <sbrk_aligned+0x36>
 800354c:	2303      	movs	r3, #3
 800354e:	1cc5      	adds	r5, r0, #3
 8003550:	439d      	bics	r5, r3
 8003552:	42a8      	cmp	r0, r5
 8003554:	d007      	beq.n	8003566 <sbrk_aligned+0x3a>
 8003556:	1a29      	subs	r1, r5, r0
 8003558:	0020      	movs	r0, r4
 800355a:	f000 f8af 	bl	80036bc <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d101      	bne.n	8003566 <sbrk_aligned+0x3a>
 8003562:	2501      	movs	r5, #1
 8003564:	426d      	negs	r5, r5
 8003566:	0028      	movs	r0, r5
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	2000078c 	.word	0x2000078c

08003570 <_malloc_r>:
 8003570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003572:	2203      	movs	r2, #3
 8003574:	1ccb      	adds	r3, r1, #3
 8003576:	4393      	bics	r3, r2
 8003578:	3308      	adds	r3, #8
 800357a:	0006      	movs	r6, r0
 800357c:	001f      	movs	r7, r3
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d232      	bcs.n	80035e8 <_malloc_r+0x78>
 8003582:	270c      	movs	r7, #12
 8003584:	42b9      	cmp	r1, r7
 8003586:	d831      	bhi.n	80035ec <_malloc_r+0x7c>
 8003588:	0030      	movs	r0, r6
 800358a:	f000 f8a9 	bl	80036e0 <__malloc_lock>
 800358e:	4d32      	ldr	r5, [pc, #200]	; (8003658 <_malloc_r+0xe8>)
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	001c      	movs	r4, r3
 8003594:	2c00      	cmp	r4, #0
 8003596:	d12e      	bne.n	80035f6 <_malloc_r+0x86>
 8003598:	0039      	movs	r1, r7
 800359a:	0030      	movs	r0, r6
 800359c:	f7ff ffc6 	bl	800352c <sbrk_aligned>
 80035a0:	0004      	movs	r4, r0
 80035a2:	1c43      	adds	r3, r0, #1
 80035a4:	d11e      	bne.n	80035e4 <_malloc_r+0x74>
 80035a6:	682c      	ldr	r4, [r5, #0]
 80035a8:	0025      	movs	r5, r4
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	d14a      	bne.n	8003644 <_malloc_r+0xd4>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	0029      	movs	r1, r5
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	0030      	movs	r0, r6
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	f000 f880 	bl	80036bc <_sbrk_r>
 80035bc:	9b01      	ldr	r3, [sp, #4]
 80035be:	4283      	cmp	r3, r0
 80035c0:	d143      	bne.n	800364a <_malloc_r+0xda>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	3703      	adds	r7, #3
 80035c6:	1aff      	subs	r7, r7, r3
 80035c8:	2303      	movs	r3, #3
 80035ca:	439f      	bics	r7, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	2f0c      	cmp	r7, #12
 80035d0:	d200      	bcs.n	80035d4 <_malloc_r+0x64>
 80035d2:	270c      	movs	r7, #12
 80035d4:	0039      	movs	r1, r7
 80035d6:	0030      	movs	r0, r6
 80035d8:	f7ff ffa8 	bl	800352c <sbrk_aligned>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d034      	beq.n	800364a <_malloc_r+0xda>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	19df      	adds	r7, r3, r7
 80035e4:	6027      	str	r7, [r4, #0]
 80035e6:	e013      	b.n	8003610 <_malloc_r+0xa0>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dacb      	bge.n	8003584 <_malloc_r+0x14>
 80035ec:	230c      	movs	r3, #12
 80035ee:	2500      	movs	r5, #0
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	0028      	movs	r0, r5
 80035f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	1bd1      	subs	r1, r2, r7
 80035fa:	d420      	bmi.n	800363e <_malloc_r+0xce>
 80035fc:	290b      	cmp	r1, #11
 80035fe:	d917      	bls.n	8003630 <_malloc_r+0xc0>
 8003600:	19e2      	adds	r2, r4, r7
 8003602:	6027      	str	r7, [r4, #0]
 8003604:	42a3      	cmp	r3, r4
 8003606:	d111      	bne.n	800362c <_malloc_r+0xbc>
 8003608:	602a      	str	r2, [r5, #0]
 800360a:	6863      	ldr	r3, [r4, #4]
 800360c:	6011      	str	r1, [r2, #0]
 800360e:	6053      	str	r3, [r2, #4]
 8003610:	0030      	movs	r0, r6
 8003612:	0025      	movs	r5, r4
 8003614:	f000 f86c 	bl	80036f0 <__malloc_unlock>
 8003618:	2207      	movs	r2, #7
 800361a:	350b      	adds	r5, #11
 800361c:	1d23      	adds	r3, r4, #4
 800361e:	4395      	bics	r5, r2
 8003620:	1aea      	subs	r2, r5, r3
 8003622:	429d      	cmp	r5, r3
 8003624:	d0e5      	beq.n	80035f2 <_malloc_r+0x82>
 8003626:	1b5b      	subs	r3, r3, r5
 8003628:	50a3      	str	r3, [r4, r2]
 800362a:	e7e2      	b.n	80035f2 <_malloc_r+0x82>
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e7ec      	b.n	800360a <_malloc_r+0x9a>
 8003630:	6862      	ldr	r2, [r4, #4]
 8003632:	42a3      	cmp	r3, r4
 8003634:	d101      	bne.n	800363a <_malloc_r+0xca>
 8003636:	602a      	str	r2, [r5, #0]
 8003638:	e7ea      	b.n	8003610 <_malloc_r+0xa0>
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	e7e8      	b.n	8003610 <_malloc_r+0xa0>
 800363e:	0023      	movs	r3, r4
 8003640:	6864      	ldr	r4, [r4, #4]
 8003642:	e7a7      	b.n	8003594 <_malloc_r+0x24>
 8003644:	002c      	movs	r4, r5
 8003646:	686d      	ldr	r5, [r5, #4]
 8003648:	e7af      	b.n	80035aa <_malloc_r+0x3a>
 800364a:	230c      	movs	r3, #12
 800364c:	0030      	movs	r0, r6
 800364e:	6033      	str	r3, [r6, #0]
 8003650:	f000 f84e 	bl	80036f0 <__malloc_unlock>
 8003654:	e7cd      	b.n	80035f2 <_malloc_r+0x82>
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	20000788 	.word	0x20000788

0800365c <_realloc_r>:
 800365c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800365e:	0007      	movs	r7, r0
 8003660:	000e      	movs	r6, r1
 8003662:	0014      	movs	r4, r2
 8003664:	2900      	cmp	r1, #0
 8003666:	d105      	bne.n	8003674 <_realloc_r+0x18>
 8003668:	0011      	movs	r1, r2
 800366a:	f7ff ff81 	bl	8003570 <_malloc_r>
 800366e:	0005      	movs	r5, r0
 8003670:	0028      	movs	r0, r5
 8003672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003674:	2a00      	cmp	r2, #0
 8003676:	d103      	bne.n	8003680 <_realloc_r+0x24>
 8003678:	f7ff ff0e 	bl	8003498 <_free_r>
 800367c:	0025      	movs	r5, r4
 800367e:	e7f7      	b.n	8003670 <_realloc_r+0x14>
 8003680:	f000 f83e 	bl	8003700 <_malloc_usable_size_r>
 8003684:	9001      	str	r0, [sp, #4]
 8003686:	4284      	cmp	r4, r0
 8003688:	d803      	bhi.n	8003692 <_realloc_r+0x36>
 800368a:	0035      	movs	r5, r6
 800368c:	0843      	lsrs	r3, r0, #1
 800368e:	42a3      	cmp	r3, r4
 8003690:	d3ee      	bcc.n	8003670 <_realloc_r+0x14>
 8003692:	0021      	movs	r1, r4
 8003694:	0038      	movs	r0, r7
 8003696:	f7ff ff6b 	bl	8003570 <_malloc_r>
 800369a:	1e05      	subs	r5, r0, #0
 800369c:	d0e8      	beq.n	8003670 <_realloc_r+0x14>
 800369e:	9b01      	ldr	r3, [sp, #4]
 80036a0:	0022      	movs	r2, r4
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d900      	bls.n	80036a8 <_realloc_r+0x4c>
 80036a6:	001a      	movs	r2, r3
 80036a8:	0031      	movs	r1, r6
 80036aa:	0028      	movs	r0, r5
 80036ac:	f7ff fed7 	bl	800345e <memcpy>
 80036b0:	0031      	movs	r1, r6
 80036b2:	0038      	movs	r0, r7
 80036b4:	f7ff fef0 	bl	8003498 <_free_r>
 80036b8:	e7da      	b.n	8003670 <_realloc_r+0x14>
	...

080036bc <_sbrk_r>:
 80036bc:	2300      	movs	r3, #0
 80036be:	b570      	push	{r4, r5, r6, lr}
 80036c0:	4d06      	ldr	r5, [pc, #24]	; (80036dc <_sbrk_r+0x20>)
 80036c2:	0004      	movs	r4, r0
 80036c4:	0008      	movs	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd fa08 	bl	8000adc <_sbrk>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d103      	bne.n	80036d8 <_sbrk_r+0x1c>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d000      	beq.n	80036d8 <_sbrk_r+0x1c>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	20000790 	.word	0x20000790

080036e0 <__malloc_lock>:
 80036e0:	b510      	push	{r4, lr}
 80036e2:	4802      	ldr	r0, [pc, #8]	; (80036ec <__malloc_lock+0xc>)
 80036e4:	f000 f814 	bl	8003710 <__retarget_lock_acquire_recursive>
 80036e8:	bd10      	pop	{r4, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000794 	.word	0x20000794

080036f0 <__malloc_unlock>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4802      	ldr	r0, [pc, #8]	; (80036fc <__malloc_unlock+0xc>)
 80036f4:	f000 f80d 	bl	8003712 <__retarget_lock_release_recursive>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000794 	.word	0x20000794

08003700 <_malloc_usable_size_r>:
 8003700:	1f0b      	subs	r3, r1, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1f18      	subs	r0, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	da01      	bge.n	800370e <_malloc_usable_size_r+0xe>
 800370a:	580b      	ldr	r3, [r1, r0]
 800370c:	18c0      	adds	r0, r0, r3
 800370e:	4770      	bx	lr

08003710 <__retarget_lock_acquire_recursive>:
 8003710:	4770      	bx	lr

08003712 <__retarget_lock_release_recursive>:
 8003712:	4770      	bx	lr

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
