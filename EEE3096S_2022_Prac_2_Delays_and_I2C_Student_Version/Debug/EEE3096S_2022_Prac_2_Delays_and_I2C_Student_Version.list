
EEE3096S_2022_Prac_2_Delays_and_I2C_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004814  08004814  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004814  08004814  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800481c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  0800488c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800488c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c78d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e55  00000000  00000000  0002c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012113  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d96f  00000000  00000000  00041adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a297  00000000  00000000  0004f44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b96e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  000b9734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004764 	.word	0x08004764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004764 	.word	0x08004764

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 f89f 	bl	8000554 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f82b 	bl	800047c <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f891 	bl	8000554 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f887 	bl	8000554 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f837 	bl	80004c8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f82d 	bl	80004c8 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__eqsf2>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	0042      	lsls	r2, r0, #1
 8000480:	0245      	lsls	r5, r0, #9
 8000482:	024e      	lsls	r6, r1, #9
 8000484:	004c      	lsls	r4, r1, #1
 8000486:	0fc3      	lsrs	r3, r0, #31
 8000488:	0a6d      	lsrs	r5, r5, #9
 800048a:	2001      	movs	r0, #1
 800048c:	0e12      	lsrs	r2, r2, #24
 800048e:	0a76      	lsrs	r6, r6, #9
 8000490:	0e24      	lsrs	r4, r4, #24
 8000492:	0fc9      	lsrs	r1, r1, #31
 8000494:	2aff      	cmp	r2, #255	; 0xff
 8000496:	d006      	beq.n	80004a6 <__eqsf2+0x2a>
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d003      	beq.n	80004a4 <__eqsf2+0x28>
 800049c:	42a2      	cmp	r2, r4
 800049e:	d101      	bne.n	80004a4 <__eqsf2+0x28>
 80004a0:	42b5      	cmp	r5, r6
 80004a2:	d006      	beq.n	80004b2 <__eqsf2+0x36>
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d1fc      	bne.n	80004a4 <__eqsf2+0x28>
 80004aa:	2cff      	cmp	r4, #255	; 0xff
 80004ac:	d1fa      	bne.n	80004a4 <__eqsf2+0x28>
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d1f8      	bne.n	80004a4 <__eqsf2+0x28>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d006      	beq.n	80004c4 <__eqsf2+0x48>
 80004b6:	2001      	movs	r0, #1
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d1f3      	bne.n	80004a4 <__eqsf2+0x28>
 80004bc:	0028      	movs	r0, r5
 80004be:	1e43      	subs	r3, r0, #1
 80004c0:	4198      	sbcs	r0, r3
 80004c2:	e7ef      	b.n	80004a4 <__eqsf2+0x28>
 80004c4:	2000      	movs	r0, #0
 80004c6:	e7ed      	b.n	80004a4 <__eqsf2+0x28>

080004c8 <__gesf2>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0042      	lsls	r2, r0, #1
 80004cc:	0245      	lsls	r5, r0, #9
 80004ce:	024e      	lsls	r6, r1, #9
 80004d0:	004c      	lsls	r4, r1, #1
 80004d2:	0fc3      	lsrs	r3, r0, #31
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	0e12      	lsrs	r2, r2, #24
 80004d8:	0a76      	lsrs	r6, r6, #9
 80004da:	0e24      	lsrs	r4, r4, #24
 80004dc:	0fc8      	lsrs	r0, r1, #31
 80004de:	2aff      	cmp	r2, #255	; 0xff
 80004e0:	d01b      	beq.n	800051a <__gesf2+0x52>
 80004e2:	2cff      	cmp	r4, #255	; 0xff
 80004e4:	d00e      	beq.n	8000504 <__gesf2+0x3c>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d11b      	bne.n	8000522 <__gesf2+0x5a>
 80004ea:	2c00      	cmp	r4, #0
 80004ec:	d101      	bne.n	80004f2 <__gesf2+0x2a>
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d01c      	beq.n	800052c <__gesf2+0x64>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d00c      	beq.n	8000510 <__gesf2+0x48>
 80004f6:	4283      	cmp	r3, r0
 80004f8:	d01c      	beq.n	8000534 <__gesf2+0x6c>
 80004fa:	2102      	movs	r1, #2
 80004fc:	1e58      	subs	r0, r3, #1
 80004fe:	4008      	ands	r0, r1
 8000500:	3801      	subs	r0, #1
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2e00      	cmp	r6, #0
 8000506:	d122      	bne.n	800054e <__gesf2+0x86>
 8000508:	2a00      	cmp	r2, #0
 800050a:	d1f4      	bne.n	80004f6 <__gesf2+0x2e>
 800050c:	2d00      	cmp	r5, #0
 800050e:	d1f2      	bne.n	80004f6 <__gesf2+0x2e>
 8000510:	2800      	cmp	r0, #0
 8000512:	d1f6      	bne.n	8000502 <__gesf2+0x3a>
 8000514:	2001      	movs	r0, #1
 8000516:	4240      	negs	r0, r0
 8000518:	e7f3      	b.n	8000502 <__gesf2+0x3a>
 800051a:	2d00      	cmp	r5, #0
 800051c:	d117      	bne.n	800054e <__gesf2+0x86>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d0f0      	beq.n	8000504 <__gesf2+0x3c>
 8000522:	2c00      	cmp	r4, #0
 8000524:	d1e7      	bne.n	80004f6 <__gesf2+0x2e>
 8000526:	2e00      	cmp	r6, #0
 8000528:	d1e5      	bne.n	80004f6 <__gesf2+0x2e>
 800052a:	e7e6      	b.n	80004fa <__gesf2+0x32>
 800052c:	2000      	movs	r0, #0
 800052e:	2d00      	cmp	r5, #0
 8000530:	d0e7      	beq.n	8000502 <__gesf2+0x3a>
 8000532:	e7e2      	b.n	80004fa <__gesf2+0x32>
 8000534:	42a2      	cmp	r2, r4
 8000536:	dc05      	bgt.n	8000544 <__gesf2+0x7c>
 8000538:	dbea      	blt.n	8000510 <__gesf2+0x48>
 800053a:	42b5      	cmp	r5, r6
 800053c:	d802      	bhi.n	8000544 <__gesf2+0x7c>
 800053e:	d3e7      	bcc.n	8000510 <__gesf2+0x48>
 8000540:	2000      	movs	r0, #0
 8000542:	e7de      	b.n	8000502 <__gesf2+0x3a>
 8000544:	4243      	negs	r3, r0
 8000546:	4158      	adcs	r0, r3
 8000548:	0040      	lsls	r0, r0, #1
 800054a:	3801      	subs	r0, #1
 800054c:	e7d9      	b.n	8000502 <__gesf2+0x3a>
 800054e:	2002      	movs	r0, #2
 8000550:	4240      	negs	r0, r0
 8000552:	e7d6      	b.n	8000502 <__gesf2+0x3a>

08000554 <__lesf2>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	0042      	lsls	r2, r0, #1
 8000558:	0245      	lsls	r5, r0, #9
 800055a:	024e      	lsls	r6, r1, #9
 800055c:	004c      	lsls	r4, r1, #1
 800055e:	0fc3      	lsrs	r3, r0, #31
 8000560:	0a6d      	lsrs	r5, r5, #9
 8000562:	0e12      	lsrs	r2, r2, #24
 8000564:	0a76      	lsrs	r6, r6, #9
 8000566:	0e24      	lsrs	r4, r4, #24
 8000568:	0fc8      	lsrs	r0, r1, #31
 800056a:	2aff      	cmp	r2, #255	; 0xff
 800056c:	d00b      	beq.n	8000586 <__lesf2+0x32>
 800056e:	2cff      	cmp	r4, #255	; 0xff
 8000570:	d00d      	beq.n	800058e <__lesf2+0x3a>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d11f      	bne.n	80005b6 <__lesf2+0x62>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d116      	bne.n	80005a8 <__lesf2+0x54>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d114      	bne.n	80005a8 <__lesf2+0x54>
 800057e:	2000      	movs	r0, #0
 8000580:	2d00      	cmp	r5, #0
 8000582:	d010      	beq.n	80005a6 <__lesf2+0x52>
 8000584:	e009      	b.n	800059a <__lesf2+0x46>
 8000586:	2d00      	cmp	r5, #0
 8000588:	d10c      	bne.n	80005a4 <__lesf2+0x50>
 800058a:	2cff      	cmp	r4, #255	; 0xff
 800058c:	d113      	bne.n	80005b6 <__lesf2+0x62>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d108      	bne.n	80005a4 <__lesf2+0x50>
 8000592:	2a00      	cmp	r2, #0
 8000594:	d008      	beq.n	80005a8 <__lesf2+0x54>
 8000596:	4283      	cmp	r3, r0
 8000598:	d012      	beq.n	80005c0 <__lesf2+0x6c>
 800059a:	2102      	movs	r1, #2
 800059c:	1e58      	subs	r0, r3, #1
 800059e:	4008      	ands	r0, r1
 80005a0:	3801      	subs	r0, #1
 80005a2:	e000      	b.n	80005a6 <__lesf2+0x52>
 80005a4:	2002      	movs	r0, #2
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f4      	bne.n	8000596 <__lesf2+0x42>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1fa      	bne.n	80005a6 <__lesf2+0x52>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f7      	b.n	80005a6 <__lesf2+0x52>
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d1ed      	bne.n	8000596 <__lesf2+0x42>
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1eb      	bne.n	8000596 <__lesf2+0x42>
 80005be:	e7ec      	b.n	800059a <__lesf2+0x46>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	dc05      	bgt.n	80005d0 <__lesf2+0x7c>
 80005c4:	dbf2      	blt.n	80005ac <__lesf2+0x58>
 80005c6:	42b5      	cmp	r5, r6
 80005c8:	d802      	bhi.n	80005d0 <__lesf2+0x7c>
 80005ca:	d3ef      	bcc.n	80005ac <__lesf2+0x58>
 80005cc:	2000      	movs	r0, #0
 80005ce:	e7ea      	b.n	80005a6 <__lesf2+0x52>
 80005d0:	4243      	negs	r3, r0
 80005d2:	4158      	adcs	r0, r3
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e5      	b.n	80005a6 <__lesf2+0x52>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__aeabi_i2f>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	2800      	cmp	r0, #0
 80005e0:	d013      	beq.n	800060a <__aeabi_i2f+0x2e>
 80005e2:	17c3      	asrs	r3, r0, #31
 80005e4:	18c6      	adds	r6, r0, r3
 80005e6:	405e      	eors	r6, r3
 80005e8:	0fc4      	lsrs	r4, r0, #31
 80005ea:	0030      	movs	r0, r6
 80005ec:	f000 f844 	bl	8000678 <__clzsi2>
 80005f0:	239e      	movs	r3, #158	; 0x9e
 80005f2:	0005      	movs	r5, r0
 80005f4:	1a1b      	subs	r3, r3, r0
 80005f6:	2b96      	cmp	r3, #150	; 0x96
 80005f8:	dc0f      	bgt.n	800061a <__aeabi_i2f+0x3e>
 80005fa:	2808      	cmp	r0, #8
 80005fc:	dd01      	ble.n	8000602 <__aeabi_i2f+0x26>
 80005fe:	3d08      	subs	r5, #8
 8000600:	40ae      	lsls	r6, r5
 8000602:	0276      	lsls	r6, r6, #9
 8000604:	0a76      	lsrs	r6, r6, #9
 8000606:	b2d8      	uxtb	r0, r3
 8000608:	e002      	b.n	8000610 <__aeabi_i2f+0x34>
 800060a:	2400      	movs	r4, #0
 800060c:	2000      	movs	r0, #0
 800060e:	2600      	movs	r6, #0
 8000610:	05c0      	lsls	r0, r0, #23
 8000612:	4330      	orrs	r0, r6
 8000614:	07e4      	lsls	r4, r4, #31
 8000616:	4320      	orrs	r0, r4
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	2b99      	cmp	r3, #153	; 0x99
 800061c:	dd0c      	ble.n	8000638 <__aeabi_i2f+0x5c>
 800061e:	2205      	movs	r2, #5
 8000620:	0031      	movs	r1, r6
 8000622:	1a12      	subs	r2, r2, r0
 8000624:	40d1      	lsrs	r1, r2
 8000626:	000a      	movs	r2, r1
 8000628:	0001      	movs	r1, r0
 800062a:	0030      	movs	r0, r6
 800062c:	311b      	adds	r1, #27
 800062e:	4088      	lsls	r0, r1
 8000630:	1e41      	subs	r1, r0, #1
 8000632:	4188      	sbcs	r0, r1
 8000634:	4302      	orrs	r2, r0
 8000636:	0016      	movs	r6, r2
 8000638:	2d05      	cmp	r5, #5
 800063a:	dc12      	bgt.n	8000662 <__aeabi_i2f+0x86>
 800063c:	0031      	movs	r1, r6
 800063e:	4f0d      	ldr	r7, [pc, #52]	; (8000674 <__aeabi_i2f+0x98>)
 8000640:	4039      	ands	r1, r7
 8000642:	0772      	lsls	r2, r6, #29
 8000644:	d009      	beq.n	800065a <__aeabi_i2f+0x7e>
 8000646:	200f      	movs	r0, #15
 8000648:	4030      	ands	r0, r6
 800064a:	2804      	cmp	r0, #4
 800064c:	d005      	beq.n	800065a <__aeabi_i2f+0x7e>
 800064e:	3104      	adds	r1, #4
 8000650:	014a      	lsls	r2, r1, #5
 8000652:	d502      	bpl.n	800065a <__aeabi_i2f+0x7e>
 8000654:	239f      	movs	r3, #159	; 0x9f
 8000656:	4039      	ands	r1, r7
 8000658:	1b5b      	subs	r3, r3, r5
 800065a:	0189      	lsls	r1, r1, #6
 800065c:	0a4e      	lsrs	r6, r1, #9
 800065e:	b2d8      	uxtb	r0, r3
 8000660:	e7d6      	b.n	8000610 <__aeabi_i2f+0x34>
 8000662:	1f6a      	subs	r2, r5, #5
 8000664:	4096      	lsls	r6, r2
 8000666:	0031      	movs	r1, r6
 8000668:	4f02      	ldr	r7, [pc, #8]	; (8000674 <__aeabi_i2f+0x98>)
 800066a:	4039      	ands	r1, r7
 800066c:	0772      	lsls	r2, r6, #29
 800066e:	d0f4      	beq.n	800065a <__aeabi_i2f+0x7e>
 8000670:	e7e9      	b.n	8000646 <__aeabi_i2f+0x6a>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	fbffffff 	.word	0xfbffffff

08000678 <__clzsi2>:
 8000678:	211c      	movs	r1, #28
 800067a:	2301      	movs	r3, #1
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0xe>
 8000682:	0c00      	lsrs	r0, r0, #16
 8000684:	3910      	subs	r1, #16
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	4298      	cmp	r0, r3
 800068a:	d301      	bcc.n	8000690 <__clzsi2+0x18>
 800068c:	0a00      	lsrs	r0, r0, #8
 800068e:	3908      	subs	r1, #8
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	4298      	cmp	r0, r3
 8000694:	d301      	bcc.n	800069a <__clzsi2+0x22>
 8000696:	0900      	lsrs	r0, r0, #4
 8000698:	3904      	subs	r1, #4
 800069a:	a202      	add	r2, pc, #8	; (adr r2, 80006a4 <__clzsi2+0x2c>)
 800069c:	5c10      	ldrb	r0, [r2, r0]
 800069e:	1840      	adds	r0, r0, r1
 80006a0:	4770      	bx	lr
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	02020304 	.word	0x02020304
 80006a8:	01010101 	.word	0x01010101
	...

080006b4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fc7f 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f86d 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f95b 	bl	800097c <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c6:	f000 f8cb 	bl	8000860 <MX_I2C1_Init>
  MX_DMA_Init();
 80006ca:	f000 f939 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 f907 	bl	80008e0 <MX_USART2_UART_Init>

  //TO DO
  //TASK 6
  //YOUR CODE HERE
  // setTime (sec, min, h, dow, dom, month, year)
  setTime(00, 00, 12, 06, 22, 01, 22);
 80006d2:	2316      	movs	r3, #22
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2316      	movs	r3, #22
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2306      	movs	r3, #6
 80006e0:	220c      	movs	r2, #12
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fa1b 	bl	8000b20 <setTime>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4a21      	ldr	r2, [pc, #132]	; (8000774 <main+0xc0>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f001 f8b5 	bl	8001862 <HAL_GPIO_TogglePin>

	//TO DO:
	//TASK 6
	getTime();
 80006f8:	f000 fa7c 	bl	8000bf4 <getTime>
	sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <main+0xc4>)
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	001a      	movs	r2, r3
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0xc4>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	001c      	movs	r4, r3
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <main+0xc4>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	491b      	ldr	r1, [pc, #108]	; (800077c <main+0xc8>)
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <main+0xcc>)
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	0023      	movs	r3, r4
 8000714:	f003 fbbc 	bl	8003e90 <siprintf>
	HAL_UART_Transmit (&huart2, buffer, sizeof(buffer), 1000); // transmits date
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4918      	ldr	r1, [pc, #96]	; (8000780 <main+0xcc>)
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0xd0>)
 8000720:	220e      	movs	r2, #14
 8000722:	f002 fc39 	bl	8002f98 <HAL_UART_Transmit>

	sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <main+0xc4>)
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	001a      	movs	r2, r3
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0xc4>)
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	001c      	movs	r4, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0xc4>)
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	4914      	ldr	r1, [pc, #80]	; (8000788 <main+0xd4>)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0xcc>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	0023      	movs	r3, r4
 800073e:	f003 fba7 	bl	8003e90 <siprintf>
	HAL_UART_Transmit (&huart2, buffer, sizeof(buffer), 1000);
 8000742:	23fa      	movs	r3, #250	; 0xfa
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <main+0xcc>)
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0xd0>)
 800074a:	220e      	movs	r2, #14
 800074c:	f002 fc24 	bl	8002f98 <HAL_UART_Transmit>

	sprintf(buffer, "%d \r\n", 66666666666666);
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <main+0xd8>)
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0xdc>)
 8000754:	490f      	ldr	r1, [pc, #60]	; (8000794 <main+0xe0>)
 8000756:	480a      	ldr	r0, [pc, #40]	; (8000780 <main+0xcc>)
 8000758:	f003 fb9a 	bl	8003e90 <siprintf>
	//This creates a string "55555555555555" with a pointer called buffer

	//Transmit data via UART
	//Blocking! fine for small buffers
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800075c:	23fa      	movs	r3, #250	; 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <main+0xcc>)
 8000762:	4808      	ldr	r0, [pc, #32]	; (8000784 <main+0xd0>)
 8000764:	220e      	movs	r2, #14
 8000766:	f002 fc17 	bl	8002f98 <HAL_UART_Transmit>



	//YOUR CODE HERE
	pause_sec(60);
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <main+0xe4>)
 800076c:	1c18      	adds	r0, r3, #0
 800076e:	f000 f97d 	bl	8000a6c <pause_sec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000772:	e7ba      	b.n	80006ea <main+0x36>
 8000774:	48000800 	.word	0x48000800
 8000778:	200001b0 	.word	0x200001b0
 800077c:	0800477c 	.word	0x0800477c
 8000780:	200001a0 	.word	0x200001a0
 8000784:	200000d8 	.word	0x200000d8
 8000788:	0800478c 	.word	0x0800478c
 800078c:	0afc2aaa 	.word	0x0afc2aaa
 8000790:	00003ca2 	.word	0x00003ca2
 8000794:	080047a0 	.word	0x080047a0
 8000798:	42700000 	.word	0x42700000

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b097      	sub	sp, #92	; 0x5c
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	2428      	movs	r4, #40	; 0x28
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2330      	movs	r3, #48	; 0x30
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 fb67 	bl	8003e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	2318      	movs	r3, #24
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	2310      	movs	r3, #16
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f003 fb5f 	bl	8003e80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 fb58 	bl	8003e80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	0021      	movs	r1, r4
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2210      	movs	r2, #16
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	22a0      	movs	r2, #160	; 0xa0
 80007f4:	0392      	lsls	r2, r2, #14
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fe2b 	bl	800245c <HAL_RCC_OscConfig>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800080a:	f000 fa4b 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	2118      	movs	r1, #24
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2207      	movs	r2, #7
 8000814:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2101      	movs	r1, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f002 f92f 	bl	8002a90 <HAL_RCC_ClockConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000836:	f000 fa35 	bl	8000ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2220      	movs	r2, #32
 800083e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fa73 	bl	8002d34 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000852:	f000 fa27 	bl	8000ca4 <Error_Handler>
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b017      	add	sp, #92	; 0x5c
 800085c:	bd90      	pop	{r4, r7, pc}
	...

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_I2C1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_I2C1_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_I2C1_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x74>)
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fffb 	bl	8001898 <HAL_I2C_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 f9fd 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fd3c 	bl	800232c <HAL_I2CEx_ConfigAnalogFilter>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f9f4 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fd7f 	bl	80023c4 <HAL_I2CEx_ConfigDigitalFilter>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f9eb 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40005400 	.word	0x40005400
 80008dc:	2000090e 	.word	0x2000090e

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART2_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008ec:	2296      	movs	r2, #150	; 0x96
 80008ee:	0192      	lsls	r2, r2, #6
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fae3 	bl	8002ef0 <HAL_UART_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f9b9 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000d8 	.word	0x200000d8
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_DMA_Init+0x38>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_DMA_Init+0x38>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_DMA_Init+0x38>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f000 fc3a 	bl	80011dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f000 fc4c 	bl	8001206 <HAL_NVIC_EnableIRQ>

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	2414      	movs	r4, #20
 8000984:	193b      	adds	r3, r7, r4
 8000986:	0018      	movs	r0, r3
 8000988:	2314      	movs	r3, #20
 800098a:	001a      	movs	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f003 fa77 	bl	8003e80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0xe8>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <MX_GPIO_Init+0xe8>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	03c9      	lsls	r1, r1, #15
 800099c:	430a      	orrs	r2, r1
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	03db      	lsls	r3, r3, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0289      	lsls	r1, r1, #10
 80009b8:	430a      	orrs	r2, r1
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009be:	695a      	ldr	r2, [r3, #20]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	029b      	lsls	r3, r3, #10
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009cc:	695a      	ldr	r2, [r3, #20]
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	0309      	lsls	r1, r1, #12
 80009d4:	430a      	orrs	r2, r1
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	031b      	lsls	r3, r3, #12
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009e8:	695a      	ldr	r2, [r3, #20]
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	02c9      	lsls	r1, r1, #11
 80009f0:	430a      	orrs	r2, r1
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xe8>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	02db      	lsls	r3, r3, #11
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_GPIO_Init+0xec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 ff0c 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2290      	movs	r2, #144	; 0x90
 8000a1a:	0352      	lsls	r2, r2, #13
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	193a      	adds	r2, r7, r4
 8000a26:	2390      	movs	r3, #144	; 0x90
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 fd8b 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22c0      	movs	r2, #192	; 0xc0
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <MX_GPIO_Init+0xec>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f000 fd77 	bl	8001548 <HAL_GPIO_Init>

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800

08000a6c <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	//TASK 2
	//Make sure you've defined DELAY1 and DELAY2 in the private define section

	//YOUR CODE HERE
	//time = DELAY1 * x;
	for(int i = 0; i < x; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e00c      	b.n	8000a94 <pause_sec+0x28>
	{
		for(int j = 0; j < (DELAY1*DELAY2); j++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	e002      	b.n	8000a86 <pause_sec+0x1a>
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <pause_sec+0x48>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	ddf8      	ble.n	8000a80 <pause_sec+0x14>
	for(int i = 0; i < x; i++)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fda1 	bl	80005dc <__aeabi_i2f>
 8000a9a:	1c03      	adds	r3, r0, #0
 8000a9c:	1c19      	adds	r1, r3, #0
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fcd8 	bl	8000454 <__aeabi_fcmpgt>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d1e8      	bne.n	8000a7a <pause_sec+0xe>
			continue; 	// This prevents the compiler from skipping the code
						// due to it optimizing it.
		}
	}
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	0000270f 	.word	0x0000270f

08000ab8 <decToBcd>:

uint8_t decToBcd(int val)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    /* Convert normal decimal numbers to binary coded decimal*/
	//TO DO:
	//TASK 3

	//YOUR CODE HERE
	return (uint8_t) ((val/10 * 16) + (val % 10));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fbb3 	bl	8000230 <__divsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	b2dc      	uxtb	r4, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	210a      	movs	r1, #10
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fc90 	bl	80003fc <__aeabi_idivmod>
 8000adc:	000b      	movs	r3, r1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	18e3      	adds	r3, r4, r3
 8000ae2:	b2db      	uxtb	r3, r3
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b003      	add	sp, #12
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <bcdToDec>:

int bcdToDec(uint8_t val)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	701a      	strb	r2, [r3, #0]
	//TO DO:
	//TASK 3
	//Complete the BCD to decimal function

	//YOUR CODE HERE
	return ((val/16 * 10) + (val % 16));
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	001a      	movs	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	220f      	movs	r2, #15
 8000b12:	4013      	ands	r3, r2
 8000b14:	18cb      	adds	r3, r1, r3

}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <setTime>:

void setTime (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af04      	add	r7, sp, #16
 8000b26:	0005      	movs	r5, r0
 8000b28:	000c      	movs	r4, r1
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	1c2a      	adds	r2, r5, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	1c22      	adds	r2, r4, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	1d7b      	adds	r3, r7, #5
 8000b3c:	1c02      	adds	r2, r0, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	//TASK 4

	uint8_t set_time[7];

	//YOUR CODE HERE
	set_time[0] = decToBcd(sec);
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff ffb4 	bl	8000ab8 <decToBcd>
 8000b50:	0003      	movs	r3, r0
 8000b52:	001a      	movs	r2, r3
 8000b54:	2408      	movs	r4, #8
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	701a      	strb	r2, [r3, #0]
	set_time[1] = decToBcd(min);
 8000b5a:	1dbb      	adds	r3, r7, #6
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ffaa 	bl	8000ab8 <decToBcd>
 8000b64:	0003      	movs	r3, r0
 8000b66:	001a      	movs	r2, r3
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	705a      	strb	r2, [r3, #1]
	set_time[2] = decToBcd(hour);
 8000b6c:	1d7b      	adds	r3, r7, #5
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ffa1 	bl	8000ab8 <decToBcd>
 8000b76:	0003      	movs	r3, r0
 8000b78:	001a      	movs	r2, r3
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	709a      	strb	r2, [r3, #2]
	set_time[3] = decToBcd(dow);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff98 	bl	8000ab8 <decToBcd>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	70da      	strb	r2, [r3, #3]
	set_time[4] = decToBcd(dom);
 8000b90:	2320      	movs	r3, #32
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ff8e 	bl	8000ab8 <decToBcd>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	711a      	strb	r2, [r3, #4]
	set_time[5] = decToBcd(month);
 8000ba4:	2324      	movs	r3, #36	; 0x24
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff84 	bl	8000ab8 <decToBcd>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	715a      	strb	r2, [r3, #5]
	set_time[6] = decToBcd(year);
 8000bb8:	2328      	movs	r3, #40	; 0x28
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff ff7a 	bl	8000ab8 <decToBcd>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	719a      	strb	r2, [r3, #6]

	//fill in the address of the RTC, the address of the first register to write anmd the size of each register
	//The function and RTC supports multiwrite. That means we can give the function a buffer and first address
	//and it will write 1 byte of data, increment the register address, write another byte and so on
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, set_time, 7, 1000);
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <setTime+0xd0>)
 8000bce:	23fa      	movs	r3, #250	; 0xfa
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2308      	movs	r3, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	f000 feef 	bl	80019c4 <HAL_I2C_Mem_Write>

}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bdb0      	pop	{r4, r5, r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	2000008c 	.word	0x2000008c

08000bf4 <getTime>:

void getTime (void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	//fill in the address of the RTC, the address of the first register to write anmd the size of each register
	//The function and RTC supports multiread. That means we can give the function a buffer and first address
	//and it will read 1 byte of data, increment the register address, write another byte and so on
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000);
 8000bfa:	4828      	ldr	r0, [pc, #160]	; (8000c9c <getTime+0xa8>)
 8000bfc:	23fa      	movs	r3, #250	; 0xfa
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2307      	movs	r3, #7
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	003b      	movs	r3, r7
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	21d0      	movs	r1, #208	; 0xd0
 8000c10:	f001 f806 	bl	8001c20 <HAL_I2C_Mem_Read>


	//YOUR CODE HERE
    time.seconds = bcdToDec(get_time[0]);
 8000c14:	003b      	movs	r3, r7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff67 	bl	8000aec <bcdToDec>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <getTime+0xac>)
 8000c24:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000c26:	003b      	movs	r3, r7
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff5e 	bl	8000aec <bcdToDec>
 8000c30:	0003      	movs	r3, r0
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <getTime+0xac>)
 8000c36:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000c38:	003b      	movs	r3, r7
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff55 	bl	8000aec <bcdToDec>
 8000c42:	0003      	movs	r3, r0
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <getTime+0xac>)
 8000c48:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff4c 	bl	8000aec <bcdToDec>
 8000c54:	0003      	movs	r3, r0
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <getTime+0xac>)
 8000c5a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ff43 	bl	8000aec <bcdToDec>
 8000c66:	0003      	movs	r3, r0
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <getTime+0xac>)
 8000c6c:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000c6e:	003b      	movs	r3, r7
 8000c70:	795b      	ldrb	r3, [r3, #5]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff ff3a 	bl	8000aec <bcdToDec>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <getTime+0xac>)
 8000c7e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000c80:	003b      	movs	r3, r7
 8000c82:	799b      	ldrb	r3, [r3, #6]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <bcdToDec>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <getTime+0xac>)
 8000c90:	719a      	strb	r2, [r3, #6]
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	200001b0 	.word	0x200001b0

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	619a      	str	r2, [r3, #24]
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	69da      	ldr	r2, [r3, #28]
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0549      	lsls	r1, r1, #21
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	61da      	str	r2, [r3, #28]
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cde:	69da      	ldr	r2, [r3, #28]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	055b      	lsls	r3, r3, #21
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	2414      	movs	r4, #20
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	0018      	movs	r0, r3
 8000d06:	2314      	movs	r3, #20
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f003 f8b8 	bl	8003e80 <memset>
  if(hi2c->Instance==I2C1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <HAL_I2C_MspInit+0x90>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d131      	bne.n	8000d7e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	02c9      	lsls	r1, r1, #11
 8000d24:	430a      	orrs	r2, r1
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	02db      	lsls	r3, r3, #11
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	22c0      	movs	r2, #192	; 0xc0
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2212      	movs	r2, #18
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_I2C_MspInit+0x98>)
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f000 fbf3 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d64:	69da      	ldr	r2, [r3, #28]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0389      	lsls	r1, r1, #14
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	61da      	str	r2, [r3, #28]
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d72:	69da      	ldr	r2, [r3, #28]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	039b      	lsls	r3, r3, #14
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b00b      	add	sp, #44	; 0x2c
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48000400 	.word	0x48000400

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2414      	movs	r4, #20
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f003 f86a 	bl	8003e80 <memset>
  if(huart->Instance==USART2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <HAL_UART_MspInit+0xec>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d160      	bne.n	8000e78 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0289      	lsls	r1, r1, #10
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	029b      	lsls	r3, r3, #10
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000dd4:	695a      	ldr	r2, [r3, #20]
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	0289      	lsls	r1, r1, #10
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	029b      	lsls	r3, r3, #10
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dee:	0021      	movs	r1, r4
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2202      	movs	r2, #2
 8000dfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2203      	movs	r2, #3
 8000e06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	187a      	adds	r2, r7, r1
 8000e10:	2390      	movs	r3, #144	; 0x90
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fb96 	bl	8001548 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <HAL_UART_MspInit+0xf8>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e24:	2210      	movs	r2, #16
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 f9f6 	bl	8001240 <HAL_DMA_Init>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000e58:	f7ff ff24 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e60:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f000 f9b5 	bl	80011dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e72:	201c      	movs	r0, #28
 8000e74:	f000 f9c7 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b00b      	add	sp, #44	; 0x2c
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	40004400 	.word	0x40004400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	2000015c 	.word	0x2000015c
 8000e8c:	40020044 	.word	0x40020044

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8ca 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fa7f 	bl	80013ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	2000015c 	.word	0x2000015c

08000ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <USART2_IRQHandler+0x14>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f002 f904 	bl	80030ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	200000d8 	.word	0x200000d8

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f002 ff84 	bl	8003e2c <__errno>
 8000f24:	0003      	movs	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	18d2      	adds	r2, r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20002000 	.word	0x20002000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	200001b8 	.word	0x200001b8
 8000f58:	200001d0 	.word	0x200001d0

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f92:	f7ff ffe3 	bl	8000f5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f96:	f002 ff4f 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fb8b 	bl	80006b4 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fac:	0800481c 	.word	0x0800481c
  ldr r2, =_sbss
 8000fb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fb4:	200001d0 	.word	0x200001d0

08000fb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_COMP_IRQHandler>
	...

08000fbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_Init+0x24>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_Init+0x24>)
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f809 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff fe6d 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x5c>)
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_InitTick+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	23fa      	movs	r3, #250	; 0xfa
 8000ff8:	0098      	lsls	r0, r3, #2
 8000ffa:	f7ff f88f 	bl	800011c <__udivsi3>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0019      	movs	r1, r3
 8001002:	0020      	movs	r0, r4
 8001004:	f7ff f88a 	bl	800011c <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f90b 	bl	8001226 <HAL_SYSTICK_Config>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e00f      	b.n	8001038 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d80b      	bhi.n	8001036 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f8d8 	bl	80011dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_InitTick+0x64>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b003      	add	sp, #12
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	18d2      	adds	r2, r2, r3
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000008 	.word	0x20000008
 800106c:	200001bc 	.word	0x200001bc

08001070 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	200001bc 	.word	0x200001bc

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b7f      	cmp	r3, #127	; 0x7f
 8001096:	d809      	bhi.n	80010ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	001a      	movs	r2, r3
 800109e:	231f      	movs	r3, #31
 80010a0:	401a      	ands	r2, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_EnableIRQ+0x30>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	4091      	lsls	r1, r2
 80010a8:	000a      	movs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
  }
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b7f      	cmp	r3, #127	; 0x7f
 80010cc:	d828      	bhi.n	8001120 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <__NVIC_SetPriority+0xd4>)
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	589b      	ldr	r3, [r3, r2]
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	0011      	movs	r1, r2
 80010e4:	2203      	movs	r2, #3
 80010e6:	400a      	ands	r2, r1
 80010e8:	00d2      	lsls	r2, r2, #3
 80010ea:	21ff      	movs	r1, #255	; 0xff
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	22ff      	movs	r2, #255	; 0xff
 80010fc:	401a      	ands	r2, r3
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	2303      	movs	r3, #3
 8001106:	4003      	ands	r3, r0
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110c:	481f      	ldr	r0, [pc, #124]	; (800118c <__NVIC_SetPriority+0xd4>)
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b25b      	sxtb	r3, r3
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	430a      	orrs	r2, r1
 8001118:	33c0      	adds	r3, #192	; 0xc0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800111e:	e031      	b.n	8001184 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <__NVIC_SetPriority+0xd8>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0019      	movs	r1, r3
 8001128:	230f      	movs	r3, #15
 800112a:	400b      	ands	r3, r1
 800112c:	3b08      	subs	r3, #8
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3306      	adds	r3, #6
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3304      	adds	r3, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1dfa      	adds	r2, r7, #7
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	0011      	movs	r1, r2
 8001140:	2203      	movs	r2, #3
 8001142:	400a      	ands	r2, r1
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	401a      	ands	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	2303      	movs	r3, #3
 8001162:	4003      	ands	r3, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <__NVIC_SetPriority+0xd8>)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	001c      	movs	r4, r3
 8001170:	230f      	movs	r3, #15
 8001172:	4023      	ands	r3, r4
 8001174:	3b08      	subs	r3, #8
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	430a      	orrs	r2, r1
 800117a:	3306      	adds	r3, #6
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	18c3      	adds	r3, r0, r3
 8001180:	3304      	adds	r3, #4
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b003      	add	sp, #12
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	045b      	lsls	r3, r3, #17
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d301      	bcc.n	80011ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a8:	2301      	movs	r3, #1
 80011aa:	e010      	b.n	80011ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <SysTick_Config+0x44>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	3a01      	subs	r2, #1
 80011b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b4:	2301      	movs	r3, #1
 80011b6:	425b      	negs	r3, r3
 80011b8:	2103      	movs	r1, #3
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff7c 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x44>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x44>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	210f      	movs	r1, #15
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	0002      	movs	r2, r0
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ff33 	bl	8001084 <__NVIC_EnableIRQ>
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ffaf 	bl	8001194 <SysTick_Config>
 8001236:	0003      	movs	r3, r0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e036      	b.n	80012c4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2221      	movs	r2, #33	; 0x21
 800125a:	2102      	movs	r1, #2
 800125c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_DMA_Init+0x8c>)
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 f932 	bl	8001510 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2221      	movs	r2, #33	; 0x21
 80012b6:	2101      	movs	r1, #1
 80012b8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}  
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	ffffc00f 	.word	0xffffc00f

080012d0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2221      	movs	r2, #33	; 0x21
 80012dc:	5c9b      	ldrb	r3, [r3, r2]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d008      	beq.n	80012f6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2204      	movs	r2, #4
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e020      	b.n	8001338 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	210e      	movs	r1, #14
 8001302:	438a      	bics	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2101      	movs	r1, #1
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2221      	movs	r2, #33	; 0x21
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	210f      	movs	r1, #15
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2221      	movs	r2, #33	; 0x21
 8001354:	5c9b      	ldrb	r3, [r3, r2]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d006      	beq.n	800136a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2204      	movs	r2, #4
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e028      	b.n	80013bc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	210e      	movs	r1, #14
 8001376:	438a      	bics	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	438a      	bics	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001392:	2101      	movs	r1, #1
 8001394:	4091      	lsls	r1, r2
 8001396:	000a      	movs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2221      	movs	r2, #33	; 0x21
 800139e:	2101      	movs	r1, #1
 80013a0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2220      	movs	r2, #32
 80013a6:	2100      	movs	r1, #0
 80013a8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	0010      	movs	r0, r2
 80013ba:	4798      	blx	r3
    } 
  }
  return status;
 80013bc:	230f      	movs	r3, #15
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2204      	movs	r2, #4
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4013      	ands	r3, r2
 80013f0:	d024      	beq.n	800143c <HAL_DMA_IRQHandler+0x72>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d020      	beq.n	800143c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2220      	movs	r2, #32
 8001402:	4013      	ands	r3, r2
 8001404:	d107      	bne.n	8001416 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2104      	movs	r1, #4
 8001412:	438a      	bics	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	2104      	movs	r1, #4
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	2b00      	cmp	r3, #0
 800142c:	d100      	bne.n	8001430 <HAL_DMA_IRQHandler+0x66>
 800142e:	e06a      	b.n	8001506 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	0010      	movs	r0, r2
 8001438:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800143a:	e064      	b.n	8001506 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2202      	movs	r2, #2
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	d02b      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xda>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d027      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2220      	movs	r2, #32
 800145c:	4013      	ands	r3, r2
 800145e:	d10b      	bne.n	8001478 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	210a      	movs	r1, #10
 800146c:	438a      	bics	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2221      	movs	r2, #33	; 0x21
 8001474:	2101      	movs	r1, #1
 8001476:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001480:	2102      	movs	r1, #2
 8001482:	4091      	lsls	r1, r2
 8001484:	000a      	movs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2220      	movs	r2, #32
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d036      	beq.n	8001506 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	0010      	movs	r0, r2
 80014a0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80014a2:	e030      	b.n	8001506 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2208      	movs	r2, #8
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	d028      	beq.n	8001506 <HAL_DMA_IRQHandler+0x13c>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4013      	ands	r3, r2
 80014ba:	d024      	beq.n	8001506 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	210e      	movs	r1, #14
 80014c8:	438a      	bics	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2101      	movs	r1, #1
 80014d6:	4091      	lsls	r1, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2221      	movs	r2, #33	; 0x21
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	2100      	movs	r1, #0
 80014f0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	0010      	movs	r0, r2
 8001502:	4798      	blx	r3
    }
   }
}  
 8001504:	e7ff      	b.n	8001506 <HAL_DMA_IRQHandler+0x13c>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <DMA_CalcBaseAndBitshift+0x30>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2114      	movs	r1, #20
 8001524:	0018      	movs	r0, r3
 8001526:	f7fe fdf9 	bl	800011c <__udivsi3>
 800152a:	0003      	movs	r3, r0
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <DMA_CalcBaseAndBitshift+0x34>)
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}
 8001540:	bffdfff8 	.word	0xbffdfff8
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e14f      	b.n	80017f8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4091      	lsls	r1, r2
 8001562:	000a      	movs	r2, r1
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d100      	bne.n	8001570 <HAL_GPIO_Init+0x28>
 800156e:	e140      	b.n	80017f2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4013      	ands	r3, r2
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	409a      	lsls	r2, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	2201      	movs	r2, #1
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	4013      	ands	r3, r2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	58d3      	ldr	r3, [r2, r3]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2207      	movs	r2, #7
 8001644:	4013      	ands	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2107      	movs	r1, #7
 800165e:	400b      	ands	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	6939      	ldr	r1, [r7, #16]
 8001678:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	401a      	ands	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d100      	bne.n	80016bc <HAL_GPIO_Init+0x174>
 80016ba:	e09a      	b.n	80017f2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	619a      	str	r2, [r3, #24]
 80016c8:	4b51      	ldr	r3, [pc, #324]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	589b      	ldr	r3, [r3, r2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4013      	ands	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	2390      	movs	r3, #144	; 0x90
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	429a      	cmp	r2, r3
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x1e2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x1de>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <HAL_GPIO_Init+0x2d4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x1da>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_GPIO_Init+0x2d8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x1d6>
 800171a:	2303      	movs	r3, #3
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x1e4>
 800171e:	2305      	movs	r3, #5
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x1e4>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x1e4>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x1e4>
 800172a:	2300      	movs	r3, #0
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	2103      	movs	r1, #3
 8001730:	400a      	ands	r2, r1
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43da      	mvns	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	025b      	lsls	r3, r3, #9
 8001762:	4013      	ands	r3, r2
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43da      	mvns	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	035b      	lsls	r3, r3, #13
 80017b6:	4013      	ands	r3, r2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	039b      	lsls	r3, r3, #14
 80017e0:	4013      	ands	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	40da      	lsrs	r2, r3
 8001800:	1e13      	subs	r3, r2, #0
 8001802:	d000      	beq.n	8001806 <HAL_GPIO_Init+0x2be>
 8001804:	e6a8      	b.n	8001558 <HAL_GPIO_Init+0x10>
  } 
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b006      	add	sp, #24
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	48000400 	.word	0x48000400
 800181c:	48000800 	.word	0x48000800
 8001820:	48000c00 	.word	0x48000c00
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	0008      	movs	r0, r1
 8001832:	0011      	movs	r1, r2
 8001834:	1cbb      	adds	r3, r7, #2
 8001836:	1c02      	adds	r2, r0, #0
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	1c7b      	adds	r3, r7, #1
 800183c:	1c0a      	adds	r2, r1, #0
 800183e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001840:	1c7b      	adds	r3, r7, #1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001848:	1cbb      	adds	r3, r7, #2
 800184a:	881a      	ldrh	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001852:	1cbb      	adds	r3, r7, #2
 8001854:	881a      	ldrh	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	000a      	movs	r2, r1
 800186c:	1cbb      	adds	r3, r7, #2
 800186e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	041a      	lsls	r2, r3, #16
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	1cb9      	adds	r1, r7, #2
 8001886:	8809      	ldrh	r1, [r1, #0]
 8001888:	400b      	ands	r3, r1
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e082      	b.n	80019b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2241      	movs	r2, #65	; 0x41
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	2100      	movs	r1, #0
 80018bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fa19 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2124      	movs	r1, #36	; 0x24
 80018cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	438a      	bics	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4934      	ldr	r1, [pc, #208]	; (80019b8 <HAL_I2C_Init+0x120>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4931      	ldr	r1, [pc, #196]	; (80019bc <HAL_I2C_Init+0x124>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0209      	lsls	r1, r1, #8
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e007      	b.n	8001926 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2184      	movs	r1, #132	; 0x84
 8001920:	0209      	lsls	r1, r1, #8
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d104      	bne.n	8001938 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	491f      	ldr	r1, [pc, #124]	; (80019c0 <HAL_I2C_Init+0x128>)
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	491a      	ldr	r1, [pc, #104]	; (80019bc <HAL_I2C_Init+0x124>)
 8001954:	400a      	ands	r2, r1
 8001956:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	431a      	orrs	r2, r3
 8001962:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69d9      	ldr	r1, [r3, #28]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1a      	ldr	r2, [r3, #32]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2241      	movs	r2, #65	; 0x41
 800199c:	2120      	movs	r1, #32
 800199e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2242      	movs	r2, #66	; 0x42
 80019aa:	2100      	movs	r1, #0
 80019ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	f0ffffff 	.word	0xf0ffffff
 80019bc:	ffff7fff 	.word	0xffff7fff
 80019c0:	02008000 	.word	0x02008000

080019c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	000c      	movs	r4, r1
 80019ce:	0010      	movs	r0, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	230a      	movs	r3, #10
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	1c22      	adds	r2, r4, #0
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	2308      	movs	r3, #8
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	1dbb      	adds	r3, r7, #6
 80019e4:	1c0a      	adds	r2, r1, #0
 80019e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2241      	movs	r2, #65	; 0x41
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d000      	beq.n	80019f6 <HAL_I2C_Mem_Write+0x32>
 80019f4:	e10c      	b.n	8001c10 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_I2C_Mem_Write+0x42>
 80019fc:	232c      	movs	r3, #44	; 0x2c
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0ff      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2C_Mem_Write+0x5c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0f8      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	2101      	movs	r1, #1
 8001a26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a28:	f7ff fb22 	bl	8001070 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	0219      	lsls	r1, r3, #8
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f000 fb0b 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0e3      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2241      	movs	r2, #65	; 0x41
 8001a4e:	2121      	movs	r1, #33	; 0x21
 8001a50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2242      	movs	r2, #66	; 0x42
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	222c      	movs	r2, #44	; 0x2c
 8001a6a:	18ba      	adds	r2, r7, r2
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a76:	1dbb      	adds	r3, r7, #6
 8001a78:	881c      	ldrh	r4, [r3, #0]
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	230a      	movs	r3, #10
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	8819      	ldrh	r1, [r3, #0]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	0023      	movs	r3, r4
 8001a92:	f000 f9f9 	bl	8001e88 <I2C_RequestMemoryWrite>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0b5      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d911      	bls.n	8001ad4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	22ff      	movs	r2, #255	; 0xff
 8001ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	045c      	lsls	r4, r3, #17
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	8819      	ldrh	r1, [r3, #0]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	0023      	movs	r3, r4
 8001ace:	f000 fbf7 	bl	80022c0 <I2C_TransferConfig>
 8001ad2:	e012      	b.n	8001afa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	049c      	lsls	r4, r3, #18
 8001ae8:	230a      	movs	r3, #10
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	8819      	ldrh	r1, [r3, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0023      	movs	r3, r4
 8001af6:	f000 fbe3 	bl	80022c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 fae8 	bl	80020d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e081      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03a      	beq.n	8001bbe <HAL_I2C_Mem_Write+0x1fa>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d136      	bne.n	8001bbe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	0013      	movs	r3, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	f000 fa7b 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e053      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d911      	bls.n	8001b98 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	22ff      	movs	r2, #255	; 0xff
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	045c      	lsls	r4, r3, #17
 8001b84:	230a      	movs	r3, #10
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	8819      	ldrh	r1, [r3, #0]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	0023      	movs	r3, r4
 8001b92:	f000 fb95 	bl	80022c0 <I2C_TransferConfig>
 8001b96:	e012      	b.n	8001bbe <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	049c      	lsls	r4, r3, #18
 8001bac:	230a      	movs	r3, #10
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	8819      	ldrh	r1, [r3, #0]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	0023      	movs	r3, r4
 8001bba:	f000 fb81 	bl	80022c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d198      	bne.n	8001afa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fac0 	bl	8002154 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e01a      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2220      	movs	r2, #32
 8001be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	490b      	ldr	r1, [pc, #44]	; (8001c1c <HAL_I2C_Mem_Write+0x258>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2241      	movs	r2, #65	; 0x41
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2242      	movs	r2, #66	; 0x42
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b007      	add	sp, #28
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	fe00e800 	.word	0xfe00e800

08001c20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	000c      	movs	r4, r1
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	230a      	movs	r3, #10
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1c22      	adds	r2, r4, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	2308      	movs	r3, #8
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	1c02      	adds	r2, r0, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	1dbb      	adds	r3, r7, #6
 8001c40:	1c0a      	adds	r2, r1, #0
 8001c42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2241      	movs	r2, #65	; 0x41
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d000      	beq.n	8001c52 <HAL_I2C_Mem_Read+0x32>
 8001c50:	e110      	b.n	8001e74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_I2C_Mem_Read+0x42>
 8001c58:	232c      	movs	r3, #44	; 0x2c
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e103      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_Mem_Read+0x5c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0fc      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c84:	f7ff f9f4 	bl	8001070 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	0219      	lsls	r1, r3, #8
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2319      	movs	r3, #25
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f000 f9dd 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e7      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2241      	movs	r2, #65	; 0x41
 8001caa:	2122      	movs	r1, #34	; 0x22
 8001cac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2242      	movs	r2, #66	; 0x42
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	222c      	movs	r2, #44	; 0x2c
 8001cc6:	18ba      	adds	r2, r7, r2
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	881c      	ldrh	r4, [r3, #0]
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	230a      	movs	r3, #10
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	8819      	ldrh	r1, [r3, #0]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	0023      	movs	r3, r4
 8001cee:	f000 f92f 	bl	8001f50 <I2C_RequestMemoryRead>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0b9      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2bff      	cmp	r3, #255	; 0xff
 8001d0a:	d911      	bls.n	8001d30 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	22ff      	movs	r2, #255	; 0xff
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	045c      	lsls	r4, r3, #17
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	8819      	ldrh	r1, [r3, #0]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <HAL_I2C_Mem_Read+0x260>)
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	0023      	movs	r3, r4
 8001d2a:	f000 fac9 	bl	80022c0 <I2C_TransferConfig>
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	049c      	lsls	r4, r3, #18
 8001d44:	230a      	movs	r3, #10
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	8819      	ldrh	r1, [r3, #0]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_I2C_Mem_Read+0x260>)
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	0023      	movs	r3, r4
 8001d52:	f000 fab5 	bl	80022c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	0013      	movs	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	2104      	movs	r1, #4
 8001d64:	f000 f978 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e082      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03a      	beq.n	8001e22 <HAL_I2C_Mem_Read+0x202>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d136      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	f000 f949 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e053      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2bff      	cmp	r3, #255	; 0xff
 8001dd6:	d911      	bls.n	8001dfc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	22ff      	movs	r2, #255	; 0xff
 8001ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	045c      	lsls	r4, r3, #17
 8001de8:	230a      	movs	r3, #10
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	8819      	ldrh	r1, [r3, #0]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	0023      	movs	r3, r4
 8001df6:	f000 fa63 	bl	80022c0 <I2C_TransferConfig>
 8001dfa:	e012      	b.n	8001e22 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	049c      	lsls	r4, r3, #18
 8001e10:	230a      	movs	r3, #10
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	8819      	ldrh	r1, [r3, #0]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	0023      	movs	r3, r4
 8001e1e:	f000 fa4f 	bl	80022c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d194      	bne.n	8001d56 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f98e 	bl	8002154 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e01a      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2220      	movs	r2, #32
 8001e46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	490c      	ldr	r1, [pc, #48]	; (8001e84 <HAL_I2C_Mem_Read+0x264>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2241      	movs	r2, #65	; 0x41
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2242      	movs	r2, #66	; 0x42
 8001e64:	2100      	movs	r1, #0
 8001e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b007      	add	sp, #28
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	80002400 	.word	0x80002400
 8001e84:	fe00e800 	.word	0xfe00e800

08001e88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	000c      	movs	r4, r1
 8001e92:	0010      	movs	r0, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	250a      	movs	r5, #10
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	1c22      	adds	r2, r4, #0
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	1c02      	adds	r2, r0, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	1dbb      	adds	r3, r7, #6
 8001ea8:	1c0a      	adds	r2, r1, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	045c      	lsls	r4, r3, #17
 8001eb6:	197b      	adds	r3, r7, r5
 8001eb8:	8819      	ldrh	r1, [r3, #0]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <I2C_RequestMemoryWrite+0xc4>)
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	0023      	movs	r3, r4
 8001ec2:	f000 f9fd 	bl	80022c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f902 	bl	80020d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e033      	b.n	8001f42 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
 8001ef0:	e019      	b.n	8001f26 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f06:	6a39      	ldr	r1, [r7, #32]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f8e3 	bl	80020d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e014      	b.n	8001f42 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f18:	2308      	movs	r3, #8
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	0013      	movs	r3, r2
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	f000 f890 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	80002000 	.word	0x80002000

08001f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	000c      	movs	r4, r1
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	250a      	movs	r5, #10
 8001f60:	197b      	adds	r3, r7, r5
 8001f62:	1c22      	adds	r2, r4, #0
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	2308      	movs	r3, #8
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	1c02      	adds	r2, r0, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	1c0a      	adds	r2, r1, #0
 8001f72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f74:	1dbb      	adds	r3, r7, #6
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	8819      	ldrh	r1, [r3, #0]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <I2C_RequestMemoryRead+0xc0>)
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2300      	movs	r3, #0
 8001f86:	f000 f99b 	bl	80022c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 f8a0 	bl	80020d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e033      	b.n	8002006 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f9e:	1dbb      	adds	r3, r7, #6
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fb4:	e019      	b.n	8001fea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 f881 	bl	80020d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d001      	beq.n	8001fdc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e014      	b.n	8002006 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fdc:	2308      	movs	r3, #8
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	f000 f82e 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	80002000 	.word	0x80002000

08002014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d103      	bne.n	8002032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	619a      	str	r2, [r3, #24]
  }
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002068:	e021      	b.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	d01e      	beq.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002070:	f7fe fffe 	bl	8001070 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	2220      	movs	r2, #32
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2120      	movs	r1, #32
 8002098:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2242      	movs	r2, #66	; 0x42
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4013      	ands	r3, r2
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	425a      	negs	r2, r3
 80020be:	4153      	adcs	r3, r2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	001a      	movs	r2, r3
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d0ce      	beq.n	800206a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e2:	e02b      	b.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f86e 	bl	80021cc <I2C_IsAcknowledgeFailed>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d001      	beq.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e029      	b.n	800214c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	d01e      	beq.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7fe ffb7 	bl	8001070 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d113      	bne.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	2220      	movs	r2, #32
 800211a:	431a      	orrs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2241      	movs	r2, #65	; 0x41
 8002124:	2120      	movs	r1, #32
 8002126:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2242      	movs	r2, #66	; 0x42
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e007      	b.n	800214c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d1cc      	bne.n	80020e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}

08002154 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002160:	e028      	b.n	80021b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f82f 	bl	80021cc <I2C_IsAcknowledgeFailed>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d001      	beq.n	8002176 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e026      	b.n	80021c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002176:	f7fe ff7b 	bl	8001070 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	429a      	cmp	r2, r3
 8002184:	d302      	bcc.n	800218c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d113      	bne.n	80021b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2220      	movs	r2, #32
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2241      	movs	r2, #65	; 0x41
 800219c:	2120      	movs	r1, #32
 800219e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2242      	movs	r2, #66	; 0x42
 80021a4:	2100      	movs	r1, #0
 80021a6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2220      	movs	r2, #32
 80021bc:	4013      	ands	r3, r2
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d1cf      	bne.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b004      	add	sp, #16
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2210      	movs	r2, #16
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d164      	bne.n	80022b0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	049b      	lsls	r3, r3, #18
 80021f0:	401a      	ands	r2, r3
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d02b      	beq.n	8002252 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	01c9      	lsls	r1, r1, #7
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e021      	b.n	8002252 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	d01e      	beq.n	8002252 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7fe ff2c 	bl	8001070 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_IsAcknowledgeFailed+0x5e>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d113      	bne.n	8002252 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	2220      	movs	r2, #32
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	2120      	movs	r1, #32
 800223c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2242      	movs	r2, #66	; 0x42
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e02f      	b.n	80022b2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2220      	movs	r2, #32
 800225a:	4013      	ands	r3, r2
 800225c:	2b20      	cmp	r3, #32
 800225e:	d1d6      	bne.n	800220e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2210      	movs	r2, #16
 8002266:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2220      	movs	r2, #32
 800226e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff fece 	bl	8002014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	490e      	ldr	r1, [pc, #56]	; (80022bc <I2C_IsAcknowledgeFailed+0xf0>)
 8002284:	400a      	ands	r2, r1
 8002286:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	2204      	movs	r2, #4
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2241      	movs	r2, #65	; 0x41
 8002298:	2120      	movs	r1, #32
 800229a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2242      	movs	r2, #66	; 0x42
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2240      	movs	r2, #64	; 0x40
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	fe00e800 	.word	0xfe00e800

080022c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	0008      	movs	r0, r1
 80022ca:	0011      	movs	r1, r2
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	240a      	movs	r4, #10
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	1c02      	adds	r2, r0, #0
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	2009      	movs	r0, #9
 80022d8:	183b      	adds	r3, r7, r0
 80022da:	1c0a      	adds	r2, r1, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	0d51      	lsrs	r1, r2, #21
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	400a      	ands	r2, r1
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <I2C_TransferConfig+0x68>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	43d2      	mvns	r2, r2
 80022f4:	401a      	ands	r2, r3
 80022f6:	0011      	movs	r1, r2
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	059b      	lsls	r3, r3, #22
 80022fe:	0d9a      	lsrs	r2, r3, #22
 8002300:	183b      	adds	r3, r7, r0
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	0418      	lsls	r0, r3, #16
 8002306:	23ff      	movs	r3, #255	; 0xff
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	4003      	ands	r3, r0
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b005      	add	sp, #20
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	03ff63ff 	.word	0x03ff63ff

0800232c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2241      	movs	r2, #65	; 0x41
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	d138      	bne.n	80023b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800234c:	2302      	movs	r3, #2
 800234e:	e032      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	2101      	movs	r1, #1
 8002356:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2241      	movs	r2, #65	; 0x41
 800235c:	2124      	movs	r1, #36	; 0x24
 800235e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	438a      	bics	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4911      	ldr	r1, [pc, #68]	; (80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2241      	movs	r2, #65	; 0x41
 80023a4:	2120      	movs	r1, #32
 80023a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	ffffefff 	.word	0xffffefff

080023c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2241      	movs	r2, #65	; 0x41
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d139      	bne.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e033      	b.n	8002450 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	2101      	movs	r1, #1
 80023ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2241      	movs	r2, #65	; 0x41
 80023f4:	2124      	movs	r1, #36	; 0x24
 80023f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2241      	movs	r2, #65	; 0x41
 800243e:	2120      	movs	r1, #32
 8002440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bd80      	pop	{r7, pc}
 8002458:	fffff0ff 	.word	0xfffff0ff

0800245c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e301      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <HAL_RCC_OscConfig+0x1e>
 8002478:	e08d      	b.n	8002596 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800247a:	4bc3      	ldr	r3, [pc, #780]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	220c      	movs	r2, #12
 8002480:	4013      	ands	r3, r2
 8002482:	2b04      	cmp	r3, #4
 8002484:	d00e      	beq.n	80024a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002486:	4bc0      	ldr	r3, [pc, #768]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	220c      	movs	r2, #12
 800248c:	4013      	ands	r3, r2
 800248e:	2b08      	cmp	r3, #8
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x64>
 8002492:	4bbd      	ldr	r3, [pc, #756]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	401a      	ands	r2, r3
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4bb8      	ldr	r3, [pc, #736]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d100      	bne.n	80024b2 <HAL_RCC_OscConfig+0x56>
 80024b0:	e070      	b.n	8002594 <HAL_RCC_OscConfig+0x138>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d000      	beq.n	80024bc <HAL_RCC_OscConfig+0x60>
 80024ba:	e06b      	b.n	8002594 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e2d8      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x7c>
 80024c8:	4baf      	ldr	r3, [pc, #700]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4bae      	ldr	r3, [pc, #696]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0249      	lsls	r1, r1, #9
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e02f      	b.n	8002538 <HAL_RCC_OscConfig+0xdc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x9e>
 80024e0:	4ba9      	ldr	r3, [pc, #676]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4ba8      	ldr	r3, [pc, #672]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	49a9      	ldr	r1, [pc, #676]	; (800278c <HAL_RCC_OscConfig+0x330>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	4ba6      	ldr	r3, [pc, #664]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4ba5      	ldr	r3, [pc, #660]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	49a7      	ldr	r1, [pc, #668]	; (8002790 <HAL_RCC_OscConfig+0x334>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e01e      	b.n	8002538 <HAL_RCC_OscConfig+0xdc>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d10e      	bne.n	8002520 <HAL_RCC_OscConfig+0xc4>
 8002502:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	02c9      	lsls	r1, r1, #11
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b9c      	ldr	r3, [pc, #624]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	0249      	lsls	r1, r1, #9
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xdc>
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b98      	ldr	r3, [pc, #608]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002526:	4999      	ldr	r1, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x330>)
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b96      	ldr	r3, [pc, #600]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b95      	ldr	r3, [pc, #596]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002532:	4997      	ldr	r1, [pc, #604]	; (8002790 <HAL_RCC_OscConfig+0x334>)
 8002534:	400a      	ands	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d014      	beq.n	800256a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd96 	bl	8001070 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254a:	f7fe fd91 	bl	8001070 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e28a      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0xee>
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fd81 	bl	8001070 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fd7c 	bl	8001070 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e275      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	4013      	ands	r3, r2
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x118>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_RCC_OscConfig+0x146>
 80025a0:	e069      	b.n	8002676 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025a2:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	220c      	movs	r2, #12
 80025a8:	4013      	ands	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	220c      	movs	r2, #12
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d11c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x196>
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	4013      	ands	r3, r2
 80025c2:	d116      	bne.n	80025f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x17e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e24b      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	22f8      	movs	r2, #248	; 0xf8
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00da      	lsls	r2, r3, #3
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	e041      	b.n	8002676 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d024      	beq.n	8002644 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fd33 	bl	8001070 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fd2e 	bl	8001070 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e227      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d0f1      	beq.n	8002610 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	22f8      	movs	r2, #248	; 0xf8
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00da      	lsls	r2, r3, #3
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e018      	b.n	8002676 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fd0e 	bl	8001070 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fd09 	bl	8001070 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e202      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d1f1      	bne.n	800265a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2208      	movs	r2, #8
 800267c:	4013      	ands	r3, r2
 800267e:	d036      	beq.n	80026ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d019      	beq.n	80026bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800268a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800268e:	2101      	movs	r1, #1
 8002690:	430a      	orrs	r2, r1
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe fcec 	bl	8001070 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fce7 	bl	8001070 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1e0      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d0f1      	beq.n	800269e <HAL_RCC_OscConfig+0x242>
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fcd2 	bl	8001070 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7fe fccd 	bl	8001070 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1c6      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f1      	bne.n	80026d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d100      	bne.n	80026fa <HAL_RCC_OscConfig+0x29e>
 80026f8:	e0b4      	b.n	8002864 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	201f      	movs	r0, #31
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	055b      	lsls	r3, r3, #21
 800270a:	4013      	ands	r3, r2
 800270c:	d110      	bne.n	8002730 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0549      	lsls	r1, r1, #21
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800272a:	183b      	adds	r3, r7, r0
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_RCC_OscConfig+0x338>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d11a      	bne.n	8002772 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCC_OscConfig+0x338>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCC_OscConfig+0x338>)
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0049      	lsls	r1, r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fc91 	bl	8001070 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fc8c 	bl	8001070 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e185      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x338>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4013      	ands	r3, r2
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d10e      	bne.n	8002798 <HAL_RCC_OscConfig+0x33c>
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 800277c:	6a1a      	ldr	r2, [r3, #32]
 800277e:	4b02      	ldr	r3, [pc, #8]	; (8002788 <HAL_RCC_OscConfig+0x32c>)
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	621a      	str	r2, [r3, #32]
 8002786:	e035      	b.n	80027f4 <HAL_RCC_OscConfig+0x398>
 8002788:	40021000 	.word	0x40021000
 800278c:	fffeffff 	.word	0xfffeffff
 8002790:	fffbffff 	.word	0xfffbffff
 8002794:	40007000 	.word	0x40007000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x35e>
 80027a0:	4bb6      	ldr	r3, [pc, #728]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	4bb5      	ldr	r3, [pc, #724]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	621a      	str	r2, [r3, #32]
 80027ac:	4bb3      	ldr	r3, [pc, #716]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	4bb2      	ldr	r3, [pc, #712]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027b2:	2104      	movs	r1, #4
 80027b4:	438a      	bics	r2, r1
 80027b6:	621a      	str	r2, [r3, #32]
 80027b8:	e01c      	b.n	80027f4 <HAL_RCC_OscConfig+0x398>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x380>
 80027c2:	4bae      	ldr	r3, [pc, #696]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	4bad      	ldr	r3, [pc, #692]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027c8:	2104      	movs	r1, #4
 80027ca:	430a      	orrs	r2, r1
 80027cc:	621a      	str	r2, [r3, #32]
 80027ce:	4bab      	ldr	r3, [pc, #684]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4baa      	ldr	r3, [pc, #680]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	621a      	str	r2, [r3, #32]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x398>
 80027dc:	4ba7      	ldr	r3, [pc, #668]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	4ba6      	ldr	r3, [pc, #664]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	438a      	bics	r2, r1
 80027e6:	621a      	str	r2, [r3, #32]
 80027e8:	4ba4      	ldr	r3, [pc, #656]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	4ba3      	ldr	r3, [pc, #652]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80027ee:	2104      	movs	r1, #4
 80027f0:	438a      	bics	r2, r1
 80027f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fc38 	bl	8001070 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e009      	b.n	800281a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc33 	bl	8001070 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	4a9b      	ldr	r2, [pc, #620]	; (8002a80 <HAL_RCC_OscConfig+0x624>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e12b      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b98      	ldr	r3, [pc, #608]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x3aa>
 8002824:	e013      	b.n	800284e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe fc23 	bl	8001070 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	e009      	b.n	8002844 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fc1e 	bl	8001070 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	4a91      	ldr	r2, [pc, #580]	; (8002a80 <HAL_RCC_OscConfig+0x624>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e116      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b8d      	ldr	r3, [pc, #564]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	2202      	movs	r2, #2
 800284a:	4013      	ands	r3, r2
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284e:	231f      	movs	r3, #31
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	4b87      	ldr	r3, [pc, #540]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800285e:	4989      	ldr	r1, [pc, #548]	; (8002a84 <HAL_RCC_OscConfig+0x628>)
 8002860:	400a      	ands	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	d063      	beq.n	8002936 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12a      	bne.n	80028cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002876:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	4b80      	ldr	r3, [pc, #512]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800287c:	2104      	movs	r1, #4
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002882:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fbef 	bl	8001070 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002898:	f7fe fbea 	bl	8001070 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0e3      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028aa:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f1      	beq.n	8002898 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028b4:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	22f8      	movs	r2, #248	; 0xf8
 80028ba:	4393      	bics	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	00da      	lsls	r2, r3, #3
 80028c4:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ca:	e034      	b.n	8002936 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	3305      	adds	r3, #5
 80028d2:	d111      	bne.n	80028f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028da:	2104      	movs	r1, #4
 80028dc:	438a      	bics	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	22f8      	movs	r2, #248	; 0xf8
 80028e6:	4393      	bics	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	00da      	lsls	r2, r3, #3
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
 80028f6:	e01e      	b.n	8002936 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80028fe:	2104      	movs	r1, #4
 8002900:	430a      	orrs	r2, r1
 8002902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002904:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002908:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800290a:	2101      	movs	r1, #1
 800290c:	438a      	bics	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7fe fbae 	bl	8001070 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800291a:	f7fe fba9 	bl	8001070 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0a2      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	2202      	movs	r2, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d1f1      	bne.n	800291a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d100      	bne.n	8002940 <HAL_RCC_OscConfig+0x4e4>
 800293e:	e097      	b.n	8002a70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	220c      	movs	r2, #12
 8002946:	4013      	ands	r3, r2
 8002948:	2b08      	cmp	r3, #8
 800294a:	d100      	bne.n	800294e <HAL_RCC_OscConfig+0x4f2>
 800294c:	e06b      	b.n	8002a26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d14c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800295c:	494a      	ldr	r1, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x62c>)
 800295e:	400a      	ands	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fb85 	bl	8001070 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fb80 	bl	8001070 <HAL_GetTick>
 8002970:	0002      	movs	r2, r0
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e079      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	049b      	lsls	r3, r3, #18
 8002986:	4013      	ands	r3, r2
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	220f      	movs	r2, #15
 8002990:	4393      	bics	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 800299a:	430a      	orrs	r2, r1
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_RCC_OscConfig+0x630>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	431a      	orrs	r2, r3
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	0449      	lsls	r1, r1, #17
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fb53 	bl	8001070 <HAL_GetTick>
 80029ca:	0003      	movs	r3, r0
 80029cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fb4e 	bl	8001070 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e047      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	049b      	lsls	r3, r3, #18
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x574>
 80029ee:	e03f      	b.n	8002a70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 80029f6:	4924      	ldr	r1, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x62c>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fb38 	bl	8001070 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fb33 	bl	8001070 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e02c      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	049b      	lsls	r3, r3, #18
 8002a20:	4013      	ands	r3, r2
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5aa>
 8002a24:	e024      	b.n	8002a70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01f      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x620>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	401a      	ands	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10e      	bne.n	8002a6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	220f      	movs	r2, #15
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	23f0      	movs	r3, #240	; 0xf0
 8002a60:	039b      	lsls	r3, r3, #14
 8002a62:	401a      	ands	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b008      	add	sp, #32
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00001388 	.word	0x00001388
 8002a84:	efffffff 	.word	0xefffffff
 8002a88:	feffffff 	.word	0xfeffffff
 8002a8c:	ffc2ffff 	.word	0xffc2ffff

08002a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b3      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d911      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4393      	bics	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	4b55      	ldr	r3, [pc, #340]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e09a      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d006      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002aea:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002af0:	21e0      	movs	r1, #224	; 0xe0
 8002af2:	00c9      	lsls	r1, r1, #3
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	22f0      	movs	r2, #240	; 0xf0
 8002afe:	4393      	bics	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	d040      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	4013      	ands	r3, r2
 8002b28:	d114      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06e      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	049b      	lsls	r3, r3, #18
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e062      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e05b      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fa82 	bl	8001070 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe fa7d 	bl	8001070 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x18c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e042      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1ec      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d211      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4393      	bics	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x184>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_RCC_ClockConfig+0x190>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002be8:	f000 f820 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bec:	0001      	movs	r1, r0
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x188>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x194>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	40da      	lsrs	r2, r3
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x198>)
 8002c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fe f9ed 	bl	8000fe4 <HAL_InitTick>
  
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	00001388 	.word	0x00001388
 8002c20:	fffff8ff 	.word	0xfffff8ff
 8002c24:	080047c8 	.word	0x080047c8
 8002c28:	20000000 	.word	0x20000000

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b08f      	sub	sp, #60	; 0x3c
 8002c30:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c32:	2314      	movs	r3, #20
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c3a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c46:	c313      	stmia	r3!, {r0, r1, r4}
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	2300      	movs	r3, #0
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	220c      	movs	r2, #12
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d002      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x4a>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d003      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x50>
 8002c74:	e02d      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c7a:	e02d      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	0c9b      	lsrs	r3, r3, #18
 8002c80:	220f      	movs	r2, #15
 8002c82:	4013      	ands	r3, r2
 8002c84:	2214      	movs	r2, #20
 8002c86:	18ba      	adds	r2, r7, r2
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	220f      	movs	r2, #15
 8002c92:	4013      	ands	r3, r2
 8002c94:	1d3a      	adds	r2, r7, #4
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	025b      	lsls	r3, r3, #9
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca6:	4812      	ldr	r0, [pc, #72]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ca8:	f7fd fa38 	bl	800011c <__udivsi3>
 8002cac:	0003      	movs	r3, r0
 8002cae:	001a      	movs	r2, r3
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	4353      	muls	r3, r2
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb6:	e009      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cba:	000a      	movs	r2, r1
 8002cbc:	0152      	lsls	r2, r2, #5
 8002cbe:	1a52      	subs	r2, r2, r1
 8002cc0:	0193      	lsls	r3, r2, #6
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	185b      	adds	r3, r3, r1
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b00f      	add	sp, #60	; 0x3c
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	080047a8 	.word	0x080047a8
 8002ce8:	080047b8 	.word	0x080047b8
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d0c:	f7ff fff2 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d10:	0001      	movs	r1, r0
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	000b      	movs	r3, r1
}    
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	080047d8 	.word	0x080047d8

08002d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	025b      	lsls	r3, r3, #9
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d50:	e08e      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2017      	movs	r0, #23
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	055b      	lsls	r3, r3, #21
 8002d62:	4013      	ands	r3, r2
 8002d64:	d110      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	0549      	lsls	r1, r1, #21
 8002d70:	430a      	orrs	r2, r1
 8002d72:	61da      	str	r2, [r3, #28]
 8002d74:	4b58      	ldr	r3, [pc, #352]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	055b      	lsls	r3, r3, #21
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	183b      	adds	r3, r7, r0
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4013      	ands	r3, r2
 8002d92:	d11a      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0049      	lsls	r1, r1, #1
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe f965 	bl	8001070 <HAL_GetTick>
 8002da6:	0003      	movs	r3, r0
 8002da8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	e008      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fe f960 	bl	8001070 <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e087      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d034      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	23c0      	movs	r3, #192	; 0xc0
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d02c      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0249      	lsls	r1, r1, #9
 8002e00:	430a      	orrs	r2, r1
 8002e02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e0a:	4936      	ldr	r1, [pc, #216]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f927 	bl	8001070 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe f922 	bl	8001070 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	4a2d      	ldr	r2, [pc, #180]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e048      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e5a:	2317      	movs	r3, #23
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e6a:	4920      	ldr	r1, [pc, #128]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2203      	movs	r2, #3
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2220      	movs	r2, #32
 8002e94:	4013      	ands	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2240      	movs	r2, #64	; 0x40
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	fffffcff 	.word	0xfffffcff
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	00001388 	.word	0x00001388
 8002eec:	efffffff 	.word	0xefffffff

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e044      	b.n	8002f8c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2274      	movs	r2, #116	; 0x74
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fd ff3d 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fbce 	bl	80036d4 <UART_SetConfig>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e024      	b.n	8002f8c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fd01 	bl	8003954 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	490d      	ldr	r1, [pc, #52]	; (8002f94 <HAL_UART_Init+0xa4>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	212a      	movs	r1, #42	; 0x2a
 8002f6e:	438a      	bics	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fd99 	bl	8003abc <UART_CheckIdleState>
 8002f8a:	0003      	movs	r3, r0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	ffffb7ff 	.word	0xffffb7ff

08002f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d000      	beq.n	8002fb2 <HAL_UART_Transmit+0x1a>
 8002fb0:	e096      	b.n	80030e0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_UART_Transmit+0x28>
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e08e      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d109      	bne.n	8002fe4 <HAL_UART_Transmit+0x4c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e07e      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2274      	movs	r2, #116	; 0x74
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Transmit+0x5a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e077      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2274      	movs	r2, #116	; 0x74
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	2100      	movs	r1, #0
 8003000:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003008:	f7fe f832 	bl	8001070 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1dba      	adds	r2, r7, #6
 8003014:	2150      	movs	r1, #80	; 0x50
 8003016:	8812      	ldrh	r2, [r2, #0]
 8003018:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1dba      	adds	r2, r7, #6
 800301e:	2152      	movs	r1, #82	; 0x52
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	429a      	cmp	r2, r3
 800302e:	d108      	bne.n	8003042 <HAL_UART_Transmit+0xaa>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	e003      	b.n	800304a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2274      	movs	r2, #116	; 0x74
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003052:	e02d      	b.n	80030b0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	0013      	movs	r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	f000 fd73 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d001      	beq.n	800306e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e039      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	05d2      	lsls	r2, r2, #23
 800307e:	0dd2      	lsrs	r2, r2, #23
 8003080:	b292      	uxth	r2, r2
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	3302      	adds	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e008      	b.n	800309e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	b292      	uxth	r2, r2
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2252      	movs	r2, #82	; 0x52
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b299      	uxth	r1, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2252      	movs	r2, #82	; 0x52
 80030ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2252      	movs	r2, #82	; 0x52
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1cb      	bne.n	8003054 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	0013      	movs	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	f000 fd3f 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e005      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b008      	add	sp, #32
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b0ab      	sub	sp, #172	; 0xac
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	22a4      	movs	r2, #164	; 0xa4
 80030fc:	18b9      	adds	r1, r7, r2
 80030fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	20a0      	movs	r0, #160	; 0xa0
 8003108:	1839      	adds	r1, r7, r0
 800310a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	219c      	movs	r1, #156	; 0x9c
 8003114:	1879      	adds	r1, r7, r1
 8003116:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003118:	0011      	movs	r1, r2
 800311a:	18bb      	adds	r3, r7, r2
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a99      	ldr	r2, [pc, #612]	; (8003384 <HAL_UART_IRQHandler+0x298>)
 8003120:	4013      	ands	r3, r2
 8003122:	2298      	movs	r2, #152	; 0x98
 8003124:	18bc      	adds	r4, r7, r2
 8003126:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003128:	18bb      	adds	r3, r7, r2
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d114      	bne.n	800315a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003130:	187b      	adds	r3, r7, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2220      	movs	r2, #32
 8003136:	4013      	ands	r3, r2
 8003138:	d00f      	beq.n	800315a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800313a:	183b      	adds	r3, r7, r0
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d00a      	beq.n	800315a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003148:	2b00      	cmp	r3, #0
 800314a:	d100      	bne.n	800314e <HAL_UART_IRQHandler+0x62>
 800314c:	e296      	b.n	800367c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	0010      	movs	r0, r2
 8003156:	4798      	blx	r3
      }
      return;
 8003158:	e290      	b.n	800367c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800315a:	2398      	movs	r3, #152	; 0x98
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d100      	bne.n	8003166 <HAL_UART_IRQHandler+0x7a>
 8003164:	e114      	b.n	8003390 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003166:	239c      	movs	r3, #156	; 0x9c
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2201      	movs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d106      	bne.n	8003180 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003172:	23a0      	movs	r3, #160	; 0xa0
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a83      	ldr	r2, [pc, #524]	; (8003388 <HAL_UART_IRQHandler+0x29c>)
 800317a:	4013      	ands	r3, r2
 800317c:	d100      	bne.n	8003180 <HAL_UART_IRQHandler+0x94>
 800317e:	e107      	b.n	8003390 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003180:	23a4      	movs	r3, #164	; 0xa4
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2201      	movs	r2, #1
 8003188:	4013      	ands	r3, r2
 800318a:	d012      	beq.n	80031b2 <HAL_UART_IRQHandler+0xc6>
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d00b      	beq.n	80031b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	589b      	ldr	r3, [r3, r2]
 80031a8:	2201      	movs	r2, #1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031b2:	23a4      	movs	r3, #164	; 0xa4
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2202      	movs	r2, #2
 80031ba:	4013      	ands	r3, r2
 80031bc:	d011      	beq.n	80031e2 <HAL_UART_IRQHandler+0xf6>
 80031be:	239c      	movs	r3, #156	; 0x9c
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2202      	movs	r2, #2
 80031d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	589b      	ldr	r3, [r3, r2]
 80031d8:	2204      	movs	r2, #4
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031e2:	23a4      	movs	r3, #164	; 0xa4
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2204      	movs	r2, #4
 80031ea:	4013      	ands	r3, r2
 80031ec:	d011      	beq.n	8003212 <HAL_UART_IRQHandler+0x126>
 80031ee:	239c      	movs	r3, #156	; 0x9c
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	4013      	ands	r3, r2
 80031f8:	d00b      	beq.n	8003212 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	589b      	ldr	r3, [r3, r2]
 8003208:	2202      	movs	r2, #2
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003212:	23a4      	movs	r3, #164	; 0xa4
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2208      	movs	r2, #8
 800321a:	4013      	ands	r3, r2
 800321c:	d017      	beq.n	800324e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	4013      	ands	r3, r2
 8003228:	d105      	bne.n	8003236 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800322a:	239c      	movs	r3, #156	; 0x9c
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2208      	movs	r2, #8
 800323c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	589b      	ldr	r3, [r3, r2]
 8003244:	2208      	movs	r2, #8
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800324e:	23a4      	movs	r3, #164	; 0xa4
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_UART_IRQHandler+0x198>
 800325c:	23a0      	movs	r3, #160	; 0xa0
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	04db      	lsls	r3, r3, #19
 8003266:	4013      	ands	r3, r2
 8003268:	d00c      	beq.n	8003284 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	589b      	ldr	r3, [r3, r2]
 800327a:	2220      	movs	r2, #32
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	589b      	ldr	r3, [r3, r2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d100      	bne.n	8003290 <HAL_UART_IRQHandler+0x1a4>
 800328e:	e1f7      	b.n	8003680 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003290:	23a4      	movs	r3, #164	; 0xa4
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2220      	movs	r2, #32
 8003298:	4013      	ands	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800329c:	23a0      	movs	r3, #160	; 0xa0
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	4013      	ands	r3, r2
 80032a6:	d008      	beq.n	80032ba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	0010      	movs	r0, r2
 80032b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	589b      	ldr	r3, [r3, r2]
 80032c0:	2194      	movs	r1, #148	; 0x94
 80032c2:	187a      	adds	r2, r7, r1
 80032c4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d004      	beq.n	80032de <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2228      	movs	r2, #40	; 0x28
 80032da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032dc:	d047      	beq.n	800336e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fcf7 	bl	8003cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d137      	bne.n	8003364 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f4:	f3ef 8310 	mrs	r3, PRIMASK
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80032fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fc:	2090      	movs	r0, #144	; 0x90
 80032fe:	183a      	adds	r2, r7, r0
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	2301      	movs	r3, #1
 8003304:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2140      	movs	r1, #64	; 0x40
 800331a:	438a      	bics	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	183b      	adds	r3, r7, r0
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_UART_IRQHandler+0x2a0>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fffd 	bl	8001340 <HAL_DMA_Abort_IT>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d01a      	beq.n	8003380 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	0018      	movs	r0, r3
 8003356:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003358:	e012      	b.n	8003380 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 f9a5 	bl	80036ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003362:	e00d      	b.n	8003380 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f9a0 	bl	80036ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	e008      	b.n	8003380 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 f99b 	bl	80036ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	2100      	movs	r1, #0
 800337c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800337e:	e17f      	b.n	8003680 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	46c0      	nop			; (mov r8, r8)
    return;
 8003382:	e17d      	b.n	8003680 <HAL_UART_IRQHandler+0x594>
 8003384:	0000080f 	.word	0x0000080f
 8003388:	04000120 	.word	0x04000120
 800338c:	08003d99 	.word	0x08003d99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	2b01      	cmp	r3, #1
 8003396:	d000      	beq.n	800339a <HAL_UART_IRQHandler+0x2ae>
 8003398:	e131      	b.n	80035fe <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800339a:	23a4      	movs	r3, #164	; 0xa4
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	4013      	ands	r3, r2
 80033a4:	d100      	bne.n	80033a8 <HAL_UART_IRQHandler+0x2bc>
 80033a6:	e12a      	b.n	80035fe <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033a8:	23a0      	movs	r3, #160	; 0xa0
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	4013      	ands	r3, r2
 80033b2:	d100      	bne.n	80033b6 <HAL_UART_IRQHandler+0x2ca>
 80033b4:	e123      	b.n	80035fe <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2210      	movs	r2, #16
 80033bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d000      	beq.n	80033ce <HAL_UART_IRQHandler+0x2e2>
 80033cc:	e09b      	b.n	8003506 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	217e      	movs	r1, #126	; 0x7e
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d100      	bne.n	80033e6 <HAL_UART_IRQHandler+0x2fa>
 80033e4:	e14e      	b.n	8003684 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2258      	movs	r2, #88	; 0x58
 80033ea:	5a9b      	ldrh	r3, [r3, r2]
 80033ec:	187a      	adds	r2, r7, r1
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d300      	bcc.n	80033f6 <HAL_UART_IRQHandler+0x30a>
 80033f4:	e146      	b.n	8003684 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	187a      	adds	r2, r7, r1
 80033fa:	215a      	movs	r1, #90	; 0x5a
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b20      	cmp	r3, #32
 8003408:	d06e      	beq.n	80034e8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	67bb      	str	r3, [r7, #120]	; 0x78
 8003414:	2301      	movs	r3, #1
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	499a      	ldr	r1, [pc, #616]	; (8003694 <HAL_UART_IRQHandler+0x5a8>)
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	677b      	str	r3, [r7, #116]	; 0x74
 8003446:	2301      	movs	r3, #1
 8003448:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	438a      	bics	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346e:	f3ef 8310 	mrs	r3, PRIMASK
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003476:	673b      	str	r3, [r7, #112]	; 0x70
 8003478:	2301      	movs	r3, #1
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	438a      	bics	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349a:	f383 8810 	msr	PRIMASK, r3
}
 800349e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b6:	2301      	movs	r3, #1
 80034b8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2110      	movs	r1, #16
 80034ce:	438a      	bics	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	f383 8810 	msr	PRIMASK, r3
}
 80034dc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fef4 	bl	80012d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2258      	movs	r2, #88	; 0x58
 80034ec:	5a9a      	ldrh	r2, [r3, r2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	215a      	movs	r1, #90	; 0x5a
 80034f2:	5a5b      	ldrh	r3, [r3, r1]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f8dc 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003504:	e0be      	b.n	8003684 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2258      	movs	r2, #88	; 0x58
 800350a:	5a99      	ldrh	r1, [r3, r2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	225a      	movs	r2, #90	; 0x5a
 8003510:	5a9b      	ldrh	r3, [r3, r2]
 8003512:	b29a      	uxth	r2, r3
 8003514:	208e      	movs	r0, #142	; 0x8e
 8003516:	183b      	adds	r3, r7, r0
 8003518:	1a8a      	subs	r2, r1, r2
 800351a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	225a      	movs	r2, #90	; 0x5a
 8003520:	5a9b      	ldrh	r3, [r3, r2]
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d100      	bne.n	800352a <HAL_UART_IRQHandler+0x43e>
 8003528:	e0ae      	b.n	8003688 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800352a:	183b      	adds	r3, r7, r0
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_UART_IRQHandler+0x448>
 8003532:	e0a9      	b.n	8003688 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003534:	f3ef 8310 	mrs	r3, PRIMASK
 8003538:	60fb      	str	r3, [r7, #12]
  return(result);
 800353a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800353c:	2488      	movs	r4, #136	; 0x88
 800353e:	193a      	adds	r2, r7, r4
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	2301      	movs	r3, #1
 8003544:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	494f      	ldr	r1, [pc, #316]	; (8003698 <HAL_UART_IRQHandler+0x5ac>)
 800355a:	400a      	ands	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	193b      	adds	r3, r7, r4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	61bb      	str	r3, [r7, #24]
  return(result);
 8003572:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003574:	2484      	movs	r4, #132	; 0x84
 8003576:	193a      	adds	r2, r7, r4
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	438a      	bics	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	193b      	adds	r3, r7, r4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035be:	2480      	movs	r4, #128	; 0x80
 80035c0:	193a      	adds	r2, r7, r4
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	2301      	movs	r3, #1
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2110      	movs	r1, #16
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ee:	183b      	adds	r3, r7, r0
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f860 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035fc:	e044      	b.n	8003688 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035fe:	23a4      	movs	r3, #164	; 0xa4
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	035b      	lsls	r3, r3, #13
 8003608:	4013      	ands	r3, r2
 800360a:	d010      	beq.n	800362e <HAL_UART_IRQHandler+0x542>
 800360c:	239c      	movs	r3, #156	; 0x9c
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	03db      	lsls	r3, r3, #15
 8003616:	4013      	ands	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	0352      	lsls	r2, r2, #13
 8003622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fbf8 	bl	8003e1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800362c:	e02f      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800362e:	23a4      	movs	r3, #164	; 0xa4
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	4013      	ands	r3, r2
 8003638:	d00f      	beq.n	800365a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800363a:	23a0      	movs	r3, #160	; 0xa0
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	4013      	ands	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01e      	beq.n	800368c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	0010      	movs	r0, r2
 8003656:	4798      	blx	r3
    }
    return;
 8003658:	e018      	b.n	800368c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800365a:	23a4      	movs	r3, #164	; 0xa4
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	4013      	ands	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_UART_IRQHandler+0x5a2>
 8003666:	23a0      	movs	r3, #160	; 0xa0
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	4013      	ands	r3, r2
 8003670:	d00d      	beq.n	800368e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fba6 	bl	8003dc6 <UART_EndTransmit_IT>
    return;
 800367a:	e008      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
      return;
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	e006      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
    return;
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	e004      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	e002      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
      return;
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	e000      	b.n	800368e <HAL_UART_IRQHandler+0x5a2>
    return;
 800368c:	46c0      	nop			; (mov r8, r8)
  }

}
 800368e:	46bd      	mov	sp, r7
 8003690:	b02b      	add	sp, #172	; 0xac
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	fffffeff 	.word	0xfffffeff
 8003698:	fffffedf 	.word	0xfffffedf

0800369c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	000a      	movs	r2, r1
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036dc:	231e      	movs	r3, #30
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a8d      	ldr	r2, [pc, #564]	; (8003938 <UART_SetConfig+0x264>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a88      	ldr	r2, [pc, #544]	; (800393c <UART_SetConfig+0x268>)
 800371a:	4013      	ands	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a7f      	ldr	r2, [pc, #508]	; (8003940 <UART_SetConfig+0x26c>)
 8003742:	4013      	ands	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7b      	ldr	r2, [pc, #492]	; (8003944 <UART_SetConfig+0x270>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d127      	bne.n	80037aa <UART_SetConfig+0xd6>
 800375a:	4b7b      	ldr	r3, [pc, #492]	; (8003948 <UART_SetConfig+0x274>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	2203      	movs	r2, #3
 8003760:	4013      	ands	r3, r2
 8003762:	2b03      	cmp	r3, #3
 8003764:	d00d      	beq.n	8003782 <UART_SetConfig+0xae>
 8003766:	d81b      	bhi.n	80037a0 <UART_SetConfig+0xcc>
 8003768:	2b02      	cmp	r3, #2
 800376a:	d014      	beq.n	8003796 <UART_SetConfig+0xc2>
 800376c:	d818      	bhi.n	80037a0 <UART_SetConfig+0xcc>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0xa4>
 8003772:	2b01      	cmp	r3, #1
 8003774:	d00a      	beq.n	800378c <UART_SetConfig+0xb8>
 8003776:	e013      	b.n	80037a0 <UART_SetConfig+0xcc>
 8003778:	231f      	movs	r3, #31
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e021      	b.n	80037c6 <UART_SetConfig+0xf2>
 8003782:	231f      	movs	r3, #31
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e01c      	b.n	80037c6 <UART_SetConfig+0xf2>
 800378c:	231f      	movs	r3, #31
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2204      	movs	r2, #4
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e017      	b.n	80037c6 <UART_SetConfig+0xf2>
 8003796:	231f      	movs	r3, #31
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	2208      	movs	r2, #8
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e012      	b.n	80037c6 <UART_SetConfig+0xf2>
 80037a0:	231f      	movs	r3, #31
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2210      	movs	r2, #16
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0xf2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a67      	ldr	r2, [pc, #412]	; (800394c <UART_SetConfig+0x278>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d104      	bne.n	80037be <UART_SetConfig+0xea>
 80037b4:	231f      	movs	r3, #31
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e003      	b.n	80037c6 <UART_SetConfig+0xf2>
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2210      	movs	r2, #16
 80037c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d15d      	bne.n	800388e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80037d2:	231f      	movs	r3, #31
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d015      	beq.n	8003808 <UART_SetConfig+0x134>
 80037dc:	dc18      	bgt.n	8003810 <UART_SetConfig+0x13c>
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00d      	beq.n	80037fe <UART_SetConfig+0x12a>
 80037e2:	dc15      	bgt.n	8003810 <UART_SetConfig+0x13c>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <UART_SetConfig+0x11a>
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d005      	beq.n	80037f8 <UART_SetConfig+0x124>
 80037ec:	e010      	b.n	8003810 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ee:	f7ff fa8b 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80037f2:	0003      	movs	r3, r0
 80037f4:	61bb      	str	r3, [r7, #24]
        break;
 80037f6:	e012      	b.n	800381e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b55      	ldr	r3, [pc, #340]	; (8003950 <UART_SetConfig+0x27c>)
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e00f      	b.n	800381e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7ff fa15 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003802:	0003      	movs	r3, r0
 8003804:	61bb      	str	r3, [r7, #24]
        break;
 8003806:	e00a      	b.n	800381e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	61bb      	str	r3, [r7, #24]
        break;
 800380e:	e006      	b.n	800381e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003814:	231e      	movs	r3, #30
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
        break;
 800381c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d100      	bne.n	8003826 <UART_SetConfig+0x152>
 8003824:	e07b      	b.n	800391e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	005a      	lsls	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	18d2      	adds	r2, r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f7fc fc6f 	bl	800011c <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	b29b      	uxth	r3, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d91c      	bls.n	8003884 <UART_SetConfig+0x1b0>
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	025b      	lsls	r3, r3, #9
 8003850:	429a      	cmp	r2, r3
 8003852:	d217      	bcs.n	8003884 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	b29a      	uxth	r2, r3
 8003858:	200e      	movs	r0, #14
 800385a:	183b      	adds	r3, r7, r0
 800385c:	210f      	movs	r1, #15
 800385e:	438a      	bics	r2, r1
 8003860:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	2207      	movs	r2, #7
 800386a:	4013      	ands	r3, r2
 800386c:	b299      	uxth	r1, r3
 800386e:	183b      	adds	r3, r7, r0
 8003870:	183a      	adds	r2, r7, r0
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	183a      	adds	r2, r7, r0
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e04c      	b.n	800391e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003884:	231e      	movs	r3, #30
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e047      	b.n	800391e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800388e:	231f      	movs	r3, #31
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d015      	beq.n	80038c4 <UART_SetConfig+0x1f0>
 8003898:	dc18      	bgt.n	80038cc <UART_SetConfig+0x1f8>
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00d      	beq.n	80038ba <UART_SetConfig+0x1e6>
 800389e:	dc15      	bgt.n	80038cc <UART_SetConfig+0x1f8>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <UART_SetConfig+0x1d6>
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d005      	beq.n	80038b4 <UART_SetConfig+0x1e0>
 80038a8:	e010      	b.n	80038cc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038aa:	f7ff fa2d 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80038ae:	0003      	movs	r3, r0
 80038b0:	61bb      	str	r3, [r7, #24]
        break;
 80038b2:	e012      	b.n	80038da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <UART_SetConfig+0x27c>)
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e00f      	b.n	80038da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ba:	f7ff f9b7 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80038be:	0003      	movs	r3, r0
 80038c0:	61bb      	str	r3, [r7, #24]
        break;
 80038c2:	e00a      	b.n	80038da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	61bb      	str	r3, [r7, #24]
        break;
 80038ca:	e006      	b.n	80038da <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d0:	231e      	movs	r3, #30
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
        break;
 80038d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01e      	beq.n	800391e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	085a      	lsrs	r2, r3, #1
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	18d2      	adds	r2, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0019      	movs	r1, r3
 80038f0:	0010      	movs	r0, r2
 80038f2:	f7fc fc13 	bl	800011c <__udivsi3>
 80038f6:	0003      	movs	r3, r0
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d909      	bls.n	8003916 <UART_SetConfig+0x242>
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	025b      	lsls	r3, r3, #9
 8003908:	429a      	cmp	r2, r3
 800390a:	d204      	bcs.n	8003916 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	e003      	b.n	800391e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003916:	231e      	movs	r3, #30
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800392a:	231e      	movs	r3, #30
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	781b      	ldrb	r3, [r3, #0]
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b008      	add	sp, #32
 8003936:	bd80      	pop	{r7, pc}
 8003938:	ffff69f3 	.word	0xffff69f3
 800393c:	ffffcfff 	.word	0xffffcfff
 8003940:	fffff4ff 	.word	0xfffff4ff
 8003944:	40013800 	.word	0x40013800
 8003948:	40021000 	.word	0x40021000
 800394c:	40004400 	.word	0x40004400
 8003950:	007a1200 	.word	0x007a1200

08003954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <UART_AdvFeatureConfig+0x144>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	d00b      	beq.n	80039a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <UART_AdvFeatureConfig+0x148>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <UART_AdvFeatureConfig+0x14c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <UART_AdvFeatureConfig+0x150>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	2210      	movs	r2, #16
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <UART_AdvFeatureConfig+0x154>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <UART_AdvFeatureConfig+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <UART_AdvFeatureConfig+0x15c>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	035b      	lsls	r3, r3, #13
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10b      	bne.n	8003a6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <UART_AdvFeatureConfig+0x160>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <UART_AdvFeatureConfig+0x164>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	fffdffff 	.word	0xfffdffff
 8003a9c:	fffeffff 	.word	0xfffeffff
 8003aa0:	fffbffff 	.word	0xfffbffff
 8003aa4:	ffff7fff 	.word	0xffff7fff
 8003aa8:	ffffefff 	.word	0xffffefff
 8003aac:	ffffdfff 	.word	0xffffdfff
 8003ab0:	ffefffff 	.word	0xffefffff
 8003ab4:	ff9fffff 	.word	0xff9fffff
 8003ab8:	fff7ffff 	.word	0xfff7ffff

08003abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003acc:	f7fd fad0 	bl	8001070 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10c      	bne.n	8003afc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0391      	lsls	r1, r2, #14
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <UART_CheckIdleState+0x8c>)
 8003aec:	9200      	str	r2, [sp, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f000 f82c 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d001      	beq.n	8003afc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e021      	b.n	8003b40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d10c      	bne.n	8003b24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	03d1      	lsls	r1, r2, #15
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <UART_CheckIdleState+0x8c>)
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f000 f818 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e00d      	b.n	8003b40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2274      	movs	r2, #116	; 0x74
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	01ffffff 	.word	0x01ffffff

08003b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b094      	sub	sp, #80	; 0x50
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	e0a3      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b60:	3301      	adds	r3, #1
 8003b62:	d100      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b64:	e09f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fd fa83 	bl	8001070 <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13d      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b84:	647b      	str	r3, [r7, #68]	; 0x44
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	494c      	ldr	r1, [pc, #304]	; (8003cd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb8:	2301      	movs	r3, #1
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2274      	movs	r2, #116	; 0x74
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e067      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	d050      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	401a      	ands	r2, r3
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d146      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	613b      	str	r3, [r7, #16]
  return(result);
 8003c28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4923      	ldr	r1, [pc, #140]	; (8003cd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c54:	f3ef 8310 	mrs	r3, PRIMASK
 8003c58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c5e:	2301      	movs	r3, #1
 8003c60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	2120      	movs	r1, #32
 8003c98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2274      	movs	r2, #116	; 0x74
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e010      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	425a      	negs	r2, r3
 8003cb6:	4153      	adcs	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	001a      	movs	r2, r3
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d100      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003cc4:	e74b      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b014      	add	sp, #80	; 0x50
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	fffffe5f 	.word	0xfffffe5f

08003cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	; 0x38
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4925      	ldr	r1, [pc, #148]	; (8003d94 <UART_EndRxTransfer+0xc0>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	623b      	str	r3, [r7, #32]
  return(result);
 8003d14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	f383 8810 	msr	PRIMASK, r3
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d118      	bne.n	8003d7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d48:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d52:	2301      	movs	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2110      	movs	r1, #16
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f383 8810 	msr	PRIMASK, r3
}
 8003d78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b00e      	add	sp, #56	; 0x38
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	fffffedf 	.word	0xfffffedf

08003d98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	225a      	movs	r2, #90	; 0x5a
 8003daa:	2100      	movs	r1, #0
 8003dac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2252      	movs	r2, #82	; 0x52
 8003db2:	2100      	movs	r1, #0
 8003db4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fc77 	bl	80036ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2140      	movs	r1, #64	; 0x40
 8003df0:	438a      	bics	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff fc44 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <__errno>:
 8003e2c:	4b01      	ldr	r3, [pc, #4]	; (8003e34 <__errno+0x8>)
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	4770      	bx	lr
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	2000000c 	.word	0x2000000c

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	4d0c      	ldr	r5, [pc, #48]	; (8003e70 <__libc_init_array+0x38>)
 8003e3e:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	42a6      	cmp	r6, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	2600      	movs	r6, #0
 8003e4a:	f000 fc8b 	bl	8004764 <_init>
 8003e4e:	4d0a      	ldr	r5, [pc, #40]	; (8003e78 <__libc_init_array+0x40>)
 8003e50:	4c0a      	ldr	r4, [pc, #40]	; (8003e7c <__libc_init_array+0x44>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	42a6      	cmp	r6, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	00b3      	lsls	r3, r6, #2
 8003e5e:	58eb      	ldr	r3, [r5, r3]
 8003e60:	4798      	blx	r3
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	00b3      	lsls	r3, r6, #2
 8003e68:	58eb      	ldr	r3, [r5, r3]
 8003e6a:	4798      	blx	r3
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08004814 	.word	0x08004814
 8003e74:	08004814 	.word	0x08004814
 8003e78:	08004814 	.word	0x08004814
 8003e7c:	08004818 	.word	0x08004818

08003e80 <memset>:
 8003e80:	0003      	movs	r3, r0
 8003e82:	1882      	adds	r2, r0, r2
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d100      	bne.n	8003e8a <memset+0xa>
 8003e88:	4770      	bx	lr
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	e7f9      	b.n	8003e84 <memset+0x4>

08003e90 <siprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	b500      	push	{lr}
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <siprintf+0x34>)
 8003e96:	b09c      	sub	sp, #112	; 0x70
 8003e98:	ab1d      	add	r3, sp, #116	; 0x74
 8003e9a:	9002      	str	r0, [sp, #8]
 8003e9c:	9006      	str	r0, [sp, #24]
 8003e9e:	9107      	str	r1, [sp, #28]
 8003ea0:	9104      	str	r1, [sp, #16]
 8003ea2:	4809      	ldr	r0, [pc, #36]	; (8003ec8 <siprintf+0x38>)
 8003ea4:	4909      	ldr	r1, [pc, #36]	; (8003ecc <siprintf+0x3c>)
 8003ea6:	cb04      	ldmia	r3!, {r2}
 8003ea8:	9105      	str	r1, [sp, #20]
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	a902      	add	r1, sp, #8
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	f000 f870 	bl	8003f94 <_svfiprintf_r>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9a02      	ldr	r2, [sp, #8]
 8003eb8:	7013      	strb	r3, [r2, #0]
 8003eba:	b01c      	add	sp, #112	; 0x70
 8003ebc:	bc08      	pop	{r3}
 8003ebe:	b003      	add	sp, #12
 8003ec0:	4718      	bx	r3
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	7fffffff 	.word	0x7fffffff
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	ffff0208 	.word	0xffff0208

08003ed0 <__ssputs_r>:
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	688e      	ldr	r6, [r1, #8]
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	0007      	movs	r7, r0
 8003ed8:	000c      	movs	r4, r1
 8003eda:	9203      	str	r2, [sp, #12]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	429e      	cmp	r6, r3
 8003ee0:	d83c      	bhi.n	8003f5c <__ssputs_r+0x8c>
 8003ee2:	2390      	movs	r3, #144	; 0x90
 8003ee4:	898a      	ldrh	r2, [r1, #12]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	421a      	tst	r2, r3
 8003eea:	d034      	beq.n	8003f56 <__ssputs_r+0x86>
 8003eec:	6909      	ldr	r1, [r1, #16]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6960      	ldr	r0, [r4, #20]
 8003ef2:	1a5b      	subs	r3, r3, r1
 8003ef4:	9302      	str	r3, [sp, #8]
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	4343      	muls	r3, r0
 8003efa:	0fdd      	lsrs	r5, r3, #31
 8003efc:	18ed      	adds	r5, r5, r3
 8003efe:	9b01      	ldr	r3, [sp, #4]
 8003f00:	9802      	ldr	r0, [sp, #8]
 8003f02:	3301      	adds	r3, #1
 8003f04:	181b      	adds	r3, r3, r0
 8003f06:	106d      	asrs	r5, r5, #1
 8003f08:	42ab      	cmp	r3, r5
 8003f0a:	d900      	bls.n	8003f0e <__ssputs_r+0x3e>
 8003f0c:	001d      	movs	r5, r3
 8003f0e:	0553      	lsls	r3, r2, #21
 8003f10:	d532      	bpl.n	8003f78 <__ssputs_r+0xa8>
 8003f12:	0029      	movs	r1, r5
 8003f14:	0038      	movs	r0, r7
 8003f16:	f000 fb53 	bl	80045c0 <_malloc_r>
 8003f1a:	1e06      	subs	r6, r0, #0
 8003f1c:	d109      	bne.n	8003f32 <__ssputs_r+0x62>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	2340      	movs	r3, #64	; 0x40
 8003f24:	2001      	movs	r0, #1
 8003f26:	89a2      	ldrh	r2, [r4, #12]
 8003f28:	4240      	negs	r0, r0
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	b005      	add	sp, #20
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f32:	9a02      	ldr	r2, [sp, #8]
 8003f34:	6921      	ldr	r1, [r4, #16]
 8003f36:	f000 faba 	bl	80044ae <memcpy>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <__ssputs_r+0xc0>)
 8003f3e:	401a      	ands	r2, r3
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	4313      	orrs	r3, r2
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	9b02      	ldr	r3, [sp, #8]
 8003f48:	6126      	str	r6, [r4, #16]
 8003f4a:	18f6      	adds	r6, r6, r3
 8003f4c:	6026      	str	r6, [r4, #0]
 8003f4e:	6165      	str	r5, [r4, #20]
 8003f50:	9e01      	ldr	r6, [sp, #4]
 8003f52:	1aed      	subs	r5, r5, r3
 8003f54:	60a5      	str	r5, [r4, #8]
 8003f56:	9b01      	ldr	r3, [sp, #4]
 8003f58:	429e      	cmp	r6, r3
 8003f5a:	d900      	bls.n	8003f5e <__ssputs_r+0x8e>
 8003f5c:	9e01      	ldr	r6, [sp, #4]
 8003f5e:	0032      	movs	r2, r6
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	f000 faac 	bl	80044c0 <memmove>
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	1b9b      	subs	r3, r3, r6
 8003f6e:	60a3      	str	r3, [r4, #8]
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	199e      	adds	r6, r3, r6
 8003f74:	6026      	str	r6, [r4, #0]
 8003f76:	e7da      	b.n	8003f2e <__ssputs_r+0x5e>
 8003f78:	002a      	movs	r2, r5
 8003f7a:	0038      	movs	r0, r7
 8003f7c:	f000 fb96 	bl	80046ac <_realloc_r>
 8003f80:	1e06      	subs	r6, r0, #0
 8003f82:	d1e0      	bne.n	8003f46 <__ssputs_r+0x76>
 8003f84:	0038      	movs	r0, r7
 8003f86:	6921      	ldr	r1, [r4, #16]
 8003f88:	f000 faae 	bl	80044e8 <_free_r>
 8003f8c:	e7c7      	b.n	8003f1e <__ssputs_r+0x4e>
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	fffffb7f 	.word	0xfffffb7f

08003f94 <_svfiprintf_r>:
 8003f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f96:	b0a1      	sub	sp, #132	; 0x84
 8003f98:	9003      	str	r0, [sp, #12]
 8003f9a:	001d      	movs	r5, r3
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	000f      	movs	r7, r1
 8003fa0:	0016      	movs	r6, r2
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	d511      	bpl.n	8003fca <_svfiprintf_r+0x36>
 8003fa6:	690b      	ldr	r3, [r1, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10e      	bne.n	8003fca <_svfiprintf_r+0x36>
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	f000 fb07 	bl	80045c0 <_malloc_r>
 8003fb2:	6038      	str	r0, [r7, #0]
 8003fb4:	6138      	str	r0, [r7, #16]
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d105      	bne.n	8003fc6 <_svfiprintf_r+0x32>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	9a03      	ldr	r2, [sp, #12]
 8003fbe:	3801      	subs	r0, #1
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	b021      	add	sp, #132	; 0x84
 8003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc6:	2340      	movs	r3, #64	; 0x40
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	ac08      	add	r4, sp, #32
 8003fce:	6163      	str	r3, [r4, #20]
 8003fd0:	3320      	adds	r3, #32
 8003fd2:	7663      	strb	r3, [r4, #25]
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	76a3      	strb	r3, [r4, #26]
 8003fd8:	9507      	str	r5, [sp, #28]
 8003fda:	0035      	movs	r5, r6
 8003fdc:	782b      	ldrb	r3, [r5, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <_svfiprintf_r+0x52>
 8003fe2:	2b25      	cmp	r3, #37	; 0x25
 8003fe4:	d147      	bne.n	8004076 <_svfiprintf_r+0xe2>
 8003fe6:	1bab      	subs	r3, r5, r6
 8003fe8:	9305      	str	r3, [sp, #20]
 8003fea:	42b5      	cmp	r5, r6
 8003fec:	d00c      	beq.n	8004008 <_svfiprintf_r+0x74>
 8003fee:	0032      	movs	r2, r6
 8003ff0:	0039      	movs	r1, r7
 8003ff2:	9803      	ldr	r0, [sp, #12]
 8003ff4:	f7ff ff6c 	bl	8003ed0 <__ssputs_r>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d100      	bne.n	8003ffe <_svfiprintf_r+0x6a>
 8003ffc:	e0ae      	b.n	800415c <_svfiprintf_r+0x1c8>
 8003ffe:	6962      	ldr	r2, [r4, #20]
 8004000:	9b05      	ldr	r3, [sp, #20]
 8004002:	4694      	mov	ip, r2
 8004004:	4463      	add	r3, ip
 8004006:	6163      	str	r3, [r4, #20]
 8004008:	782b      	ldrb	r3, [r5, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d100      	bne.n	8004010 <_svfiprintf_r+0x7c>
 800400e:	e0a5      	b.n	800415c <_svfiprintf_r+0x1c8>
 8004010:	2201      	movs	r2, #1
 8004012:	2300      	movs	r3, #0
 8004014:	4252      	negs	r2, r2
 8004016:	6062      	str	r2, [r4, #4]
 8004018:	a904      	add	r1, sp, #16
 800401a:	3254      	adds	r2, #84	; 0x54
 800401c:	1852      	adds	r2, r2, r1
 800401e:	1c6e      	adds	r6, r5, #1
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	60e3      	str	r3, [r4, #12]
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	7013      	strb	r3, [r2, #0]
 8004028:	65a3      	str	r3, [r4, #88]	; 0x58
 800402a:	2205      	movs	r2, #5
 800402c:	7831      	ldrb	r1, [r6, #0]
 800402e:	4854      	ldr	r0, [pc, #336]	; (8004180 <_svfiprintf_r+0x1ec>)
 8004030:	f000 fa32 	bl	8004498 <memchr>
 8004034:	1c75      	adds	r5, r6, #1
 8004036:	2800      	cmp	r0, #0
 8004038:	d11f      	bne.n	800407a <_svfiprintf_r+0xe6>
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	06d3      	lsls	r3, r2, #27
 800403e:	d504      	bpl.n	800404a <_svfiprintf_r+0xb6>
 8004040:	2353      	movs	r3, #83	; 0x53
 8004042:	a904      	add	r1, sp, #16
 8004044:	185b      	adds	r3, r3, r1
 8004046:	2120      	movs	r1, #32
 8004048:	7019      	strb	r1, [r3, #0]
 800404a:	0713      	lsls	r3, r2, #28
 800404c:	d504      	bpl.n	8004058 <_svfiprintf_r+0xc4>
 800404e:	2353      	movs	r3, #83	; 0x53
 8004050:	a904      	add	r1, sp, #16
 8004052:	185b      	adds	r3, r3, r1
 8004054:	212b      	movs	r1, #43	; 0x2b
 8004056:	7019      	strb	r1, [r3, #0]
 8004058:	7833      	ldrb	r3, [r6, #0]
 800405a:	2b2a      	cmp	r3, #42	; 0x2a
 800405c:	d016      	beq.n	800408c <_svfiprintf_r+0xf8>
 800405e:	0035      	movs	r5, r6
 8004060:	2100      	movs	r1, #0
 8004062:	200a      	movs	r0, #10
 8004064:	68e3      	ldr	r3, [r4, #12]
 8004066:	782a      	ldrb	r2, [r5, #0]
 8004068:	1c6e      	adds	r6, r5, #1
 800406a:	3a30      	subs	r2, #48	; 0x30
 800406c:	2a09      	cmp	r2, #9
 800406e:	d94e      	bls.n	800410e <_svfiprintf_r+0x17a>
 8004070:	2900      	cmp	r1, #0
 8004072:	d111      	bne.n	8004098 <_svfiprintf_r+0x104>
 8004074:	e017      	b.n	80040a6 <_svfiprintf_r+0x112>
 8004076:	3501      	adds	r5, #1
 8004078:	e7b0      	b.n	8003fdc <_svfiprintf_r+0x48>
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <_svfiprintf_r+0x1ec>)
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	1ac0      	subs	r0, r0, r3
 8004080:	2301      	movs	r3, #1
 8004082:	4083      	lsls	r3, r0
 8004084:	4313      	orrs	r3, r2
 8004086:	002e      	movs	r6, r5
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	e7ce      	b.n	800402a <_svfiprintf_r+0x96>
 800408c:	9b07      	ldr	r3, [sp, #28]
 800408e:	1d19      	adds	r1, r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	9107      	str	r1, [sp, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db01      	blt.n	800409c <_svfiprintf_r+0x108>
 8004098:	930b      	str	r3, [sp, #44]	; 0x2c
 800409a:	e004      	b.n	80040a6 <_svfiprintf_r+0x112>
 800409c:	425b      	negs	r3, r3
 800409e:	60e3      	str	r3, [r4, #12]
 80040a0:	2302      	movs	r3, #2
 80040a2:	4313      	orrs	r3, r2
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	782b      	ldrb	r3, [r5, #0]
 80040a8:	2b2e      	cmp	r3, #46	; 0x2e
 80040aa:	d10a      	bne.n	80040c2 <_svfiprintf_r+0x12e>
 80040ac:	786b      	ldrb	r3, [r5, #1]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d135      	bne.n	800411e <_svfiprintf_r+0x18a>
 80040b2:	9b07      	ldr	r3, [sp, #28]
 80040b4:	3502      	adds	r5, #2
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	9207      	str	r2, [sp, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db2b      	blt.n	8004118 <_svfiprintf_r+0x184>
 80040c0:	9309      	str	r3, [sp, #36]	; 0x24
 80040c2:	4e30      	ldr	r6, [pc, #192]	; (8004184 <_svfiprintf_r+0x1f0>)
 80040c4:	2203      	movs	r2, #3
 80040c6:	0030      	movs	r0, r6
 80040c8:	7829      	ldrb	r1, [r5, #0]
 80040ca:	f000 f9e5 	bl	8004498 <memchr>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d006      	beq.n	80040e0 <_svfiprintf_r+0x14c>
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	1b80      	subs	r0, r0, r6
 80040d6:	4083      	lsls	r3, r0
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	3501      	adds	r5, #1
 80040dc:	4313      	orrs	r3, r2
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	7829      	ldrb	r1, [r5, #0]
 80040e2:	2206      	movs	r2, #6
 80040e4:	4828      	ldr	r0, [pc, #160]	; (8004188 <_svfiprintf_r+0x1f4>)
 80040e6:	1c6e      	adds	r6, r5, #1
 80040e8:	7621      	strb	r1, [r4, #24]
 80040ea:	f000 f9d5 	bl	8004498 <memchr>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d03c      	beq.n	800416c <_svfiprintf_r+0x1d8>
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <_svfiprintf_r+0x1f8>)
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d125      	bne.n	8004144 <_svfiprintf_r+0x1b0>
 80040f8:	2207      	movs	r2, #7
 80040fa:	9b07      	ldr	r3, [sp, #28]
 80040fc:	3307      	adds	r3, #7
 80040fe:	4393      	bics	r3, r2
 8004100:	3308      	adds	r3, #8
 8004102:	9307      	str	r3, [sp, #28]
 8004104:	6963      	ldr	r3, [r4, #20]
 8004106:	9a04      	ldr	r2, [sp, #16]
 8004108:	189b      	adds	r3, r3, r2
 800410a:	6163      	str	r3, [r4, #20]
 800410c:	e765      	b.n	8003fda <_svfiprintf_r+0x46>
 800410e:	4343      	muls	r3, r0
 8004110:	0035      	movs	r5, r6
 8004112:	2101      	movs	r1, #1
 8004114:	189b      	adds	r3, r3, r2
 8004116:	e7a6      	b.n	8004066 <_svfiprintf_r+0xd2>
 8004118:	2301      	movs	r3, #1
 800411a:	425b      	negs	r3, r3
 800411c:	e7d0      	b.n	80040c0 <_svfiprintf_r+0x12c>
 800411e:	2300      	movs	r3, #0
 8004120:	200a      	movs	r0, #10
 8004122:	001a      	movs	r2, r3
 8004124:	3501      	adds	r5, #1
 8004126:	6063      	str	r3, [r4, #4]
 8004128:	7829      	ldrb	r1, [r5, #0]
 800412a:	1c6e      	adds	r6, r5, #1
 800412c:	3930      	subs	r1, #48	; 0x30
 800412e:	2909      	cmp	r1, #9
 8004130:	d903      	bls.n	800413a <_svfiprintf_r+0x1a6>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0c5      	beq.n	80040c2 <_svfiprintf_r+0x12e>
 8004136:	9209      	str	r2, [sp, #36]	; 0x24
 8004138:	e7c3      	b.n	80040c2 <_svfiprintf_r+0x12e>
 800413a:	4342      	muls	r2, r0
 800413c:	0035      	movs	r5, r6
 800413e:	2301      	movs	r3, #1
 8004140:	1852      	adds	r2, r2, r1
 8004142:	e7f1      	b.n	8004128 <_svfiprintf_r+0x194>
 8004144:	ab07      	add	r3, sp, #28
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	003a      	movs	r2, r7
 800414a:	0021      	movs	r1, r4
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <_svfiprintf_r+0x1fc>)
 800414e:	9803      	ldr	r0, [sp, #12]
 8004150:	e000      	b.n	8004154 <_svfiprintf_r+0x1c0>
 8004152:	bf00      	nop
 8004154:	9004      	str	r0, [sp, #16]
 8004156:	9b04      	ldr	r3, [sp, #16]
 8004158:	3301      	adds	r3, #1
 800415a:	d1d3      	bne.n	8004104 <_svfiprintf_r+0x170>
 800415c:	89bb      	ldrh	r3, [r7, #12]
 800415e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004160:	065b      	lsls	r3, r3, #25
 8004162:	d400      	bmi.n	8004166 <_svfiprintf_r+0x1d2>
 8004164:	e72d      	b.n	8003fc2 <_svfiprintf_r+0x2e>
 8004166:	2001      	movs	r0, #1
 8004168:	4240      	negs	r0, r0
 800416a:	e72a      	b.n	8003fc2 <_svfiprintf_r+0x2e>
 800416c:	ab07      	add	r3, sp, #28
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	003a      	movs	r2, r7
 8004172:	0021      	movs	r1, r4
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <_svfiprintf_r+0x1fc>)
 8004176:	9803      	ldr	r0, [sp, #12]
 8004178:	f000 f87c 	bl	8004274 <_printf_i>
 800417c:	e7ea      	b.n	8004154 <_svfiprintf_r+0x1c0>
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	080047e0 	.word	0x080047e0
 8004184:	080047e6 	.word	0x080047e6
 8004188:	080047ea 	.word	0x080047ea
 800418c:	00000000 	.word	0x00000000
 8004190:	08003ed1 	.word	0x08003ed1

08004194 <_printf_common>:
 8004194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004196:	0015      	movs	r5, r2
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	688a      	ldr	r2, [r1, #8]
 800419c:	690b      	ldr	r3, [r1, #16]
 800419e:	000c      	movs	r4, r1
 80041a0:	9000      	str	r0, [sp, #0]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	da00      	bge.n	80041a8 <_printf_common+0x14>
 80041a6:	0013      	movs	r3, r2
 80041a8:	0022      	movs	r2, r4
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	3243      	adds	r2, #67	; 0x43
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	2a00      	cmp	r2, #0
 80041b2:	d001      	beq.n	80041b8 <_printf_common+0x24>
 80041b4:	3301      	adds	r3, #1
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	d502      	bpl.n	80041c4 <_printf_common+0x30>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	3302      	adds	r3, #2
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	2306      	movs	r3, #6
 80041c8:	0017      	movs	r7, r2
 80041ca:	401f      	ands	r7, r3
 80041cc:	421a      	tst	r2, r3
 80041ce:	d027      	beq.n	8004220 <_printf_common+0x8c>
 80041d0:	0023      	movs	r3, r4
 80041d2:	3343      	adds	r3, #67	; 0x43
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	4193      	sbcs	r3, r2
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	0692      	lsls	r2, r2, #26
 80041de:	d430      	bmi.n	8004242 <_printf_common+0xae>
 80041e0:	0022      	movs	r2, r4
 80041e2:	9901      	ldr	r1, [sp, #4]
 80041e4:	9800      	ldr	r0, [sp, #0]
 80041e6:	9e08      	ldr	r6, [sp, #32]
 80041e8:	3243      	adds	r2, #67	; 0x43
 80041ea:	47b0      	blx	r6
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d025      	beq.n	800423c <_printf_common+0xa8>
 80041f0:	2306      	movs	r3, #6
 80041f2:	6820      	ldr	r0, [r4, #0]
 80041f4:	682a      	ldr	r2, [r5, #0]
 80041f6:	68e1      	ldr	r1, [r4, #12]
 80041f8:	2500      	movs	r5, #0
 80041fa:	4003      	ands	r3, r0
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d103      	bne.n	8004208 <_printf_common+0x74>
 8004200:	1a8d      	subs	r5, r1, r2
 8004202:	43eb      	mvns	r3, r5
 8004204:	17db      	asrs	r3, r3, #31
 8004206:	401d      	ands	r5, r3
 8004208:	68a3      	ldr	r3, [r4, #8]
 800420a:	6922      	ldr	r2, [r4, #16]
 800420c:	4293      	cmp	r3, r2
 800420e:	dd01      	ble.n	8004214 <_printf_common+0x80>
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	18ed      	adds	r5, r5, r3
 8004214:	2700      	movs	r7, #0
 8004216:	42bd      	cmp	r5, r7
 8004218:	d120      	bne.n	800425c <_printf_common+0xc8>
 800421a:	2000      	movs	r0, #0
 800421c:	e010      	b.n	8004240 <_printf_common+0xac>
 800421e:	3701      	adds	r7, #1
 8004220:	68e3      	ldr	r3, [r4, #12]
 8004222:	682a      	ldr	r2, [r5, #0]
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	42bb      	cmp	r3, r7
 8004228:	ddd2      	ble.n	80041d0 <_printf_common+0x3c>
 800422a:	0022      	movs	r2, r4
 800422c:	2301      	movs	r3, #1
 800422e:	9901      	ldr	r1, [sp, #4]
 8004230:	9800      	ldr	r0, [sp, #0]
 8004232:	9e08      	ldr	r6, [sp, #32]
 8004234:	3219      	adds	r2, #25
 8004236:	47b0      	blx	r6
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d1f0      	bne.n	800421e <_printf_common+0x8a>
 800423c:	2001      	movs	r0, #1
 800423e:	4240      	negs	r0, r0
 8004240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004242:	2030      	movs	r0, #48	; 0x30
 8004244:	18e1      	adds	r1, r4, r3
 8004246:	3143      	adds	r1, #67	; 0x43
 8004248:	7008      	strb	r0, [r1, #0]
 800424a:	0021      	movs	r1, r4
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	3145      	adds	r1, #69	; 0x45
 8004250:	7809      	ldrb	r1, [r1, #0]
 8004252:	18a2      	adds	r2, r4, r2
 8004254:	3243      	adds	r2, #67	; 0x43
 8004256:	3302      	adds	r3, #2
 8004258:	7011      	strb	r1, [r2, #0]
 800425a:	e7c1      	b.n	80041e0 <_printf_common+0x4c>
 800425c:	0022      	movs	r2, r4
 800425e:	2301      	movs	r3, #1
 8004260:	9901      	ldr	r1, [sp, #4]
 8004262:	9800      	ldr	r0, [sp, #0]
 8004264:	9e08      	ldr	r6, [sp, #32]
 8004266:	321a      	adds	r2, #26
 8004268:	47b0      	blx	r6
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	d0e6      	beq.n	800423c <_printf_common+0xa8>
 800426e:	3701      	adds	r7, #1
 8004270:	e7d1      	b.n	8004216 <_printf_common+0x82>
	...

08004274 <_printf_i>:
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b08b      	sub	sp, #44	; 0x2c
 8004278:	9206      	str	r2, [sp, #24]
 800427a:	000a      	movs	r2, r1
 800427c:	3243      	adds	r2, #67	; 0x43
 800427e:	9307      	str	r3, [sp, #28]
 8004280:	9005      	str	r0, [sp, #20]
 8004282:	9204      	str	r2, [sp, #16]
 8004284:	7e0a      	ldrb	r2, [r1, #24]
 8004286:	000c      	movs	r4, r1
 8004288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800428a:	2a78      	cmp	r2, #120	; 0x78
 800428c:	d807      	bhi.n	800429e <_printf_i+0x2a>
 800428e:	2a62      	cmp	r2, #98	; 0x62
 8004290:	d809      	bhi.n	80042a6 <_printf_i+0x32>
 8004292:	2a00      	cmp	r2, #0
 8004294:	d100      	bne.n	8004298 <_printf_i+0x24>
 8004296:	e0c1      	b.n	800441c <_printf_i+0x1a8>
 8004298:	2a58      	cmp	r2, #88	; 0x58
 800429a:	d100      	bne.n	800429e <_printf_i+0x2a>
 800429c:	e08c      	b.n	80043b8 <_printf_i+0x144>
 800429e:	0026      	movs	r6, r4
 80042a0:	3642      	adds	r6, #66	; 0x42
 80042a2:	7032      	strb	r2, [r6, #0]
 80042a4:	e022      	b.n	80042ec <_printf_i+0x78>
 80042a6:	0010      	movs	r0, r2
 80042a8:	3863      	subs	r0, #99	; 0x63
 80042aa:	2815      	cmp	r0, #21
 80042ac:	d8f7      	bhi.n	800429e <_printf_i+0x2a>
 80042ae:	f7fb ff2b 	bl	8000108 <__gnu_thumb1_case_shi>
 80042b2:	0016      	.short	0x0016
 80042b4:	fff6001f 	.word	0xfff6001f
 80042b8:	fff6fff6 	.word	0xfff6fff6
 80042bc:	001ffff6 	.word	0x001ffff6
 80042c0:	fff6fff6 	.word	0xfff6fff6
 80042c4:	fff6fff6 	.word	0xfff6fff6
 80042c8:	003600a8 	.word	0x003600a8
 80042cc:	fff6009a 	.word	0xfff6009a
 80042d0:	00b9fff6 	.word	0x00b9fff6
 80042d4:	0036fff6 	.word	0x0036fff6
 80042d8:	fff6fff6 	.word	0xfff6fff6
 80042dc:	009e      	.short	0x009e
 80042de:	0026      	movs	r6, r4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	3642      	adds	r6, #66	; 0x42
 80042e4:	1d11      	adds	r1, r2, #4
 80042e6:	6019      	str	r1, [r3, #0]
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	7033      	strb	r3, [r6, #0]
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0a7      	b.n	8004440 <_printf_i+0x1cc>
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	1d0a      	adds	r2, r1, #4
 80042f6:	0605      	lsls	r5, r0, #24
 80042f8:	d50b      	bpl.n	8004312 <_printf_i+0x9e>
 80042fa:	680d      	ldr	r5, [r1, #0]
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	2d00      	cmp	r5, #0
 8004300:	da03      	bge.n	800430a <_printf_i+0x96>
 8004302:	232d      	movs	r3, #45	; 0x2d
 8004304:	9a04      	ldr	r2, [sp, #16]
 8004306:	426d      	negs	r5, r5
 8004308:	7013      	strb	r3, [r2, #0]
 800430a:	4b61      	ldr	r3, [pc, #388]	; (8004490 <_printf_i+0x21c>)
 800430c:	270a      	movs	r7, #10
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	e01b      	b.n	800434a <_printf_i+0xd6>
 8004312:	680d      	ldr	r5, [r1, #0]
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	0641      	lsls	r1, r0, #25
 8004318:	d5f1      	bpl.n	80042fe <_printf_i+0x8a>
 800431a:	b22d      	sxth	r5, r5
 800431c:	e7ef      	b.n	80042fe <_printf_i+0x8a>
 800431e:	680d      	ldr	r5, [r1, #0]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	1d08      	adds	r0, r1, #4
 8004324:	6018      	str	r0, [r3, #0]
 8004326:	062e      	lsls	r6, r5, #24
 8004328:	d501      	bpl.n	800432e <_printf_i+0xba>
 800432a:	680d      	ldr	r5, [r1, #0]
 800432c:	e003      	b.n	8004336 <_printf_i+0xc2>
 800432e:	066d      	lsls	r5, r5, #25
 8004330:	d5fb      	bpl.n	800432a <_printf_i+0xb6>
 8004332:	680d      	ldr	r5, [r1, #0]
 8004334:	b2ad      	uxth	r5, r5
 8004336:	4b56      	ldr	r3, [pc, #344]	; (8004490 <_printf_i+0x21c>)
 8004338:	2708      	movs	r7, #8
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	2a6f      	cmp	r2, #111	; 0x6f
 800433e:	d000      	beq.n	8004342 <_printf_i+0xce>
 8004340:	3702      	adds	r7, #2
 8004342:	0023      	movs	r3, r4
 8004344:	2200      	movs	r2, #0
 8004346:	3343      	adds	r3, #67	; 0x43
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	60a3      	str	r3, [r4, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db03      	blt.n	800435a <_printf_i+0xe6>
 8004352:	2204      	movs	r2, #4
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	4391      	bics	r1, r2
 8004358:	6021      	str	r1, [r4, #0]
 800435a:	2d00      	cmp	r5, #0
 800435c:	d102      	bne.n	8004364 <_printf_i+0xf0>
 800435e:	9e04      	ldr	r6, [sp, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00c      	beq.n	800437e <_printf_i+0x10a>
 8004364:	9e04      	ldr	r6, [sp, #16]
 8004366:	0028      	movs	r0, r5
 8004368:	0039      	movs	r1, r7
 800436a:	f7fb ff5d 	bl	8000228 <__aeabi_uidivmod>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	3e01      	subs	r6, #1
 8004372:	5c5b      	ldrb	r3, [r3, r1]
 8004374:	7033      	strb	r3, [r6, #0]
 8004376:	002b      	movs	r3, r5
 8004378:	0005      	movs	r5, r0
 800437a:	429f      	cmp	r7, r3
 800437c:	d9f3      	bls.n	8004366 <_printf_i+0xf2>
 800437e:	2f08      	cmp	r7, #8
 8004380:	d109      	bne.n	8004396 <_printf_i+0x122>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	07db      	lsls	r3, r3, #31
 8004386:	d506      	bpl.n	8004396 <_printf_i+0x122>
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	6922      	ldr	r2, [r4, #16]
 800438c:	4293      	cmp	r3, r2
 800438e:	dc02      	bgt.n	8004396 <_printf_i+0x122>
 8004390:	2330      	movs	r3, #48	; 0x30
 8004392:	3e01      	subs	r6, #1
 8004394:	7033      	strb	r3, [r6, #0]
 8004396:	9b04      	ldr	r3, [sp, #16]
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	6123      	str	r3, [r4, #16]
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	0021      	movs	r1, r4
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	9805      	ldr	r0, [sp, #20]
 80043a4:	9b06      	ldr	r3, [sp, #24]
 80043a6:	aa09      	add	r2, sp, #36	; 0x24
 80043a8:	f7ff fef4 	bl	8004194 <_printf_common>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d14c      	bne.n	800444a <_printf_i+0x1d6>
 80043b0:	2001      	movs	r0, #1
 80043b2:	4240      	negs	r0, r0
 80043b4:	b00b      	add	sp, #44	; 0x2c
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b8:	3145      	adds	r1, #69	; 0x45
 80043ba:	700a      	strb	r2, [r1, #0]
 80043bc:	4a34      	ldr	r2, [pc, #208]	; (8004490 <_printf_i+0x21c>)
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	ca20      	ldmia	r2!, {r5}
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	0608      	lsls	r0, r1, #24
 80043ca:	d516      	bpl.n	80043fa <_printf_i+0x186>
 80043cc:	07cb      	lsls	r3, r1, #31
 80043ce:	d502      	bpl.n	80043d6 <_printf_i+0x162>
 80043d0:	2320      	movs	r3, #32
 80043d2:	4319      	orrs	r1, r3
 80043d4:	6021      	str	r1, [r4, #0]
 80043d6:	2710      	movs	r7, #16
 80043d8:	2d00      	cmp	r5, #0
 80043da:	d1b2      	bne.n	8004342 <_printf_i+0xce>
 80043dc:	2320      	movs	r3, #32
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	439a      	bics	r2, r3
 80043e2:	6022      	str	r2, [r4, #0]
 80043e4:	e7ad      	b.n	8004342 <_printf_i+0xce>
 80043e6:	2220      	movs	r2, #32
 80043e8:	6809      	ldr	r1, [r1, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	6022      	str	r2, [r4, #0]
 80043ee:	0022      	movs	r2, r4
 80043f0:	2178      	movs	r1, #120	; 0x78
 80043f2:	3245      	adds	r2, #69	; 0x45
 80043f4:	7011      	strb	r1, [r2, #0]
 80043f6:	4a27      	ldr	r2, [pc, #156]	; (8004494 <_printf_i+0x220>)
 80043f8:	e7e1      	b.n	80043be <_printf_i+0x14a>
 80043fa:	0648      	lsls	r0, r1, #25
 80043fc:	d5e6      	bpl.n	80043cc <_printf_i+0x158>
 80043fe:	b2ad      	uxth	r5, r5
 8004400:	e7e4      	b.n	80043cc <_printf_i+0x158>
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	680d      	ldr	r5, [r1, #0]
 8004406:	1d10      	adds	r0, r2, #4
 8004408:	6949      	ldr	r1, [r1, #20]
 800440a:	6018      	str	r0, [r3, #0]
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	062e      	lsls	r6, r5, #24
 8004410:	d501      	bpl.n	8004416 <_printf_i+0x1a2>
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	e002      	b.n	800441c <_printf_i+0x1a8>
 8004416:	066d      	lsls	r5, r5, #25
 8004418:	d5fb      	bpl.n	8004412 <_printf_i+0x19e>
 800441a:	8019      	strh	r1, [r3, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	9e04      	ldr	r6, [sp, #16]
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	e7bb      	b.n	800439c <_printf_i+0x128>
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	1d11      	adds	r1, r2, #4
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	6816      	ldr	r6, [r2, #0]
 800442c:	2100      	movs	r1, #0
 800442e:	0030      	movs	r0, r6
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	f000 f831 	bl	8004498 <memchr>
 8004436:	2800      	cmp	r0, #0
 8004438:	d001      	beq.n	800443e <_printf_i+0x1ca>
 800443a:	1b80      	subs	r0, r0, r6
 800443c:	6060      	str	r0, [r4, #4]
 800443e:	6863      	ldr	r3, [r4, #4]
 8004440:	6123      	str	r3, [r4, #16]
 8004442:	2300      	movs	r3, #0
 8004444:	9a04      	ldr	r2, [sp, #16]
 8004446:	7013      	strb	r3, [r2, #0]
 8004448:	e7a8      	b.n	800439c <_printf_i+0x128>
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	0032      	movs	r2, r6
 800444e:	9906      	ldr	r1, [sp, #24]
 8004450:	9805      	ldr	r0, [sp, #20]
 8004452:	9d07      	ldr	r5, [sp, #28]
 8004454:	47a8      	blx	r5
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d0aa      	beq.n	80043b0 <_printf_i+0x13c>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	079b      	lsls	r3, r3, #30
 800445e:	d415      	bmi.n	800448c <_printf_i+0x218>
 8004460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004462:	68e0      	ldr	r0, [r4, #12]
 8004464:	4298      	cmp	r0, r3
 8004466:	daa5      	bge.n	80043b4 <_printf_i+0x140>
 8004468:	0018      	movs	r0, r3
 800446a:	e7a3      	b.n	80043b4 <_printf_i+0x140>
 800446c:	0022      	movs	r2, r4
 800446e:	2301      	movs	r3, #1
 8004470:	9906      	ldr	r1, [sp, #24]
 8004472:	9805      	ldr	r0, [sp, #20]
 8004474:	9e07      	ldr	r6, [sp, #28]
 8004476:	3219      	adds	r2, #25
 8004478:	47b0      	blx	r6
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d098      	beq.n	80043b0 <_printf_i+0x13c>
 800447e:	3501      	adds	r5, #1
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	42ab      	cmp	r3, r5
 8004488:	dcf0      	bgt.n	800446c <_printf_i+0x1f8>
 800448a:	e7e9      	b.n	8004460 <_printf_i+0x1ec>
 800448c:	2500      	movs	r5, #0
 800448e:	e7f7      	b.n	8004480 <_printf_i+0x20c>
 8004490:	080047f1 	.word	0x080047f1
 8004494:	08004802 	.word	0x08004802

08004498 <memchr>:
 8004498:	b2c9      	uxtb	r1, r1
 800449a:	1882      	adds	r2, r0, r2
 800449c:	4290      	cmp	r0, r2
 800449e:	d101      	bne.n	80044a4 <memchr+0xc>
 80044a0:	2000      	movs	r0, #0
 80044a2:	4770      	bx	lr
 80044a4:	7803      	ldrb	r3, [r0, #0]
 80044a6:	428b      	cmp	r3, r1
 80044a8:	d0fb      	beq.n	80044a2 <memchr+0xa>
 80044aa:	3001      	adds	r0, #1
 80044ac:	e7f6      	b.n	800449c <memchr+0x4>

080044ae <memcpy>:
 80044ae:	2300      	movs	r3, #0
 80044b0:	b510      	push	{r4, lr}
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <memcpy+0xa>
 80044b6:	bd10      	pop	{r4, pc}
 80044b8:	5ccc      	ldrb	r4, [r1, r3]
 80044ba:	54c4      	strb	r4, [r0, r3]
 80044bc:	3301      	adds	r3, #1
 80044be:	e7f8      	b.n	80044b2 <memcpy+0x4>

080044c0 <memmove>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4288      	cmp	r0, r1
 80044c4:	d902      	bls.n	80044cc <memmove+0xc>
 80044c6:	188b      	adds	r3, r1, r2
 80044c8:	4298      	cmp	r0, r3
 80044ca:	d303      	bcc.n	80044d4 <memmove+0x14>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e007      	b.n	80044e0 <memmove+0x20>
 80044d0:	5c8b      	ldrb	r3, [r1, r2]
 80044d2:	5483      	strb	r3, [r0, r2]
 80044d4:	3a01      	subs	r2, #1
 80044d6:	d2fb      	bcs.n	80044d0 <memmove+0x10>
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	5ccc      	ldrb	r4, [r1, r3]
 80044dc:	54c4      	strb	r4, [r0, r3]
 80044de:	3301      	adds	r3, #1
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1fa      	bne.n	80044da <memmove+0x1a>
 80044e4:	e7f8      	b.n	80044d8 <memmove+0x18>
	...

080044e8 <_free_r>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	0005      	movs	r5, r0
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d010      	beq.n	8004512 <_free_r+0x2a>
 80044f0:	1f0c      	subs	r4, r1, #4
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da00      	bge.n	80044fa <_free_r+0x12>
 80044f8:	18e4      	adds	r4, r4, r3
 80044fa:	0028      	movs	r0, r5
 80044fc:	f000 f918 	bl	8004730 <__malloc_lock>
 8004500:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <_free_r+0x90>)
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <_free_r+0x2c>
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	6014      	str	r4, [r2, #0]
 800450c:	0028      	movs	r0, r5
 800450e:	f000 f917 	bl	8004740 <__malloc_unlock>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	42a3      	cmp	r3, r4
 8004516:	d908      	bls.n	800452a <_free_r+0x42>
 8004518:	6821      	ldr	r1, [r4, #0]
 800451a:	1860      	adds	r0, r4, r1
 800451c:	4283      	cmp	r3, r0
 800451e:	d1f3      	bne.n	8004508 <_free_r+0x20>
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1841      	adds	r1, r0, r1
 8004526:	6021      	str	r1, [r4, #0]
 8004528:	e7ee      	b.n	8004508 <_free_r+0x20>
 800452a:	001a      	movs	r2, r3
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <_free_r+0x4e>
 8004532:	42a3      	cmp	r3, r4
 8004534:	d9f9      	bls.n	800452a <_free_r+0x42>
 8004536:	6811      	ldr	r1, [r2, #0]
 8004538:	1850      	adds	r0, r2, r1
 800453a:	42a0      	cmp	r0, r4
 800453c:	d10b      	bne.n	8004556 <_free_r+0x6e>
 800453e:	6820      	ldr	r0, [r4, #0]
 8004540:	1809      	adds	r1, r1, r0
 8004542:	1850      	adds	r0, r2, r1
 8004544:	6011      	str	r1, [r2, #0]
 8004546:	4283      	cmp	r3, r0
 8004548:	d1e0      	bne.n	800450c <_free_r+0x24>
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	1841      	adds	r1, r0, r1
 8004550:	6011      	str	r1, [r2, #0]
 8004552:	6053      	str	r3, [r2, #4]
 8004554:	e7da      	b.n	800450c <_free_r+0x24>
 8004556:	42a0      	cmp	r0, r4
 8004558:	d902      	bls.n	8004560 <_free_r+0x78>
 800455a:	230c      	movs	r3, #12
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	e7d5      	b.n	800450c <_free_r+0x24>
 8004560:	6821      	ldr	r1, [r4, #0]
 8004562:	1860      	adds	r0, r4, r1
 8004564:	4283      	cmp	r3, r0
 8004566:	d103      	bne.n	8004570 <_free_r+0x88>
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	1841      	adds	r1, r0, r1
 800456e:	6021      	str	r1, [r4, #0]
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	6054      	str	r4, [r2, #4]
 8004574:	e7ca      	b.n	800450c <_free_r+0x24>
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	200001c0 	.word	0x200001c0

0800457c <sbrk_aligned>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4e0f      	ldr	r6, [pc, #60]	; (80045bc <sbrk_aligned+0x40>)
 8004580:	000d      	movs	r5, r1
 8004582:	6831      	ldr	r1, [r6, #0]
 8004584:	0004      	movs	r4, r0
 8004586:	2900      	cmp	r1, #0
 8004588:	d102      	bne.n	8004590 <sbrk_aligned+0x14>
 800458a:	f000 f8bf 	bl	800470c <_sbrk_r>
 800458e:	6030      	str	r0, [r6, #0]
 8004590:	0029      	movs	r1, r5
 8004592:	0020      	movs	r0, r4
 8004594:	f000 f8ba 	bl	800470c <_sbrk_r>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d00a      	beq.n	80045b2 <sbrk_aligned+0x36>
 800459c:	2303      	movs	r3, #3
 800459e:	1cc5      	adds	r5, r0, #3
 80045a0:	439d      	bics	r5, r3
 80045a2:	42a8      	cmp	r0, r5
 80045a4:	d007      	beq.n	80045b6 <sbrk_aligned+0x3a>
 80045a6:	1a29      	subs	r1, r5, r0
 80045a8:	0020      	movs	r0, r4
 80045aa:	f000 f8af 	bl	800470c <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d101      	bne.n	80045b6 <sbrk_aligned+0x3a>
 80045b2:	2501      	movs	r5, #1
 80045b4:	426d      	negs	r5, r5
 80045b6:	0028      	movs	r0, r5
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	200001c4 	.word	0x200001c4

080045c0 <_malloc_r>:
 80045c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c2:	2203      	movs	r2, #3
 80045c4:	1ccb      	adds	r3, r1, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	3308      	adds	r3, #8
 80045ca:	0006      	movs	r6, r0
 80045cc:	001f      	movs	r7, r3
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d232      	bcs.n	8004638 <_malloc_r+0x78>
 80045d2:	270c      	movs	r7, #12
 80045d4:	42b9      	cmp	r1, r7
 80045d6:	d831      	bhi.n	800463c <_malloc_r+0x7c>
 80045d8:	0030      	movs	r0, r6
 80045da:	f000 f8a9 	bl	8004730 <__malloc_lock>
 80045de:	4d32      	ldr	r5, [pc, #200]	; (80046a8 <_malloc_r+0xe8>)
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	001c      	movs	r4, r3
 80045e4:	2c00      	cmp	r4, #0
 80045e6:	d12e      	bne.n	8004646 <_malloc_r+0x86>
 80045e8:	0039      	movs	r1, r7
 80045ea:	0030      	movs	r0, r6
 80045ec:	f7ff ffc6 	bl	800457c <sbrk_aligned>
 80045f0:	0004      	movs	r4, r0
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	d11e      	bne.n	8004634 <_malloc_r+0x74>
 80045f6:	682c      	ldr	r4, [r5, #0]
 80045f8:	0025      	movs	r5, r4
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	d14a      	bne.n	8004694 <_malloc_r+0xd4>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	0029      	movs	r1, r5
 8004602:	18e3      	adds	r3, r4, r3
 8004604:	0030      	movs	r0, r6
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	f000 f880 	bl	800470c <_sbrk_r>
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	4283      	cmp	r3, r0
 8004610:	d143      	bne.n	800469a <_malloc_r+0xda>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	3703      	adds	r7, #3
 8004616:	1aff      	subs	r7, r7, r3
 8004618:	2303      	movs	r3, #3
 800461a:	439f      	bics	r7, r3
 800461c:	3708      	adds	r7, #8
 800461e:	2f0c      	cmp	r7, #12
 8004620:	d200      	bcs.n	8004624 <_malloc_r+0x64>
 8004622:	270c      	movs	r7, #12
 8004624:	0039      	movs	r1, r7
 8004626:	0030      	movs	r0, r6
 8004628:	f7ff ffa8 	bl	800457c <sbrk_aligned>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d034      	beq.n	800469a <_malloc_r+0xda>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	19df      	adds	r7, r3, r7
 8004634:	6027      	str	r7, [r4, #0]
 8004636:	e013      	b.n	8004660 <_malloc_r+0xa0>
 8004638:	2b00      	cmp	r3, #0
 800463a:	dacb      	bge.n	80045d4 <_malloc_r+0x14>
 800463c:	230c      	movs	r3, #12
 800463e:	2500      	movs	r5, #0
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	0028      	movs	r0, r5
 8004644:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	1bd1      	subs	r1, r2, r7
 800464a:	d420      	bmi.n	800468e <_malloc_r+0xce>
 800464c:	290b      	cmp	r1, #11
 800464e:	d917      	bls.n	8004680 <_malloc_r+0xc0>
 8004650:	19e2      	adds	r2, r4, r7
 8004652:	6027      	str	r7, [r4, #0]
 8004654:	42a3      	cmp	r3, r4
 8004656:	d111      	bne.n	800467c <_malloc_r+0xbc>
 8004658:	602a      	str	r2, [r5, #0]
 800465a:	6863      	ldr	r3, [r4, #4]
 800465c:	6011      	str	r1, [r2, #0]
 800465e:	6053      	str	r3, [r2, #4]
 8004660:	0030      	movs	r0, r6
 8004662:	0025      	movs	r5, r4
 8004664:	f000 f86c 	bl	8004740 <__malloc_unlock>
 8004668:	2207      	movs	r2, #7
 800466a:	350b      	adds	r5, #11
 800466c:	1d23      	adds	r3, r4, #4
 800466e:	4395      	bics	r5, r2
 8004670:	1aea      	subs	r2, r5, r3
 8004672:	429d      	cmp	r5, r3
 8004674:	d0e5      	beq.n	8004642 <_malloc_r+0x82>
 8004676:	1b5b      	subs	r3, r3, r5
 8004678:	50a3      	str	r3, [r4, r2]
 800467a:	e7e2      	b.n	8004642 <_malloc_r+0x82>
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	e7ec      	b.n	800465a <_malloc_r+0x9a>
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	42a3      	cmp	r3, r4
 8004684:	d101      	bne.n	800468a <_malloc_r+0xca>
 8004686:	602a      	str	r2, [r5, #0]
 8004688:	e7ea      	b.n	8004660 <_malloc_r+0xa0>
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	e7e8      	b.n	8004660 <_malloc_r+0xa0>
 800468e:	0023      	movs	r3, r4
 8004690:	6864      	ldr	r4, [r4, #4]
 8004692:	e7a7      	b.n	80045e4 <_malloc_r+0x24>
 8004694:	002c      	movs	r4, r5
 8004696:	686d      	ldr	r5, [r5, #4]
 8004698:	e7af      	b.n	80045fa <_malloc_r+0x3a>
 800469a:	230c      	movs	r3, #12
 800469c:	0030      	movs	r0, r6
 800469e:	6033      	str	r3, [r6, #0]
 80046a0:	f000 f84e 	bl	8004740 <__malloc_unlock>
 80046a4:	e7cd      	b.n	8004642 <_malloc_r+0x82>
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	200001c0 	.word	0x200001c0

080046ac <_realloc_r>:
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ae:	0007      	movs	r7, r0
 80046b0:	000e      	movs	r6, r1
 80046b2:	0014      	movs	r4, r2
 80046b4:	2900      	cmp	r1, #0
 80046b6:	d105      	bne.n	80046c4 <_realloc_r+0x18>
 80046b8:	0011      	movs	r1, r2
 80046ba:	f7ff ff81 	bl	80045c0 <_malloc_r>
 80046be:	0005      	movs	r5, r0
 80046c0:	0028      	movs	r0, r5
 80046c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d103      	bne.n	80046d0 <_realloc_r+0x24>
 80046c8:	f7ff ff0e 	bl	80044e8 <_free_r>
 80046cc:	0025      	movs	r5, r4
 80046ce:	e7f7      	b.n	80046c0 <_realloc_r+0x14>
 80046d0:	f000 f83e 	bl	8004750 <_malloc_usable_size_r>
 80046d4:	9001      	str	r0, [sp, #4]
 80046d6:	4284      	cmp	r4, r0
 80046d8:	d803      	bhi.n	80046e2 <_realloc_r+0x36>
 80046da:	0035      	movs	r5, r6
 80046dc:	0843      	lsrs	r3, r0, #1
 80046de:	42a3      	cmp	r3, r4
 80046e0:	d3ee      	bcc.n	80046c0 <_realloc_r+0x14>
 80046e2:	0021      	movs	r1, r4
 80046e4:	0038      	movs	r0, r7
 80046e6:	f7ff ff6b 	bl	80045c0 <_malloc_r>
 80046ea:	1e05      	subs	r5, r0, #0
 80046ec:	d0e8      	beq.n	80046c0 <_realloc_r+0x14>
 80046ee:	9b01      	ldr	r3, [sp, #4]
 80046f0:	0022      	movs	r2, r4
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d900      	bls.n	80046f8 <_realloc_r+0x4c>
 80046f6:	001a      	movs	r2, r3
 80046f8:	0031      	movs	r1, r6
 80046fa:	0028      	movs	r0, r5
 80046fc:	f7ff fed7 	bl	80044ae <memcpy>
 8004700:	0031      	movs	r1, r6
 8004702:	0038      	movs	r0, r7
 8004704:	f7ff fef0 	bl	80044e8 <_free_r>
 8004708:	e7da      	b.n	80046c0 <_realloc_r+0x14>
	...

0800470c <_sbrk_r>:
 800470c:	2300      	movs	r3, #0
 800470e:	b570      	push	{r4, r5, r6, lr}
 8004710:	4d06      	ldr	r5, [pc, #24]	; (800472c <_sbrk_r+0x20>)
 8004712:	0004      	movs	r4, r0
 8004714:	0008      	movs	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc fbea 	bl	8000ef0 <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d103      	bne.n	8004728 <_sbrk_r+0x1c>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d000      	beq.n	8004728 <_sbrk_r+0x1c>
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	bd70      	pop	{r4, r5, r6, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	200001c8 	.word	0x200001c8

08004730 <__malloc_lock>:
 8004730:	b510      	push	{r4, lr}
 8004732:	4802      	ldr	r0, [pc, #8]	; (800473c <__malloc_lock+0xc>)
 8004734:	f000 f814 	bl	8004760 <__retarget_lock_acquire_recursive>
 8004738:	bd10      	pop	{r4, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	200001cc 	.word	0x200001cc

08004740 <__malloc_unlock>:
 8004740:	b510      	push	{r4, lr}
 8004742:	4802      	ldr	r0, [pc, #8]	; (800474c <__malloc_unlock+0xc>)
 8004744:	f000 f80d 	bl	8004762 <__retarget_lock_release_recursive>
 8004748:	bd10      	pop	{r4, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	200001cc 	.word	0x200001cc

08004750 <_malloc_usable_size_r>:
 8004750:	1f0b      	subs	r3, r1, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1f18      	subs	r0, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	da01      	bge.n	800475e <_malloc_usable_size_r+0xe>
 800475a:	580b      	ldr	r3, [r1, r0]
 800475c:	18c0      	adds	r0, r0, r3
 800475e:	4770      	bx	lr

08004760 <__retarget_lock_acquire_recursive>:
 8004760:	4770      	bx	lr

08004762 <__retarget_lock_release_recursive>:
 8004762:	4770      	bx	lr

08004764 <_init>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr

08004770 <_fini>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr
